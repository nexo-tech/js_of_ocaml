-- === OCaml Runtime (Minimal Inline Version) ===
-- Initialize global OCaml namespace (required before loading runtime modules)
_G._OCAML = {}
-- 
-- NOTE: core.lua provides caml_register_global for primitives (name, func).
-- This inline version is for registering OCaml global VALUES (used by generated code).
-- TODO: Rename one of them to avoid confusion.
local _OCAML_GLOBALS = {}
function caml_register_global(n, v, name)
  _OCAML_GLOBALS[n + 1] = v
  if name then
    _OCAML_GLOBALS[name] = v
  end
  return v
end
function caml_register_named_value(name, value)
  _OCAML_GLOBALS[name] = value
  return value
end
-- 
-- Bitwise operations for Lua 5.1 (simplified implementations)
function caml_int_and(a, b)
  -- Simplified bitwise AND for common cases
  -- For full implementation, see runtime/lua/ints.lua
  local result, bit = 0, 1
  a = math.floor(a)
  b = math.floor(b)
  while a > 0 and b > 0 do
    if a % 2 == 1 and b % 2 == 1 then
      result = result + bit
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit = bit * 2
  end
  return result
end
function caml_int_or(a, b)
  local result, bit = 0, 1
  a = math.floor(a)
  b = math.floor(b)
  while a > 0 or b > 0 do
    if a % 2 == 1 or b % 2 == 1 then
      result = result + bit
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit = bit * 2
  end
  return result
end
function caml_int_xor(a, b)
  local result, bit = 0, 1
  a = math.floor(a)
  b = math.floor(b)
  while a > 0 or b > 0 do
    local a_bit, b_bit = a % 2, b % 2
    if a_bit ~= b_bit then
      result = result + bit
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit = bit * 2
  end
  return result
end
-- 
-- Int64/Float bit conversion stubs (TODO: proper implementation)
function caml_int64_float_of_bits(i)
  -- Convert int64 bits to float - stub implementation
  -- In Lua, numbers are already IEEE 754 doubles
  return i
end
-- === End Inline Runtime ===
-- 
-- Runtime: weak
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- Weak references and Ephemerons
--
-- OCaml weak arrays and ephemerons are implemented using Lua weak tables

-- Ephemeron structure:
-- [0] = tag (251)
-- [1] = "caml_ephe_list_head"
-- [2] = data (ephemeron data)
-- [3..n] = keys (weak references)

local EPHE_KEY_OFFSET = 3
local EPHE_DATA_OFFSET = 2
local EPHE_NONE = {caml_ephe_none = true}

--
-- Weak Array Creation
--

--Provides: caml_weak_create
-- Create a weak array
function caml_weak_create(n)
  local alen = EPHE_KEY_OFFSET + n
  local x = {}
  x[0] = 251
  x[1] = "caml_ephe_list_head"

  for i = 2, alen do
    x[i] = EPHE_NONE
  end

  return x
end

--Provides: caml_ephe_create
--Requires: caml_weak_create
-- Create an ephemeron (same as weak array)
function caml_ephe_create(n)
  return caml_weak_create(n)
end

--
-- Key Management
--

--Provides: caml_ephe_set_key
--Requires: caml_ephe_get_data, caml_ephe_set_data_opt
-- Set a key in ephemeron with weak reference
function caml_ephe_set_key(x, i, v)
  local old = caml_ephe_get_data(x)

  -- Store value with weak reference if it's a table
  if type(v) == "table" then
    -- Create weak table for this key
    local weak_holder = setmetatable({value = v}, {__mode = "v"})
    x[EPHE_KEY_OFFSET + i] = weak_holder
  else
    -- Non-table values are stored directly
    x[EPHE_KEY_OFFSET + i] = v
  end

  caml_ephe_set_data_opt(x, old)
  return 0
end

--Provides: caml_ephe_unset_key
--Requires: caml_ephe_get_data, caml_ephe_set_data_opt
-- Unset a key in ephemeron
function caml_ephe_unset_key(x, i)
  local old = caml_ephe_get_data(x)
  x[EPHE_KEY_OFFSET + i] = EPHE_NONE
  caml_ephe_set_data_opt(x, old)
  return 0
end

--Provides: caml_ephe_get_key
-- Get a key from ephemeron
function caml_ephe_get_key(x, i)
  local weak = x[EPHE_KEY_OFFSET + i]

  if weak == EPHE_NONE then
    return 0  -- None
  end

  -- Check if it's a weak holder
  if type(weak) == "table" and weak.value ~= nil then
    local val = weak.value
    if val == nil then
      -- Value was collected
      x[EPHE_KEY_OFFSET + i] = EPHE_NONE
      x[EPHE_DATA_OFFSET] = EPHE_NONE
      return 0
    end
    return {tag = 0, val}  -- Some(val)
  end

  -- Direct value (not weakly held)
  return {tag = 0, weak}
end

--Provides: caml_ephe_get_key_copy
--Requires: caml_ephe_get_key
-- Get a copy of a key from ephemeron
function caml_ephe_get_key_copy(x, i)
  local y = caml_ephe_get_key(x, i)
  if y == 0 then
    return y
  end

  local z = y[1]
  if type(z) == "table" then
    -- Deep copy the table
    local copy = {}
    for k, v in pairs(z) do
      copy[k] = v
    end
    return {tag = 0, copy}
  end

  return y
end

--Provides: caml_ephe_check_key
-- Check if a key is still alive
function caml_ephe_check_key(x, i)
  local weak = x[EPHE_KEY_OFFSET + i]

  if weak == EPHE_NONE then
    return 0
  end

  -- Check if weak holder still has value
  if type(weak) == "table" and weak.value ~= nil then
    local val = weak.value
    if val == nil then
      -- Value was collected
      x[EPHE_KEY_OFFSET + i] = EPHE_NONE
      x[EPHE_DATA_OFFSET] = EPHE_NONE
      return 0
    end
  end

  return 1
end

--Provides: caml_ephe_blit_key
--Requires: caml_ephe_get_data, caml_ephe_set_data_opt
-- Blit keys from one ephemeron to another
function caml_ephe_blit_key(a1, i1, a2, i2, len)
  local old = caml_ephe_get_data(a1)

  for j = 0, len - 1 do
    a2[EPHE_KEY_OFFSET + i2 + j] = a1[EPHE_KEY_OFFSET + i1 + j]
  end

  caml_ephe_set_data_opt(a2, old)
  return 0
end

--Provides: caml_ephe_blit_data
--Requires: caml_ephe_get_data, caml_ephe_set_data_opt
-- Blit data from one ephemeron to another
function caml_ephe_blit_data(src, dst)
  local old = caml_ephe_get_data(src)
  caml_ephe_set_data_opt(dst, old)
  return 0
end

--
-- Data Management
--

--Provides: caml_ephe_get_data
-- Get data from ephemeron
function caml_ephe_get_data(x)
  local data = x[EPHE_DATA_OFFSET]

  if data == EPHE_NONE then
    return 0
  end

  -- Check if all keys are still alive
  for i = EPHE_KEY_OFFSET, #x do
    local k = x[i]
    if type(k) == "table" and k.value ~= nil then
      local val = k.value
      if val == nil then
        -- A key was collected, clear data
        x[i] = EPHE_NONE
        x[EPHE_DATA_OFFSET] = EPHE_NONE
        return 0
      end
    end
  end

  return {tag = 0, data}
end

--Provides: caml_ephe_get_data_copy
--Requires: caml_ephe_get_data
-- Get a copy of data from ephemeron
function caml_ephe_get_data_copy(x)
  local r = caml_ephe_get_data(x)
  if r == 0 then
    return 0
  end

  local z = r[1]
  if type(z) == "table" then
    local copy = {}
    for k, v in pairs(z) do
      copy[k] = v
    end
    return {tag = 0, copy}
  end

  return r
end

--Provides: caml_ephe_set_data
-- Set data in ephemeron
function caml_ephe_set_data(x, data)
  -- Check if all keys are still alive
  for i = #x, EPHE_KEY_OFFSET, -1 do
    local k = x[i]
    if type(k) == "table" and k.value ~= nil then
      local val = k.value
      if val == nil then
        -- A key was collected
        x[i] = EPHE_NONE
      end
    end
  end

  x[EPHE_DATA_OFFSET] = data
  return 0
end

--Provides: caml_ephe_set_data_opt
--Requires: caml_ephe_unset_data, caml_ephe_set_data
-- Set data optionally
function caml_ephe_set_data_opt(x, data_opt)
  if data_opt == 0 then
    caml_ephe_unset_data(x)
  else
    caml_ephe_set_data(x, data_opt[1])
  end
  return 0
end

--Provides: caml_ephe_unset_data
-- Unset data in ephemeron
function caml_ephe_unset_data(x)
  x[EPHE_DATA_OFFSET] = EPHE_NONE
  return 0
end

--Provides: caml_ephe_check_data
--Requires: caml_ephe_get_data
-- Check if data is set
function caml_ephe_check_data(x)
  local data = caml_ephe_get_data(x)
  if data == 0 then
    return 0
  else
    return 1
  end
end

--
-- Weak Array API (simplified interface)
--

--Provides: caml_weak_set
--Requires: caml_ephe_unset_key, caml_ephe_set_key
-- Set value in weak array
function caml_weak_set(x, i, v)
  if v == 0 then
    caml_ephe_unset_key(x, i)
  else
    caml_ephe_set_key(x, i, v[1])
  end
  return 0
end

--Provides: caml_weak_get
--Requires: caml_ephe_get_key
-- Get value from weak array (alias for caml_ephe_get_key)
caml_weak_get = caml_ephe_get_key

--Provides: caml_weak_get_copy
--Requires: caml_ephe_get_key_copy
-- Get copy from weak array (alias for caml_ephe_get_key_copy)
caml_weak_get_copy = caml_ephe_get_key_copy

--Provides: caml_weak_check
--Requires: caml_ephe_check_key
-- Check weak array value (alias for caml_ephe_check_key)
caml_weak_check = caml_ephe_check_key

--Provides: caml_weak_blit
--Requires: caml_ephe_blit_key
-- Blit weak array (alias for caml_ephe_blit_key)
caml_weak_blit = caml_ephe_blit_key


-- Runtime: trampoline
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

--Provides: caml_trampoline
function caml_trampoline(f)
  -- Simplified trampoline for tail call optimization
  -- Since effects backend is disabled, we just call the function directly
  -- In full CPS mode, this would loop to prevent stack overflow
  return f
end

--Provides: caml_trampoline_return
function caml_trampoline_return(f, args)
  -- Return a closure for trampolining
  -- Since effects backend is disabled, we just call the function directly
  return f
end


-- Runtime: stack
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_stack_create
function caml_stack_create()
  local stack = {
    elements = {},
    length = 0
  }

  return stack
end

--Provides: caml_stack_push
function caml_stack_push(stack, value)
  stack.length = stack.length + 1
  stack.elements[stack.length] = value
end

--Provides: caml_stack_pop
function caml_stack_pop(stack)
  if stack.length == 0 then
    error("Stack.Empty")
  end

  local value = stack.elements[stack.length]
  stack.elements[stack.length] = nil  -- Allow garbage collection
  stack.length = stack.length - 1

  return value
end

--Provides: caml_stack_top
function caml_stack_top(stack)
  if stack.length == 0 then
    error("Stack.Empty")
  end

  return stack.elements[stack.length]
end

--Provides: caml_stack_is_empty
function caml_stack_is_empty(stack)
  return stack.length == 0
end

--Provides: caml_stack_length
function caml_stack_length(stack)
  return stack.length
end

--Provides: caml_stack_clear
function caml_stack_clear(stack)
  stack.elements = {}
  stack.length = 0
end

--Provides: caml_stack_iter
function caml_stack_iter(stack)
  local index = stack.length
  return function()
    if index > 0 then
      local value = stack.elements[index]
      index = index - 1
      return value
    end
    return nil
  end
end

--Provides: caml_stack_to_array
function caml_stack_to_array(stack)
  local result = {}
  for i = 1, stack.length do
    table.insert(result, stack.elements[i])
  end
  return result
end


-- Runtime: result


--Provides: caml_result_ok
function caml_result_ok(value)
  return {tag = 0, value}
end

--Provides: caml_result_error
function caml_result_error(err)
  return {tag = 1, err}
end


--Provides: caml_result_is_ok
function caml_result_is_ok(result)
  return result.tag == 0
end

--Provides: caml_result_is_error
function caml_result_is_error(result)
  return result.tag == 1
end


--Provides: caml_result_get_ok
function caml_result_get_ok(result)
  if result.tag ~= 0 then
    error("Result.get_ok")
  end
  return result[1]
end

--Provides: caml_result_get_error
function caml_result_get_error(result)
  if result.tag ~= 1 then
    error("Result.get_error")
  end
  return result[1]
end

--Provides: caml_result_value
function caml_result_value(result, default)
  if result.tag == 0 then
    return result[1]
  end
  return default
end


--Provides: caml_result_map
function caml_result_map(f, result)
  if result.tag == 0 then
    return {tag = 0, f(result[1])}
  end
  return result
end

--Provides: caml_result_map_error
function caml_result_map_error(f, result)
  if result.tag == 1 then
    return {tag = 1, f(result[1])}
  end
  return result
end

--Provides: caml_result_bind
function caml_result_bind(result, f)
  if result.tag == 0 then
    return f(result[1])
  end
  return result
end

--Provides: caml_result_join
function caml_result_join(result)
  if result.tag == 0 then
    return result[1]
  end
  return result
end

--Provides: caml_result_fold
function caml_result_fold(ok_f, error_f, result)
  if result.tag == 0 then
    return ok_f(result[1])
  else
    return error_f(result[1])
  end
end

--Provides: caml_result_iter
function caml_result_iter(f, result)
  if result.tag == 0 then
    f(result[1])
  end
end

--Provides: caml_result_iter_error
function caml_result_iter_error(f, result)
  if result.tag == 1 then
    f(result[1])
  end
end


--Provides: caml_result_equal
function caml_result_equal(ok_eq, error_eq, result1, result2)
  if result1.tag ~= result2.tag then
    return false
  end
  if result1.tag == 0 then
    return ok_eq(result1[1], result2[1])
  else
    return error_eq(result1[1], result2[1])
  end
end

--Provides: caml_result_compare
function caml_result_compare(ok_cmp, error_cmp, result1, result2)
  if result1.tag ~= result2.tag then
    if result1.tag == 0 then
      return -1  -- Ok < Error
    else
      return 1   -- Error > Ok
    end
  end
  if result1.tag == 0 then
    return ok_cmp(result1[1], result2[1])
  else
    return error_cmp(result1[1], result2[1])
  end
end


--Provides: caml_result_to_option
function caml_result_to_option(result)
  if result.tag == 0 then
    return {tag = 0, result[1]}  -- Some(value)
  end
  return 0  -- None
end

--Provides: caml_result_to_list
function caml_result_to_list(result)
  if result.tag == 0 then
    return {tag = 0, result[1], 0}  -- Single element list
  end
  return 0  -- Empty list
end

--Provides: caml_result_to_seq
function caml_result_to_seq(result)
  if result.tag == 1 then
    return function() return 0 end  -- Empty sequence
  end
  local yielded = false
  return function()
    if yielded then
      return 0
    end
    yielded = true
    return {tag = 0, result[1], function() return 0 end}
  end
end


-- Runtime: queue
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_queue_create
function caml_queue_create()
  local queue = {
    elements = {},
    head = 1,
    tail = 1,
    length = 0
  }

  return queue
end

--Provides: caml_queue_add
function caml_queue_add(queue, value)
  queue.elements[queue.tail] = value
  queue.tail = queue.tail + 1
  queue.length = queue.length + 1
end

--Provides: caml_queue_take
function caml_queue_take(queue)
  if queue.length == 0 then
    error("Queue.Empty")
  end

  local value = queue.elements[queue.head]
  queue.elements[queue.head] = nil  -- Allow garbage collection
  queue.head = queue.head + 1
  queue.length = queue.length - 1

  if queue.length == 0 then
    queue.head = 1
    queue.tail = 1
  end

  return value
end

--Provides: caml_queue_peek
function caml_queue_peek(queue)
  if queue.length == 0 then
    error("Queue.Empty")
  end

  return queue.elements[queue.head]
end

--Provides: caml_queue_is_empty
function caml_queue_is_empty(queue)
  return queue.length == 0
end

--Provides: caml_queue_length
function caml_queue_length(queue)
  return queue.length
end

--Provides: caml_queue_clear
function caml_queue_clear(queue)
  queue.elements = {}
  queue.head = 1
  queue.tail = 1
  queue.length = 0
end

--Provides: caml_queue_iter
function caml_queue_iter(queue)
  local index = queue.head
  return function()
    if index < queue.tail then
      local value = queue.elements[index]
      index = index + 1
      return value
    end
    return nil
  end
end

--Provides: caml_queue_to_array
function caml_queue_to_array(queue)
  local result = {}
  for i = queue.head, queue.tail - 1 do
    table.insert(result, queue.elements[i])
  end
  return result
end


-- Runtime: option


--Provides: caml_option_none
function caml_option_none()
  return 0
end

--Provides: caml_option_some
function caml_option_some(value)
  return {tag = 0, value}
end


--Provides: caml_option_is_none
function caml_option_is_none(opt)
  return opt == 0
end

--Provides: caml_option_is_some
function caml_option_is_some(opt)
  return opt ~= 0
end


--Provides: caml_option_get
function caml_option_get(opt)
  if opt == 0 then
    error("Option.get")
  end
  return opt[1]
end

--Provides: caml_option_value
function caml_option_value(opt, default)
  if opt == 0 then
    return default
  end
  return opt[1]
end


--Provides: caml_option_map
function caml_option_map(f, opt)
  if opt == 0 then
    return 0
  end
  return {tag = 0, f(opt[1])}
end

--Provides: caml_option_bind
function caml_option_bind(opt, f)
  if opt == 0 then
    return 0
  end
  return f(opt[1])
end

--Provides: caml_option_join
function caml_option_join(opt)
  if opt == 0 then
    return 0
  end
  return opt[1]
end

--Provides: caml_option_fold
function caml_option_fold(none_case, some_f, opt)
  if opt == 0 then
    return none_case
  end
  return some_f(opt[1])
end

--Provides: caml_option_iter
function caml_option_iter(f, opt)
  if opt ~= 0 then
    f(opt[1])
  end
end


--Provides: caml_option_equal
function caml_option_equal(eq, opt1, opt2)
  if opt1 == 0 and opt2 == 0 then
    return true
  end
  if opt1 == 0 or opt2 == 0 then
    return false
  end
  return eq(opt1[1], opt2[1])
end

--Provides: caml_option_compare
function caml_option_compare(cmp, opt1, opt2)
  if opt1 == 0 and opt2 == 0 then
    return 0
  end
  if opt1 == 0 then
    return -1
  end
  if opt2 == 0 then
    return 1
  end
  return cmp(opt1[1], opt2[1])
end


--Provides: caml_option_to_result
function caml_option_to_result(none_error, opt)
  if opt == 0 then
    return {tag = 1, none_error}  -- Error(none_error)
  end
  return {tag = 0, opt[1]}  -- Ok(value)
end

--Provides: caml_option_to_list
function caml_option_to_list(opt)
  if opt == 0 then
    return 0  -- Empty list
  end
  return {tag = 0, opt[1], 0}  -- Single element list
end

--Provides: caml_option_to_seq
function caml_option_to_seq(opt)
  if opt == 0 then
    return function() return 0 end  -- Empty sequence
  end
  local yielded = false
  return function()
    if yielded then
      return 0
    end
    yielded = true
    return {tag = 0, opt[1], function() return 0 end}
  end
end


-- Runtime: obj
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

--- OCaml Object System Support
--
-- This module provides basic support for OCaml objects using Lua metatables.
--
-- OCaml objects are represented as:
-- - [1] = method table (sorted array of {tag, method_function} pairs)
-- - [2] = object ID (unique per object)
-- - [3+] = instance variables
--
-- The method table is sorted by tag for binary search lookup.
-- Metatables are used for method dispatch via __index metamethod.

-- Compatibility: unpack is global in Lua 5.1/LuaJIT, table.unpack in Lua 5.2+
local unpack = table.unpack or unpack

--Provides: caml_oo_last_id
caml_oo_last_id = 0

--Provides: caml_fresh_oo_id
--Requires: caml_oo_last_id
function caml_fresh_oo_id()
  caml_oo_last_id = caml_oo_last_id + 1
  return caml_oo_last_id
end

--Provides: caml_set_oo_id
--Requires: caml_fresh_oo_id
--- Set object ID on a block
-- @param block table Object block
-- @return table The same block with ID set
function caml_set_oo_id(block)
  block[2] = caml_fresh_oo_id()
  return block
end

--Provides: caml_get_public_method
--- Get method from object using binary search on method table
-- @param obj table Object with method table at [1]
-- @param tag number Method tag to look up
-- @return function Method function or nil if not found
function caml_get_public_method(obj, tag)
  local meths = obj[1]
  if not meths then
    return nil
  end

  -- Method table structure:
  -- meths[1] = number of methods
  -- meths[2] = unused
  -- meths[3] = method_1
  -- meths[4] = tag_1
  -- meths[5] = method_2
  -- meths[6] = tag_2
  -- ...

  local num_methods = meths[1]
  if not num_methods or num_methods == 0 then
    return nil
  end

  -- Binary search
  -- Methods are at odd indices: 3, 5, 7, ...
  -- Tags are at even indices: 4, 6, 8, ...
  local li = 3
  local hi = num_methods * 2 + 1

  while li <= hi do
    -- Find middle, ensuring it's an odd index
    local mid = math.floor((li + hi) / 2)
    if mid % 2 == 0 then
      mid = mid - 1
    end

    local mid_tag = meths[mid + 1]

    if mid_tag == tag then
      -- Found it!
      return meths[mid]
    elseif tag < mid_tag then
      -- Search left half
      hi = mid - 2
    else
      -- Search right half
      li = mid + 2
    end
  end

  -- Not found
  return nil
end

--- Create a method table from a list of (tag, method) pairs
-- The list should already be sorted by tag
-- @param methods table Array of {tag, method} pairs, sorted by tag
-- @return table Method table in OCaml format
-- Helper function for testing and object construction
function create_method_table(methods)
  local num_methods = #methods
  local meths = {num_methods, 0}  -- [1] = count, [2] = unused

  for i, pair in ipairs(methods) do
    local tag = pair[1]
    local method = pair[2]
    meths[i * 2 + 1] = method  -- method at odd indices
    meths[i * 2 + 2] = tag      -- tag at even indices
  end

  return meths
end

--- Create an OCaml object
-- @param methods table Method table (from create_method_table)
-- @param instance_vars table Optional array of instance variables
-- @return table Object block
-- Helper function for testing and object construction
function create_object(methods, instance_vars)
  local obj = {
    tag = 0,  -- Objects typically have tag 0
    [1] = methods,
    [2] = caml_fresh_oo_id()
  }

  -- Add instance variables if provided
  if instance_vars then
    for i, v in ipairs(instance_vars) do
      obj[i + 2] = v
    end
  end

  -- Create metatable for method dispatch
  local mt = {
    __index = function(tbl, key)
      -- If key is a number (method tag), look up method
      if type(key) == "number" then
        return caml_get_public_method(tbl, key)
      end
      return nil
    end
  }

  setmetatable(obj, mt)
  return obj
end

--- Call a method on an object
-- @param obj table Object
-- @param tag number Method tag
-- @param args table Array of arguments
-- @return any Result of method call
-- Helper function for testing
function call_method(obj, tag, args)
  local method = caml_get_public_method(obj, tag)
  if not method then
    error("Method not found: tag " .. tag)
  end

  -- Methods receive self as first argument
  local all_args = {obj}
  for i, arg in ipairs(args) do
    all_args[i + 1] = arg
  end

  return method(unpack(all_args))
end

--Provides: caml_obj_raw_field
--- Get object field (instance variable)
-- @param obj table Object
-- @param i number Field index (0-based, excluding method table and ID)
-- @return any Field value
function caml_obj_raw_field(obj, i)
  -- Fields start at index 3 (after method table [1] and ID [2])
  return obj[i + 3]
end

--Provides: caml_obj_set_raw_field
--- Set object field (instance variable)
-- @param obj table Object
-- @param i number Field index (0-based)
-- @param v any New value
function caml_obj_set_raw_field(obj, i, v)
  obj[i + 3] = v
end

--- Create a simple object with methods as a table
-- This is a simpler interface for creating objects when you have
-- methods as a Lua table rather than a sorted method table
-- @param method_map table Map of method_name -> function
-- @param instance_vars table Optional instance variables
-- @return table Object
-- Helper function for testing
function simple_object(method_map, instance_vars)
  -- Convert method map to sorted method table
  -- For simplicity, we'll use string hashing for method tags
  local methods = {}
  for name, func in pairs(method_map) do
    -- Simple hash: sum of byte values
    local tag = 0
    for i = 1, #name do
      tag = tag + string.byte(name, i)
    end
    table.insert(methods, {tag, func})
  end

  -- Sort by tag
  table.sort(methods, function(a, b) return a[1] < b[1] end)

  local method_table = create_method_table(methods)
  return create_object(method_table, instance_vars)
end


-- Runtime: mlBytes
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_bit_and
function caml_bit_and(a, b)
  local result = 0
  local bit_val = 1
  while a > 0 and b > 0 do
    if a % 2 == 1 and b % 2 == 1 then
      result = result + bit_val
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit_val = bit_val * 2
  end
  return result
end

--Provides: caml_bit_or
function caml_bit_or(a, b)
  local result = 0
  local bit_val = 1
  while a > 0 or b > 0 do
    if a % 2 == 1 or b % 2 == 1 then
      result = result + bit_val
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit_val = bit_val * 2
  end
  return result
end

--Provides: caml_bit_lshift
function caml_bit_lshift(a, n)
  return math.floor(a * (2 ^ n))
end

--Provides: caml_bit_rshift
function caml_bit_rshift(a, n)
  return math.floor(a / (2 ^ n))
end

--Provides: caml_bytes_of_string
function caml_bytes_of_string(s)
  local len = #s
  local bytes = { length = len }
  for i = 1, len do
    bytes[i - 1] = string.byte(s, i)
  end
  return bytes
end

--Provides: caml_string_of_bytes
function caml_string_of_bytes(b)
  local len = b.length
  local chars = {}
  for i = 0, len - 1 do
    chars[i + 1] = string.char(b[i] or 0)
  end
  return table.concat(chars)
end

--Provides: caml_create_bytes
function caml_create_bytes(len, fill)
  fill = fill or 0
  local bytes = { length = len }
  for i = 0, len - 1 do
    bytes[i] = fill
  end
  return bytes
end

--Provides: caml_bytes_unsafe_get
function caml_bytes_unsafe_get(b, i)
  if type(b) == "string" then
    return string.byte(b, i + 1)
  else
    return b[i] or 0
  end
end

--Provides: caml_string_unsafe_get
function caml_string_unsafe_get(b, i)
  return caml_bytes_unsafe_get(b, i)
end

--Provides: caml_bytes_unsafe_set
--Requires: caml_bit_and
function caml_bytes_unsafe_set(b, i, c)
  if type(b) == "table" then
    b[i] = caml_bit_and(c, 0xFF)
  else
    error("Cannot set byte in immutable string")
  end
end

--Provides: caml_bytes_get
--Requires: caml_bytes_unsafe_get, caml_ml_bytes_length
function caml_bytes_get(b, i)
  local len = caml_ml_bytes_length(b)
  if i < 0 or i >= len then
    error("index out of bounds")
  end
  return caml_bytes_unsafe_get(b, i)
end

--Provides: caml_string_get
function caml_string_get(b, i)
  return caml_bytes_get(b, i)
end

--Provides: caml_bytes_set
--Requires: caml_bytes_unsafe_set
function caml_bytes_set(b, i, c)
  if type(b) ~= "table" then
    error("Cannot set byte in immutable string")
  end
  if i < 0 or i >= b.length then
    error("index out of bounds")
  end
  caml_bytes_unsafe_set(b, i, c)
end

--Provides: caml_ml_bytes_length
function caml_ml_bytes_length(s)
  if type(s) == "string" then
    return #s
  else
    return s.length
  end
end

--Provides: caml_ml_string_length
function caml_ml_string_length(s)
  return caml_ml_bytes_length(s)
end

--Provides: caml_blit_bytes
--Requires: caml_bytes_unsafe_get
function caml_blit_bytes(src, src_off, dst, dst_off, len)
  if type(dst) ~= "table" then
    error("Destination must be mutable bytes")
  end

  for i = 0, len - 1 do
    dst[dst_off + i] = caml_bytes_unsafe_get(src, src_off + i)
  end
end

--Provides: caml_blit_string
function caml_blit_string(src, src_off, dst, dst_off, len)
  return caml_blit_bytes(src, src_off, dst, dst_off, len)
end

--Provides: caml_fill_bytes
--Requires: caml_bit_and
function caml_fill_bytes(b, off, len, c)
  if type(b) ~= "table" then
    error("Cannot fill immutable string")
  end
  c = caml_bit_and(c, 0xFF)
  for i = 0, len - 1 do
    b[off + i] = c
  end
end

--Provides: caml_bytes_sub
--Requires: caml_create_bytes, caml_bytes_unsafe_get
function caml_bytes_sub(b, off, len)
  local result = caml_create_bytes(len)
  for i = 0, len - 1 do
    result[i] = caml_bytes_unsafe_get(b, off + i)
  end
  return result
end

--Provides: caml_bytes_compare
--Requires: caml_ml_bytes_length, caml_bytes_unsafe_get
function caml_bytes_compare(s1, s2)
  local len1 = caml_ml_bytes_length(s1)
  local len2 = caml_ml_bytes_length(s2)
  local min_len = math.min(len1, len2)

  for i = 0, min_len - 1 do
    local b1 = caml_bytes_unsafe_get(s1, i)
    local b2 = caml_bytes_unsafe_get(s2, i)
    if b1 < b2 then
      return -1
    elseif b1 > b2 then
      return 1
    end
  end

  if len1 < len2 then
    return -1
  elseif len1 > len2 then
    return 1
  else
    return 0
  end
end

--Provides: caml_string_compare
function caml_string_compare(s1, s2)
  return caml_bytes_compare(s1, s2)
end

--Provides: caml_bytes_equal
--Requires: caml_bytes_compare
function caml_bytes_equal(s1, s2)
  return caml_bytes_compare(s1, s2) == 0
end

--Provides: caml_string_equal
function caml_string_equal(s1, s2)
  return caml_bytes_equal(s1, s2)
end

--Provides: caml_bytes_concat
--Requires: caml_ml_bytes_length, caml_create_bytes, caml_blit_bytes
function caml_bytes_concat(sep, list)
  if #list == 0 then
    return caml_create_bytes(0)
  end

  local sep_len = caml_ml_bytes_length(sep)
  local total_len = 0

  for i, item in ipairs(list) do
    total_len = total_len + caml_ml_bytes_length(item)
    if i < #list then
      total_len = total_len + sep_len
    end
  end

  local result = caml_create_bytes(total_len)
  local pos = 0

  for i, item in ipairs(list) do
    local item_len = caml_ml_bytes_length(item)
    caml_blit_bytes(item, 0, result, pos, item_len)
    pos = pos + item_len

    if i < #list then
      caml_blit_bytes(sep, 0, result, pos, sep_len)
      pos = pos + sep_len
    end
  end

  return result
end

--Provides: caml_bytes_uppercase
--Requires: caml_ml_bytes_length, caml_create_bytes, caml_bytes_unsafe_get
function caml_bytes_uppercase(b)
  local len = caml_ml_bytes_length(b)
  local result = caml_create_bytes(len)

  for i = 0, len - 1 do
    local c = caml_bytes_unsafe_get(b, i)
    if c >= 97 and c <= 122 then
      c = c - 32
    end
    result[i] = c
  end

  return result
end

--Provides: caml_bytes_lowercase
--Requires: caml_ml_bytes_length, caml_create_bytes, caml_bytes_unsafe_get
function caml_bytes_lowercase(b)
  local len = caml_ml_bytes_length(b)
  local result = caml_create_bytes(len)

  for i = 0, len - 1 do
    local c = caml_bytes_unsafe_get(b, i)
    if c >= 65 and c <= 90 then
      c = c + 32
    end
    result[i] = c
  end

  return result
end

--Provides: caml_bytes_index
--Requires: caml_ml_bytes_length, caml_bytes_unsafe_get
function caml_bytes_index(haystack, needle)
  local hay_len = caml_ml_bytes_length(haystack)
  local needle_len = caml_ml_bytes_length(needle)

  if needle_len == 0 then
    return 0
  end
  if needle_len > hay_len then
    return -1
  end

  for i = 0, hay_len - needle_len do
    local match = true
    for j = 0, needle_len - 1 do
      if caml_bytes_unsafe_get(haystack, i + j) ~= caml_bytes_unsafe_get(needle, j) then
        match = false
        break
      end
    end
    if match then
      return i
    end
  end

  return -1
end

--Provides: caml_bytes_get16
--Requires: caml_bytes_unsafe_get, caml_bit_or, caml_bit_lshift
function caml_bytes_get16(b, i)
  local b1 = caml_bytes_unsafe_get(b, i)
  local b2 = caml_bytes_unsafe_get(b, i + 1)
  return caml_bit_or(b1, caml_bit_lshift(b2, 8))
end

--Provides: caml_string_get16
function caml_string_get16(b, i)
  return caml_bytes_get16(b, i)
end

--Provides: caml_bytes_get32
--Requires: caml_bytes_unsafe_get, caml_bit_or, caml_bit_lshift
function caml_bytes_get32(b, i)
  local b1 = caml_bytes_unsafe_get(b, i)
  local b2 = caml_bytes_unsafe_get(b, i + 1)
  local b3 = caml_bytes_unsafe_get(b, i + 2)
  local b4 = caml_bytes_unsafe_get(b, i + 3)
  return caml_bit_or(caml_bit_or(caml_bit_or(b1, caml_bit_lshift(b2, 8)), caml_bit_lshift(b3, 16)), caml_bit_lshift(b4, 24))
end

--Provides: caml_string_get32
function caml_string_get32(b, i)
  return caml_bytes_get32(b, i)
end

--Provides: caml_bytes_set16
--Requires: caml_bytes_unsafe_set, caml_bit_and, caml_bit_rshift
function caml_bytes_set16(b, i, v)
  caml_bytes_unsafe_set(b, i, caml_bit_and(v, 0xFF))
  caml_bytes_unsafe_set(b, i + 1, caml_bit_and(caml_bit_rshift(v, 8), 0xFF))
end

--Provides: caml_bytes_set32
--Requires: caml_bytes_unsafe_set, caml_bit_and, caml_bit_rshift
function caml_bytes_set32(b, i, v)
  caml_bytes_unsafe_set(b, i, caml_bit_and(v, 0xFF))
  caml_bytes_unsafe_set(b, i + 1, caml_bit_and(caml_bit_rshift(v, 8), 0xFF))
  caml_bytes_unsafe_set(b, i + 2, caml_bit_and(caml_bit_rshift(v, 16), 0xFF))
  caml_bytes_unsafe_set(b, i + 3, caml_bit_and(caml_bit_rshift(v, 24), 0xFF))
end


-- Runtime: ints
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_int32_xor
--Requires: caml_bit_and
function caml_int32_xor(a, b)
  local result = 0
  local bit_val = 1
  local a_work = a < 0 and (a + 0x100000000) or a
  local b_work = b < 0 and (b + 0x100000000) or b

  while a_work > 0 or b_work > 0 do
    local a_bit = a_work % 2
    local b_bit = b_work % 2
    if a_bit ~= b_bit then
      result = result + bit_val
    end
    a_work = math.floor(a_work / 2)
    b_work = math.floor(b_work / 2)
    bit_val = bit_val * 2
  end

  local n = result % 0x100000000
  if n >= 0x80000000 then
    return n - 0x100000000
  else
    return n
  end
end

--Provides: caml_int32_not
function caml_int32_not(n)
  local unsigned = n < 0 and (n + 0x100000000) or n
  local result = 0
  local bit_val = 1

  for i = 0, 31 do
    if unsigned % 2 == 0 then
      result = result + bit_val
    end
    unsigned = math.floor(unsigned / 2)
    bit_val = bit_val * 2
  end

  if result >= 0x80000000 then
    return result - 0x100000000
  else
    return result
  end
end

--Provides: caml_to_int32
function caml_to_int32(n)
  n = math.floor(n + 0)
  n = n % 0x100000000
  if n < 0 then
    n = n + 0x100000000
  end
  if n >= 0x80000000 then
    return n - 0x100000000
  else
    return n
  end
end

--Provides: caml_int32_add
--Requires: caml_to_int32
function caml_int32_add(a, b)
  return caml_to_int32(a + b)
end

--Provides: caml_int32_sub
--Requires: caml_to_int32
function caml_int32_sub(a, b)
  return caml_to_int32(a - b)
end

--Provides: caml_int32_mul
--Requires: caml_to_int32
function caml_int32_mul(a, b)
  return caml_to_int32(a * b)
end

--Provides: caml_int32_div
--Requires: caml_to_int32
function caml_int32_div(a, b)
  if b == 0 then
    error("Division by zero")
  end
  local result = a / b
  return caml_to_int32(result >= 0 and math.floor(result) or math.ceil(result))
end

--Provides: caml_int32_mod
--Requires: caml_to_int32
function caml_int32_mod(a, b)
  if b == 0 then
    error("Division by zero")
  end
  local r = a % b
  if (a < 0) ~= (b < 0) and r ~= 0 then
    r = r - b
  end
  return caml_to_int32(r)
end

--Provides: caml_int32_neg
--Requires: caml_to_int32
function caml_int32_neg(n)
  return caml_to_int32(-n)
end

--Provides: caml_int32_and
--Requires: caml_to_int32, caml_bit_and
function caml_int32_and(a, b)
  local ua = a < 0 and (a + 0x100000000) or a
  local ub = b < 0 and (b + 0x100000000) or b
  return caml_to_int32(caml_bit_and(ua, ub))
end

--Provides: caml_int32_or
--Requires: caml_to_int32, caml_bit_or
function caml_int32_or(a, b)
  local ua = a < 0 and (a + 0x100000000) or a
  local ub = b < 0 and (b + 0x100000000) or b
  return caml_to_int32(caml_bit_or(ua, ub))
end

--Provides: caml_int32_shift_left
--Requires: caml_to_int32, caml_bit_lshift
function caml_int32_shift_left(n, count)
  count = count % 32
  local unsigned = n < 0 and (n + 0x100000000) or n
  return caml_to_int32(caml_bit_lshift(unsigned, count))
end

--Provides: caml_int32_shift_right_unsigned
--Requires: caml_to_int32, caml_bit_rshift
function caml_int32_shift_right_unsigned(n, count)
  count = count % 32
  local unsigned = n < 0 and (n + 0x100000000) or n
  return caml_to_int32(caml_bit_rshift(unsigned, count))
end

--Provides: caml_int32_shift_right
--Requires: caml_to_int32
function caml_int32_shift_right(n, count)
  count = count % 32
  if count == 0 then
    return n
  end

  local sign = n < 0 and 1 or 0
  local unsigned = n < 0 and (n + 0x100000000) or n

  local result = math.floor(unsigned / (2 ^ count))

  if sign == 1 then
    local sign_extend = 0xFFFFFFFF - math.floor((2 ^ (32 - count)) - 1)
    result = result + sign_extend
  end

  return caml_to_int32(result)
end

--Provides: caml_int32_compare
function caml_int32_compare(a, b)
  if a < b then
    return -1
  elseif a > b then
    return 1
  else
    return 0
  end
end

--Provides: caml_int32_unsigned_compare
function caml_int32_unsigned_compare(a, b)
  local ua = a < 0 and (a + 0x100000000) or a
  local ub = b < 0 and (b + 0x100000000) or b

  if ua < ub then
    return -1
  elseif ua > ub then
    return 1
  else
    return 0
  end
end

--Provides: caml_int32_bswap
--Requires: caml_to_int32, caml_bit_and, caml_bit_lshift, caml_bit_rshift, caml_bit_or
function caml_int32_bswap(n)
  n = caml_to_int32(n)
  local unsigned = n < 0 and (n + 0x100000000) or n
  local b0 = caml_bit_lshift(caml_bit_and(unsigned, 0x000000FF), 24)
  local b1 = caml_bit_lshift(caml_bit_and(unsigned, 0x0000FF00), 8)
  local b2 = caml_bit_rshift(caml_bit_and(unsigned, 0x00FF0000), 8)
  local b3 = caml_bit_rshift(caml_bit_and(unsigned, 0xFF000000), 24)
  return caml_to_int32(caml_bit_or(caml_bit_or(caml_bit_or(b0, b1), b2), b3))
end

--Provides: caml_int32_clz
--Requires: caml_bit_and
function caml_int32_clz(n)
  if n == 0 then
    return 32
  end

  local unsigned = n < 0 and (n + 0x100000000) or n

  local count = 0
  local mask = 0x80000000

  for i = 0, 31 do
    if caml_bit_and(unsigned, mask) ~= 0 then
      break
    end
    count = count + 1
    mask = math.floor(mask / 2)
  end

  return count
end

--Provides: caml_int32_ctz
--Requires: caml_bit_and
function caml_int32_ctz(n)
  if n == 0 then
    return 32
  end

  local unsigned = n < 0 and (n + 0x100000000) or n
  local count = 0
  local mask = 1

  for i = 0, 31 do
    if caml_bit_and(unsigned, mask) ~= 0 then
      break
    end
    count = count + 1
    mask = mask * 2
  end

  return count
end

--Provides: caml_int32_popcnt
--Requires: caml_bit_and, caml_bit_rshift
function caml_int32_popcnt(n)
  local unsigned = n < 0 and (n + 0x100000000) or n

  local count = 0
  for i = 0, 31 do
    if caml_bit_and(unsigned, 1) ~= 0 then
      count = count + 1
    end
    unsigned = caml_bit_rshift(unsigned, 1)
  end

  return count
end


-- Runtime: marshal_io
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- Marshal: Binary I/O helper functions
-- Provides low-level binary read/write operations for marshal format

--Provides: caml_marshal_buffer_create
function caml_marshal_buffer_create()
  return {
    bytes = {},
    length = 0
  }
end

--Provides: caml_marshal_buffer_write8u
function caml_marshal_buffer_write8u(buf, byte)
  buf.length = buf.length + 1
  buf.bytes[buf.length] = byte
end

--Provides: caml_marshal_buffer_write16u
function caml_marshal_buffer_write16u(buf, value)
  -- Write 16-bit unsigned big-endian
  -- Big-endian: most significant byte first
  local hi = math.floor(value / 256) % 256  -- High byte
  local lo = value % 256                     -- Low byte

  buf.length = buf.length + 1
  buf.bytes[buf.length] = hi
  buf.length = buf.length + 1
  buf.bytes[buf.length] = lo
end

--Provides: caml_marshal_buffer_write32u
function caml_marshal_buffer_write32u(buf, value)
  -- Write 32-bit unsigned big-endian
  -- Big-endian: most significant byte first
  local b3 = math.floor(value / 16777216) % 256  -- Byte 3 (highest)
  local b2 = math.floor(value / 65536) % 256     -- Byte 2
  local b1 = math.floor(value / 256) % 256       -- Byte 1
  local b0 = value % 256                          -- Byte 0 (lowest)

  buf.length = buf.length + 1
  buf.bytes[buf.length] = b3
  buf.length = buf.length + 1
  buf.bytes[buf.length] = b2
  buf.length = buf.length + 1
  buf.bytes[buf.length] = b1
  buf.length = buf.length + 1
  buf.bytes[buf.length] = b0
end

--Provides: caml_marshal_buffer_write_bytes
function caml_marshal_buffer_write_bytes(buf, str)
  for i = 1, #str do
    buf.length = buf.length + 1
    buf.bytes[buf.length] = string.byte(str, i)
  end
end

--Provides: caml_marshal_buffer_to_string
function caml_marshal_buffer_to_string(buf)
  -- Convert byte array to string
  -- Use table.concat for efficiency with large buffers
  local chars = {}
  for i = 1, buf.length do
    chars[i] = string.char(buf.bytes[i])
  end
  return table.concat(chars)
end

--Provides: caml_marshal_read8u
function caml_marshal_read8u(str, offset)
  -- Read 8-bit unsigned from string at offset (0-indexed)
  -- Returns: byte value
  if offset + 1 > #str then
    error(string.format("caml_marshal_read8u: data truncated (need %d bytes, got %d bytes)", offset + 1, #str))
  end
  return string.byte(str, offset + 1)
end

--Provides: caml_marshal_read16u
function caml_marshal_read16u(str, offset)
  -- Read 16-bit unsigned big-endian from string at offset (0-indexed)
  -- Returns: 16-bit value
  if offset + 2 > #str then
    error(string.format("caml_marshal_read16u: data truncated (need %d bytes, got %d bytes)", offset + 2, #str))
  end
  local hi = string.byte(str, offset + 1)      -- High byte
  local lo = string.byte(str, offset + 2)      -- Low byte

  -- Combine bytes: hi * 256 + lo
  return hi * 256 + lo
end

--Provides: caml_marshal_read32u
function caml_marshal_read32u(str, offset)
  -- Read 32-bit unsigned big-endian from string at offset (0-indexed)
  -- Returns: 32-bit value
  if offset + 4 > #str then
    error(string.format("caml_marshal_read32u: data truncated (need %d bytes, got %d bytes)", offset + 4, #str))
  end
  local b3 = string.byte(str, offset + 1)  -- Byte 3 (highest)
  local b2 = string.byte(str, offset + 2)  -- Byte 2
  local b1 = string.byte(str, offset + 3)  -- Byte 1
  local b0 = string.byte(str, offset + 4)  -- Byte 0 (lowest)

  -- Combine bytes: b3 * 2^24 + b2 * 2^16 + b1 * 2^8 + b0
  return b3 * 16777216 + b2 * 65536 + b1 * 256 + b0
end

--Provides: caml_marshal_read16s
function caml_marshal_read16s(str, offset)
  -- Read 16-bit signed big-endian from string at offset (0-indexed)
  -- Returns: signed 16-bit value
  local value = caml_marshal_read16u(str, offset)

  -- Convert unsigned to signed: if >= 2^15, subtract 2^16
  if value >= 32768 then  -- 2^15
    value = value - 65536  -- 2^16
  end

  return value
end

--Provides: caml_marshal_read32s
function caml_marshal_read32s(str, offset)
  -- Read 32-bit signed big-endian from string at offset (0-indexed)
  -- Returns: signed 32-bit value
  local value = caml_marshal_read32u(str, offset)

  -- Convert unsigned to signed: if >= 2^31, subtract 2^32
  if value >= 2147483648 then  -- 2^31
    value = value - 4294967296  -- 2^32
  end

  return value
end

--Provides: caml_marshal_read_bytes
function caml_marshal_read_bytes(str, offset, len)
  -- Read len bytes from string at offset (0-indexed)
  -- Returns: substring
  return string.sub(str, offset + 1, offset + len)
end

--Provides: caml_marshal_write_double_little
function caml_marshal_write_double_little(buf, value)
  -- Write 64-bit IEEE 754 double little-endian (Lua 5.1 compatible)
  -- Manual implementation with fallback

  local bytes_to_write = {}

  -- Handle special cases first
  if value ~= value then
    -- NaN: exponent all 1s, mantissa non-zero
    -- Standard quiet NaN: 0x7FF8000000000000 (little-endian: 00 00 00 00 00 00 F8 7F)
    bytes_to_write = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x7F}
  elseif value == math.huge then
    -- +Infinity: sign=0, exponent all 1s, mantissa=0
    -- 0x7FF0000000000000 (little-endian: 00 00 00 00 00 00 F0 7F)
    bytes_to_write = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x7F}
  elseif value == -math.huge then
    -- -Infinity: sign=1, exponent all 1s, mantissa=0
    -- 0xFFF0000000000000 (little-endian: 00 00 00 00 00 00 F0 FF)
    bytes_to_write = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF}
  elseif value == 0 then
    -- +0.0
    bytes_to_write = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  else
    -- Use string.pack if available (Lua 5.3+), otherwise use frexp decomposition
    if string.pack then
      local packed = string.pack("<d", value)
      for i = 1, 8 do
        bytes_to_write[i] = string.byte(packed, i)
      end
    else
      -- Fallback: Use math.frexp to decompose the number
      -- IEEE 754: sign (1 bit) | exponent (11 bits, biased by 1023) | mantissa (52 bits)
      local sign = 0
      if value < 0 then
        sign = 1
        value = -value
      end

      -- math.frexp returns mantissa in [0.5, 1) and exponent
      -- We need mantissa in [1, 2) for IEEE 754
      local mantissa, exp = math.frexp(value)
      mantissa = mantissa * 2  -- Convert [0.5, 1) to [1, 2)
      exp = exp - 1

      -- IEEE 754 exponent is biased by 1023
      local biased_exp = exp + 1023

      -- Mantissa in IEEE 754 is 52 bits, with implicit leading 1
      -- mantissa is in [1, 2), so we store (mantissa - 1) * 2^52
      mantissa = (mantissa - 1) * 4503599627370496  -- 2^52

      -- Extract 52-bit mantissa into bytes (little-endian)
      local m0 = mantissa % 256
      mantissa = math.floor(mantissa / 256)
      local m1 = mantissa % 256
      mantissa = math.floor(mantissa / 256)
      local m2 = mantissa % 256
      mantissa = math.floor(mantissa / 256)
      local m3 = mantissa % 256
      mantissa = math.floor(mantissa / 256)
      local m4 = mantissa % 256
      mantissa = math.floor(mantissa / 256)
      local m5 = mantissa % 256
      mantissa = math.floor(mantissa / 256)
      local m6 = mantissa % 16  -- Only 4 bits

      -- Combine exponent and top mantissa bits
      -- Byte 7 (index 7): low 4 bits of exponent + high 4 bits of mantissa (m6)
      -- Byte 8 (index 8): high 7 bits of exponent + sign bit
      local exp_low = biased_exp % 16  -- Low 4 bits of exponent
      local exp_high = math.floor(biased_exp / 16)  -- High 7 bits of exponent

      bytes_to_write[1] = m0
      bytes_to_write[2] = m1
      bytes_to_write[3] = m2
      bytes_to_write[4] = m3
      bytes_to_write[5] = m4
      bytes_to_write[6] = m5
      bytes_to_write[7] = m6 + exp_low * 16
      bytes_to_write[8] = exp_high + sign * 128
    end
  end

  -- Write all 8 bytes to buffer
  for i = 1, 8 do
    buf.length = buf.length + 1
    buf.bytes[buf.length] = bytes_to_write[i]
  end
end

--Provides: caml_marshal_read_double_little
function caml_marshal_read_double_little(str, offset)
  -- Read 64-bit IEEE 754 double little-endian (Lua 5.1 compatible)

  -- Use string.unpack if available (Lua 5.3+)
  if string.unpack then
    local bytes = string.sub(str, offset + 1, offset + 8)
    return string.unpack("<d", bytes)
  end

  -- Fallback: Manual IEEE 754 decoding for Lua 5.1
  -- Read 8 bytes
  local b1 = string.byte(str, offset + 1)
  local b2 = string.byte(str, offset + 2)
  local b3 = string.byte(str, offset + 3)
  local b4 = string.byte(str, offset + 4)
  local b5 = string.byte(str, offset + 5)
  local b6 = string.byte(str, offset + 6)
  local b7 = string.byte(str, offset + 7)
  local b8 = string.byte(str, offset + 8)

  -- Extract sign, exponent, mantissa from little-endian format
  -- Byte 8 (b8): sign (1 bit) + high 7 bits of exponent
  -- Byte 7 (b7): low 4 bits of exponent + high 4 bits of mantissa
  local sign = math.floor(b8 / 128)  -- Bit 63
  local exp_high = b8 % 128  -- Bits 56-62
  local exp_low = math.floor(b7 / 16)  -- Bits 52-55
  local biased_exp = exp_high * 16 + exp_low

  -- Mantissa: 52 bits across bytes 1-7
  local m6 = b7 % 16  -- Bits 48-51
  local mantissa = m6 * 281474976710656 + b6 * 1099511627776 + b5 * 4294967296 +
                   b4 * 16777216 + b3 * 65536 + b2 * 256 + b1

  -- Check for special cases
  if biased_exp == 0x7FF then
    -- Exponent all 1s: infinity or NaN
    if mantissa == 0 then
      return sign == 1 and -math.huge or math.huge
    else
      return 0/0  -- NaN
    end
  elseif biased_exp == 0 then
    -- Denormalized number or zero
    if mantissa == 0 then
      return 0.0  -- Positive or negative zero (treat as 0.0)
    else
      -- Denormalized: 2^(-1022) * (0 + mantissa/2^52)
      local frac = mantissa / 4503599627370496  -- 2^52
      local value = frac * math.pow(2, -1022)
      return sign == 1 and -value or value
    end
  end

  -- Normal number: (-1)^sign * 2^(exp-1023) * (1 + mantissa/2^52)
  local exp = biased_exp - 1023
  local frac = 1.0 + mantissa / 4503599627370496  -- 2^52
  local value = frac * math.pow(2, exp)

  return sign == 1 and -value or value
end


-- Runtime: marshal_header
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- Marshal: Header read/write functions
-- Handles 20-byte OCaml marshal format headers

--Provides: caml_marshal_header_write
--Requires: caml_marshal_buffer_write32u
function caml_marshal_header_write(buf, data_len, num_objects, size_32, size_64)
  -- Write 20-byte marshal header
  -- Format:
  --   Magic number (4 bytes): 0x8495A6BE (MAGIC_SMALL) or 0x8495A6BF (MAGIC_BIG)
  --   Data length (4 bytes): length of marshaled data excluding header
  --   Number of objects (4 bytes): for sharing support
  --   Size 32-bit (4 bytes): size when read on 32-bit platform
  --   Size 64-bit (4 bytes): size when read on 64-bit platform

  -- Magic number: 0x8495A6BE for small (32-bit safe)
  caml_marshal_buffer_write32u(buf, 0x8495A6BE)  -- MAGIC_SMALL

  -- Data length (excluding header)
  caml_marshal_buffer_write32u(buf, data_len)

  -- Number of objects (for sharing)
  caml_marshal_buffer_write32u(buf, num_objects)

  -- Size on 32-bit platform
  caml_marshal_buffer_write32u(buf, size_32)

  -- Size on 64-bit platform
  caml_marshal_buffer_write32u(buf, size_64)
end

--Provides: caml_marshal_header_read
--Requires: caml_marshal_read32u
function caml_marshal_header_read(str, offset)
  -- Read and validate 20-byte marshal header
  -- Returns: {magic, data_len, num_objects, size_32, size_64} or nil on error

  -- Check minimum length
  local available = #str - offset
  if available < 20 then
    error(string.format("caml_marshal_header_read: data too short (need 20 bytes, got %d bytes)", available))
  end

  -- Read magic number (4 bytes)
  local magic = caml_marshal_read32u(str, offset)

  -- Validate magic number
  -- 0x8495A6BE = MAGIC_SMALL (32-bit safe)
  -- 0x8495A6BF = MAGIC_BIG (64-bit values)
  if magic ~= 0x8495A6BE and magic ~= 0x8495A6BF then
    error(string.format("caml_marshal_header_read: invalid header magic 0x%08X", magic))
  end

  -- Read data length (4 bytes)
  local data_len = caml_marshal_read32u(str, offset + 4)

  -- Read number of objects (4 bytes)
  local num_objects = caml_marshal_read32u(str, offset + 8)

  -- Read size on 32-bit platform (4 bytes)
  local size_32 = caml_marshal_read32u(str, offset + 12)

  -- Read size on 64-bit platform (4 bytes)
  local size_64 = caml_marshal_read32u(str, offset + 16)

  return {
    magic = magic,
    data_len = data_len,
    num_objects = num_objects,
    size_32 = size_32,
    size_64 = size_64
  }
end

--Provides: caml_marshal_header_size
function caml_marshal_header_size()
  -- Return the size of the marshal header in bytes
  return 20
end


-- Runtime: marshal
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- Marshal: OCaml Marshal format
-- Implements OCaml binary serialization format

-- Integer marshaling functions

--Provides: caml_marshal_write_int
--Requires: caml_marshal_buffer_write8u, caml_marshal_buffer_write16u, caml_marshal_buffer_write32u
function caml_marshal_write_int(buf, value)
  -- Encode integer with optimal format
  -- Small int (0-63): single byte 0x40-0x7F
  -- INT8 (-128 to 127 excluding 0-63): 0x00 + signed byte
  -- INT16 (-32768 to 32767 excluding INT8): 0x01 + signed 16-bit big-endian
  -- INT32 (else): 0x02 + signed 32-bit big-endian

  -- Check for small int (0-63)
  if value >= 0 and value <= 63 then
    -- Small int: 0x40 + value (0x40-0x7F)
    caml_marshal_buffer_write8u(buf, 0x40 + value)
    return
  end

  -- Check for INT8 range (-128 to 127)
  if value >= -128 and value <= 127 then
    -- CODE_INT8 (0x00) + signed byte
    caml_marshal_buffer_write8u(buf, 0x00)
    -- Convert signed to unsigned byte
    local byte_val = value
    if byte_val < 0 then
      byte_val = byte_val + 256
    end
    caml_marshal_buffer_write8u(buf, byte_val)
    return
  end

  -- Check for INT16 range (-32768 to 32767)
  if value >= -32768 and value <= 32767 then
    -- CODE_INT16 (0x01) + signed 16-bit big-endian
    caml_marshal_buffer_write8u(buf, 0x01)
    -- Convert signed to unsigned 16-bit
    local word_val = value
    if word_val < 0 then
      word_val = word_val + 65536
    end
    caml_marshal_buffer_write16u(buf, word_val)
    return
  end

  -- INT32: CODE_INT32 (0x02) + signed 32-bit big-endian
  caml_marshal_buffer_write8u(buf, 0x02)
  -- Convert signed to unsigned 32-bit
  local int_val = value
  if int_val < 0 then
    int_val = int_val + 4294967296
  end
  caml_marshal_buffer_write32u(buf, int_val)
end

--Provides: caml_marshal_read_int
--Requires: caml_marshal_read8u, caml_marshal_read16u, caml_marshal_read32u
function caml_marshal_read_int(str, offset)
  -- Decode integer and return {value, bytes_read}

  -- Read code byte
  local code = caml_marshal_read8u(str, offset)

  -- Small int (0x40-0x7F): value = code - 0x40
  if code >= 0x40 and code <= 0x7F then
    return {
      value = code - 0x40,
      bytes_read = 1
    }
  end

  -- CODE_INT8 (0x00): read signed byte
  if code == 0x00 then
    local byte_val = caml_marshal_read8u(str, offset + 1)
    -- Convert unsigned to signed byte
    local value = byte_val
    if value >= 128 then
      value = value - 256
    end
    return {
      value = value,
      bytes_read = 2
    }
  end

  -- CODE_INT16 (0x01): read signed 16-bit big-endian
  if code == 0x01 then
    local word_val = caml_marshal_read16u(str, offset + 1)
    -- Convert unsigned to signed 16-bit
    local value = word_val
    if value >= 32768 then
      value = value - 65536
    end
    return {
      value = value,
      bytes_read = 3
    }
  end

  -- CODE_INT32 (0x02): read signed 32-bit big-endian
  if code == 0x02 then
    local int_val = caml_marshal_read32u(str, offset + 1)
    -- Convert unsigned to signed 32-bit
    local value = int_val
    if value >= 2147483648 then
      value = value - 4294967296
    end
    return {
      value = value,
      bytes_read = 5
    }
  end

  error(string.format("caml_marshal_read_int: unknown code 0x%02X at offset %d", code, offset))
end

-- String marshaling functions

--Provides: caml_marshal_write_string
--Requires: caml_marshal_buffer_write8u, caml_marshal_buffer_write32u, caml_marshal_buffer_write_bytes
function caml_marshal_write_string(buf, str)
  -- Encode string with optimal format
  -- Small string (0-31 bytes): single byte 0x20-0x3F (0x20 + length) + bytes
  -- STRING8 (32-255 bytes): 0x09 + length byte + bytes
  -- STRING32 (256+ bytes): 0x0A + length (4 bytes big-endian) + bytes

  local len = #str

  -- Check for small string (0-31 bytes)
  if len <= 31 then
    -- Small string: 0x20 + length (0x20-0x3F)
    caml_marshal_buffer_write8u(buf, 0x20 + len)
    caml_marshal_buffer_write_bytes(buf, str)
    return
  end

  -- Check for STRING8 range (32-255 bytes)
  if len <= 255 then
    -- CODE_STRING8 (0x09) + length byte + bytes
    caml_marshal_buffer_write8u(buf, 0x09)
    caml_marshal_buffer_write8u(buf, len)
    caml_marshal_buffer_write_bytes(buf, str)
    return
  end

  -- STRING32: CODE_STRING32 (0x0A) + length (4 bytes big-endian) + bytes
  caml_marshal_buffer_write8u(buf, 0x0A)
  caml_marshal_buffer_write32u(buf, len)
  caml_marshal_buffer_write_bytes(buf, str)
end

--Provides: caml_marshal_read_string
--Requires: caml_marshal_read8u, caml_marshal_read32u, caml_marshal_read_bytes
function caml_marshal_read_string(str, offset)
  -- Decode string and return {value, bytes_read}

  -- Read code byte
  local code = caml_marshal_read8u(str, offset)

  -- Small string (0x20-0x3F): length = code - 0x20
  if code >= 0x20 and code <= 0x3F then
    local len = code - 0x20
    -- Validate sufficient data
    local needed = offset + 1 + len
    if #str < needed then
      error(string.format("caml_marshal_read_string: data truncated (need %d bytes, got %d bytes)", needed, #str))
    end
    local value = caml_marshal_read_bytes(str, offset + 1, len)
    return {
      value = value,
      bytes_read = 1 + len
    }
  end

  -- CODE_STRING8 (0x09): read length byte + bytes
  if code == 0x09 then
    local len = caml_marshal_read8u(str, offset + 1)
    -- Validate sufficient data
    local needed = offset + 2 + len
    if #str < needed then
      error(string.format("caml_marshal_read_string: data truncated (need %d bytes, got %d bytes)", needed, #str))
    end
    local value = caml_marshal_read_bytes(str, offset + 2, len)
    return {
      value = value,
      bytes_read = 2 + len
    }
  end

  -- CODE_STRING32 (0x0A): read 4-byte length + bytes
  if code == 0x0A then
    local len = caml_marshal_read32u(str, offset + 1)
    -- Validate sufficient data
    local needed = offset + 5 + len
    if #str < needed then
      error(string.format("caml_marshal_read_string: data truncated (need %d bytes, got %d bytes)", needed, #str))
    end
    local value = caml_marshal_read_bytes(str, offset + 5, len)
    return {
      value = value,
      bytes_read = 5 + len
    }
  end

  error(string.format("caml_marshal_read_string: unknown code 0x%02X at offset %d", code, offset))
end

-- Block marshaling functions

--Provides: caml_marshal_write_block
--Requires: caml_marshal_buffer_write8u, caml_marshal_buffer_write32u
function caml_marshal_write_block(buf, block, write_value_fn)
  -- Encode block with fields
  -- Small block (tag 0-15, size 0-7): single byte 0x80 + (tag | (size << 4))
  -- BLOCK32 (else): 0x08 + header (4 bytes: (size << 10) | tag big-endian) + fields
  -- Block format: {tag = N, size = M, [1] = field1, [2] = field2, ...}

  local tag = block.tag or 0
  local size = block.size or #block

  -- Check for small block (tag 0-15, size 0-7)
  if tag >= 0 and tag <= 15 and size >= 0 and size <= 7 then
    -- Small block: 0x80 + (tag | (size << 4))
    -- Lua 5.1 compatible: use arithmetic instead of bitwise operators
    local byte = 0x80 + tag + (size * 16)  -- size << 4 = size * 16
    caml_marshal_buffer_write8u(buf, byte)
  else
    -- BLOCK32: 0x08 + header (4 bytes: (size << 10) | tag)
    caml_marshal_buffer_write8u(buf, 0x08)  -- CODE_BLOCK32
    -- Header: (size << 10) | tag
    -- Lua 5.1 compatible: size * 1024 + tag
    local header = size * 1024 + tag  -- size << 10 = size * 1024
    caml_marshal_buffer_write32u(buf, header)
  end

  -- Write fields recursively using provided write_value_fn
  for i = 1, size do
    write_value_fn(buf, block[i])
  end
end

--Provides: caml_marshal_read_block
--Requires: caml_marshal_read8u, caml_marshal_read32u
function caml_marshal_read_block(str, offset, read_value_fn)
  -- Decode block and return {value, bytes_read}
  -- Block format: {tag = N, size = M, [1] = field1, [2] = field2, ...}

  -- Read code byte
  local code = caml_marshal_read8u(str, offset)
  local bytes_consumed = 1
  local tag, size

  -- Small block (0x80-0xFF): extract tag and size from single byte
  if code >= 0x80 and code <= 0xFF then
    -- Small block: code = 0x80 + (tag | (size << 4))
    local val = code - 0x80
    -- Extract tag and size using Lua 5.1 compatible arithmetic
    tag = val % 16  -- val & 0x0F
    size = math.floor(val / 16)  -- (val >> 4)

  -- CODE_BLOCK32 (0x08): read 4-byte header
  elseif code == 0x08 then
    local header = caml_marshal_read32u(str, offset + 1)
    bytes_consumed = bytes_consumed + 4
    -- Extract tag and size: header = (size << 10) | tag
    tag = header % 1024  -- header & 0x3FF
    size = math.floor(header / 1024)  -- header >> 10
  else
    error(string.format("caml_marshal_read_block: unknown code 0x%02X at offset %d", code, offset))
  end

  -- Create block with tag and size
  local block = {
    tag = tag,
    size = size
  }

  -- Read fields recursively using provided read_value_fn
  local field_offset = offset + bytes_consumed
  for i = 1, size do
    local result = read_value_fn(str, field_offset)
    block[i] = result.value
    field_offset = field_offset + result.bytes_read
    bytes_consumed = bytes_consumed + result.bytes_read
  end

  return {
    value = block,
    bytes_read = bytes_consumed
  }
end

-- Double/float marshaling functions

--Provides: caml_marshal_write_double
--Requires: caml_marshal_buffer_write8u, caml_marshal_write_double_little
function caml_marshal_write_double(buf, value)
  -- Encode double with IEEE 754 little-endian format
  -- CODE_DOUBLE_LITTLE (0x0C): 1 byte code + 8 bytes IEEE 754 little-endian
  -- Uses caml_marshal_write_double_little (Lua 5.1 compatible)

  -- CODE_DOUBLE_LITTLE (0x0C)
  caml_marshal_buffer_write8u(buf, 0x0C)

  -- Write double using marshal_io function (handles Lua 5.1 fallback)
  caml_marshal_write_double_little(buf, value)
end

--Provides: caml_marshal_read_double
--Requires: caml_marshal_read8u, caml_marshal_read_double_little
function caml_marshal_read_double(str, offset)
  -- Decode double and return {value, bytes_read}
  -- CODE_DOUBLE_LITTLE (0x0C): 1 byte code + 8 bytes IEEE 754 little-endian
  -- Uses caml_marshal_read_double_little (Lua 5.1 compatible)

  -- Read code byte
  local code = caml_marshal_read8u(str, offset)

  -- CODE_DOUBLE_LITTLE (0x0C)
  if code == 0x0C then
    -- Validate sufficient data (8 bytes for double)
    local needed = offset + 1 + 8
    if #str < needed then
      error(string.format("caml_marshal_read_double: data truncated (need %d bytes, got %d bytes)", needed, #str))
    end

    -- Read double using marshal_io function (handles Lua 5.1 fallback)
    local value = caml_marshal_read_double_little(str, offset + 1)

    return {
      value = value,
      bytes_read = 9  -- 1 code + 8 data
    }
  end

  error(string.format("caml_marshal_read_double: unknown code 0x%02X at offset %d", code, offset))
end

--Provides: caml_marshal_write_float_array
--Requires: caml_marshal_buffer_write8u, caml_marshal_buffer_write32u, caml_marshal_write_double_little
function caml_marshal_write_float_array(buf, arr)
  -- Encode float array (OCaml block with tag 254)
  -- Float array format in OCaml Marshal:
  -- DOUBLE_ARRAY8_LITTLE (0x0E): code + length byte + doubles (if length < 256)
  -- DOUBLE_ARRAY32_LITTLE (0x07): code + length (4 bytes) + doubles (if length >= 256)
  -- Array should be Lua table: {[1] = v1, [2] = v2, ...} with length in arr.size or #arr
  -- Uses caml_marshal_write_double_little (Lua 5.1 compatible)

  -- Get array length
  local len = arr.size or #arr

  -- Check for DOUBLE_ARRAY8_LITTLE range (length < 256)
  if len < 256 then
    -- DOUBLE_ARRAY8_LITTLE (0x0E) + length byte + doubles
    caml_marshal_buffer_write8u(buf, 0x0E)
    caml_marshal_buffer_write8u(buf, len)
  else
    -- DOUBLE_ARRAY32_LITTLE (0x07) + length (4 bytes) + doubles
    caml_marshal_buffer_write8u(buf, 0x07)
    caml_marshal_buffer_write32u(buf, len)
  end

  -- Write each double in little-endian format using marshal_io function
  for i = 1, len do
    local value = arr[i]
    if type(value) ~= "number" then
      error(string.format("caml_marshal_write_float_array: array element %d is not a number", i))
    end
    caml_marshal_write_double_little(buf, value)
  end
end

--Provides: caml_marshal_read_float_array
--Requires: caml_marshal_read8u, caml_marshal_read32u, caml_marshal_read_double_little
function caml_marshal_read_float_array(str, offset)
  -- Decode float array and return {value, bytes_read}
  -- Float array value is Lua table: {size = N, [1] = v1, [2] = v2, ...}
  -- Uses caml_marshal_read_double_little (Lua 5.1 compatible)

  -- Read code byte
  local code = caml_marshal_read8u(str, offset)
  local bytes_consumed = 1
  local len

  -- DOUBLE_ARRAY8_LITTLE (0x0E): read length byte
  if code == 0x0E then
    len = caml_marshal_read8u(str, offset + 1)
    bytes_consumed = bytes_consumed + 1

  -- DOUBLE_ARRAY32_LITTLE (0x07): read 4-byte length
  elseif code == 0x07 then
    len = caml_marshal_read32u(str, offset + 1)
    bytes_consumed = bytes_consumed + 4

  else
    error(string.format("caml_marshal_read_float_array: unknown code 0x%02X at offset %d", code, offset))
  end

  -- Validate sufficient data (8 bytes per double)
  local data_size = len * 8
  local needed = offset + bytes_consumed + data_size
  if #str < needed then
    error(string.format("caml_marshal_read_float_array: data truncated (need %d bytes, got %d bytes)", needed, #str))
  end

  -- Create values array
  local values = {}

  -- Read each double using marshal_io function
  local data_offset = offset + bytes_consumed
  for i = 1, len do
    local value = caml_marshal_read_double_little(str, data_offset)
    values[i] = value
    data_offset = data_offset + 8
    bytes_consumed = bytes_consumed + 8
  end

  -- Return float array with both formats for compatibility:
  -- - size field for test_marshal_double.lua compatibility
  -- - tag=254 and values for test_io_marshal.lua compatibility
  -- - numeric indices [1], [2], ... for direct access
  local arr = {
    tag = 254,
    size = len,
    values = values
  }
  for i = 1, len do
    arr[i] = values[i]
  end

  return {
    value = arr,
    bytes_read = bytes_consumed
  }
end

-- Core value marshaling functions

--Provides: caml_marshal_write_value
--Requires: caml_marshal_write_int, caml_marshal_write_double, caml_marshal_write_string, caml_marshal_write_block, caml_marshal_write_float_array, caml_marshal_buffer_write8u, caml_marshal_buffer_write32u
function caml_marshal_write_value(buf, value, seen, object_table, next_id)
  -- Main marshaling dispatch function with cycle detection and object sharing
  -- Dispatch based on Lua type: number → int/double, string → string, table → block/float_array
  -- Recursive marshaling for block fields
  -- seen: table tracking visited tables to detect cycles (optional, created if nil)
  -- object_table: table mapping table → object_id for sharing (optional, created if nil)
  -- next_id: table with {value = N} for next object ID (optional, created if nil)

  -- Initialize tables on first call
  seen = seen or {}
  object_table = object_table or {}
  next_id = next_id or {value = 1}

  local value_type = type(value)

  if value_type == "number" then
    -- Number: try integer first, fall back to double
    -- Integer if in int32 range and no fractional part
    if value >= -2147483648 and value <= 2147483647 and value == math.floor(value) then
      caml_marshal_write_int(buf, value)
    else
      caml_marshal_write_double(buf, value)
    end

  elseif value_type == "string" then
    -- String
    caml_marshal_write_string(buf, value)

  elseif value_type == "table" then
    -- Object sharing: check if this table already has an ID assigned
    local obj_id = object_table[value]
    if obj_id then
      -- Table already has an ID - write CODE_SHARED reference
      -- This handles both: (1) tables that finished marshaling (sharing)
      --                and (2) tables being marshaled (cycles)
      caml_marshal_buffer_write8u(buf, 0x04)
      caml_marshal_buffer_write32u(buf, obj_id)
      return
    end

    -- Assign object ID immediately (before marshaling fields)
    -- This allows cycles to work via SHARED references
    local current_id = next_id.value
    object_table[value] = current_id
    next_id.value = next_id.value + 1

    -- Mark table as being visited (for cycle detection)
    -- This is now only used to detect the impossible case of encountering
    -- a table that's being visited but has no ID (shouldn't happen)
    seen[value] = true

    -- Table: could be block or float array
    -- Check if it's a float array (tag 254 in OCaml)
    -- Float arrays have numeric indices and all number elements
    -- For simplicity: if table has .tag field, treat as block; else check if float array

    if value.tag == 254 and value.values then
      -- Float array with explicit tag 254 and values field: {tag = 254, values = {...}}
      -- Extract the values array and marshal it as a float array
      caml_marshal_write_float_array(buf, value.values)

    elseif value.tag ~= nil then
      -- Block: has tag field
      -- Use recursive write_value for fields, passing seen, object_table, next_id
      caml_marshal_write_block(buf, value, function(b, v)
        caml_marshal_write_value(b, v, seen, object_table, next_id)
      end)

    else
      -- Plain array without .tag field: treat as block with tag 0
      -- Note: We don't auto-detect float arrays from plain arrays of numbers
      -- Float arrays must be explicitly marked with {tag = 254, values = {...}}
      local len = value.size or #value
      local block = {
        tag = 0,
        size = len
      }
      for i = 1, len do
        block[i] = value[i]
      end
      caml_marshal_write_block(buf, block, function(b, v)
        caml_marshal_write_value(b, v, seen, object_table, next_id)
      end)
    end

    -- Unmark table after marshaling (allows sibling references in DAG)
    seen[value] = nil

  elseif value_type == "boolean" then
    -- Boolean: encode as integer 0 (false) or 1 (true)
    caml_marshal_write_int(buf, value and 1 or 0)

  elseif value_type == "nil" then
    -- Nil: encode as integer 0 (unit value in OCaml)
    caml_marshal_write_int(buf, 0)

  else
    error(string.format("caml_marshal_write_value: unsupported type %s", value_type))
  end
end

--Provides: caml_marshal_read_value
--Requires: caml_marshal_read8u, caml_marshal_read_int, caml_marshal_read_double, caml_marshal_read_string, caml_marshal_read_block, caml_marshal_read_float_array, caml_marshal_read32u
function caml_marshal_read_value(str, offset, objects_by_id, next_id)
  -- Main unmarshaling dispatch function with object sharing
  -- Read code byte and dispatch to appropriate reader
  -- Recursive unmarshaling for block fields
  -- objects_by_id: table mapping object_id → table for sharing (optional, created if nil)
  -- next_id: table with {value = N} for next object ID (optional, created if nil)
  -- Return {value, bytes_read}

  -- Initialize tables on first call
  objects_by_id = objects_by_id or {}
  next_id = next_id or {value = 1}

  -- Read code byte to determine type
  local code = caml_marshal_read8u(str, offset)

  -- CODE_SHARED (0x04): shared object reference
  if code == 0x04 then
    local obj_id = caml_marshal_read32u(str, offset + 1)
    local shared_obj = objects_by_id[obj_id]
    if not shared_obj then
      error(string.format("caml_marshal_read_value: invalid shared object reference %d at offset %d", obj_id, offset))
    end
    return {
      value = shared_obj,
      bytes_read = 5
    }

  -- Small int (0x40-0x7F): 0-63
  elseif code >= 0x40 and code <= 0x7F then
    return caml_marshal_read_int(str, offset)

  -- CODE_INT8 (0x00): signed byte
  elseif code == 0x00 then
    return caml_marshal_read_int(str, offset)

  -- CODE_INT16 (0x01): signed 16-bit
  elseif code == 0x01 then
    return caml_marshal_read_int(str, offset)

  -- CODE_INT32 (0x02): signed 32-bit
  elseif code == 0x02 then
    return caml_marshal_read_int(str, offset)

  -- Small string (0x20-0x3F): 0-31 bytes
  elseif code >= 0x20 and code <= 0x3F then
    return caml_marshal_read_string(str, offset)

  -- CODE_STRING8 (0x09): 32-255 bytes
  elseif code == 0x09 then
    return caml_marshal_read_string(str, offset)

  -- CODE_STRING32 (0x0A): 256+ bytes
  elseif code == 0x0A then
    return caml_marshal_read_string(str, offset)

  -- CODE_DOUBLE_LITTLE (0x0C): IEEE 754 double
  elseif code == 0x0C then
    return caml_marshal_read_double(str, offset)

  -- CODE_DOUBLE_ARRAY8_LITTLE (0x0E): float array with 8-bit length
  elseif code == 0x0E then
    local result = caml_marshal_read_float_array(str, offset)
    local obj_id = next_id.value
    objects_by_id[obj_id] = result.value
    next_id.value = next_id.value + 1
    return result

  -- CODE_DOUBLE_ARRAY32_LITTLE (0x07): float array with 32-bit length
  elseif code == 0x07 then
    local result = caml_marshal_read_float_array(str, offset)
    local obj_id = next_id.value
    objects_by_id[obj_id] = result.value
    next_id.value = next_id.value + 1
    return result

  -- Small block (0x80-0xFF): tag 0-15, size 0-7
  elseif code >= 0x80 and code <= 0xFF then
    -- Allocate object ID first (before reading fields, for cycles)
    local obj_id = next_id.value
    next_id.value = next_id.value + 1

    -- Create placeholder to be filled by read_block
    local placeholder = {}
    objects_by_id[obj_id] = placeholder

    -- Read block with fields
    local result = caml_marshal_read_block(str, offset, function(s, o)
      return caml_marshal_read_value(s, o, objects_by_id, next_id)
    end)

    -- Update placeholder with actual block content
    local block = result.value
    for k, v in pairs(block) do
      placeholder[k] = v
    end

    return {
      value = placeholder,
      bytes_read = result.bytes_read
    }

  -- CODE_BLOCK32 (0x08): large block
  elseif code == 0x08 then
    -- Allocate object ID first (before reading fields, for cycles)
    local obj_id = next_id.value
    next_id.value = next_id.value + 1

    -- Create placeholder to be filled by read_block
    local placeholder = {}
    objects_by_id[obj_id] = placeholder

    -- Read block with fields
    local result = caml_marshal_read_block(str, offset, function(s, o)
      return caml_marshal_read_value(s, o, objects_by_id, next_id)
    end)

    -- Update placeholder with actual block content
    local block = result.value
    for k, v in pairs(block) do
      placeholder[k] = v
    end

    return {
      value = placeholder,
      bytes_read = result.bytes_read
    }

  else
    -- Handle specific unsupported codes with helpful messages
    if code == 0x10 then
      error(string.format("caml_marshal_read_value: code pointer not supported (0x%02X at offset %d)", code, offset))
    elseif code == 0x13 then
      error(string.format("caml_marshal_read_value: 64-bit blocks not supported (0x%02X at offset %d)", code, offset))
    else
      error(string.format("caml_marshal_read_value: unsupported code 0x%02X at offset %d", code, offset))
    end
  end
end

-- Public API

--Provides: caml_marshal_to_string
--Requires: caml_marshal_buffer_create, caml_marshal_write_value, caml_marshal_buffer_to_string, caml_marshal_header_write, caml_marshal_buffer_write8u
function caml_marshal_to_string(value, flags)
  -- Marshal value to string with header
  -- flags parameter is optional (reserved for future use, not implemented)
  -- Returns: marshaled string with 20-byte header + data

  -- Input validation
  if value == nil then
    error("caml_marshal_to_string: cannot marshal nil value")
  end

  if flags ~= nil and type(flags) ~= "table" then
    error("caml_marshal_to_string: flags must be a table or nil, got " .. type(flags))
  end

  -- Check for unsupported flags
  if flags and type(flags) == "table" then
    -- flags[1] = Closures flag (not supported)
    if flags[1] ~= nil and flags[1] ~= 0 then
      error("caml_marshal_to_string: Closures flag not supported")
    end
  end

  -- Create buffer for marshaling the value
  local data_buf = caml_marshal_buffer_create()

  -- Create object tracking tables for sharing
  local seen = {}
  local object_table = {}
  local next_id = {value = 1}

  -- Marshal the value to the data buffer with object sharing
  caml_marshal_write_value(data_buf, value, seen, object_table, next_id)

  -- Get data length and number of objects
  local data_len = data_buf.length
  local num_objects = next_id.value - 1

  -- Create buffer for header + data
  local buf = caml_marshal_buffer_create()

  -- Write 20-byte header
  -- Header format: magic (4) | data_len (4) | num_objects (4) | size_32 (4) | size_64 (4)
  -- num_objects: count of shared objects (tables/arrays)
  -- size_32/size_64: reserved (0)
  caml_marshal_header_write(buf, data_len, num_objects, 0, 0)

  -- Append data bytes
  for i = 1, data_len do
    buf.length = buf.length + 1
    buf.bytes[buf.length] = data_buf.bytes[i]
  end

  -- Convert to string
  return caml_marshal_buffer_to_string(buf)
end

--Provides: caml_marshal_to_bytes
--Requires: caml_marshal_to_string
function caml_marshal_to_bytes(value, flags)
  -- Alias for caml_marshal_to_string
  return caml_marshal_to_string(value, flags)
end

--Provides: caml_marshal_from_bytes
--Requires: caml_marshal_header_read, caml_marshal_header_size, caml_marshal_read_value
function caml_marshal_from_bytes(str, offset)
  -- Unmarshal value from string with header
  -- offset parameter is optional (defaults to 0)
  -- Returns: unmarshaled value

  -- Input validation
  if type(str) ~= "string" then
    error("caml_marshal_from_bytes: expected string, got " .. type(str))
  end

  -- Default offset to 0
  offset = offset or 0

  -- Validate offset
  if type(offset) ~= "number" then
    error("caml_marshal_from_bytes: offset must be non-negative number, got " .. type(offset))
  end

  if offset < 0 then
    error("caml_marshal_from_bytes: offset must be non-negative, got " .. tostring(offset))
  end

  -- Read and validate header (20 bytes)
  local header = caml_marshal_header_read(str, offset)

  -- Header contains: magic, data_len, num_objects, size_32, size_64
  -- num_objects tells us how many shared objects to expect

  -- Calculate data offset (after header)
  local header_size = caml_marshal_header_size()
  local data_offset = offset + header_size

  -- Create object tracking tables for sharing
  local objects_by_id = {}
  local next_id = {value = 1}

  -- Unmarshal value from data section with object sharing
  local result = caml_marshal_read_value(str, data_offset, objects_by_id, next_id)

  -- Return the unmarshaled value (not the bytes_read)
  return result.value
end

--Provides: caml_marshal_from_string
--Requires: caml_marshal_from_bytes
function caml_marshal_from_string(str, offset)
  -- Alias for caml_marshal_from_bytes
  return caml_marshal_from_bytes(str, offset)
end

--Provides: caml_marshal_data_size
--Requires: caml_marshal_header_read
function caml_marshal_data_size(str, offset)
  -- Return data length from header (excludes header size)
  -- offset parameter is optional (defaults to 0)

  -- Default offset to 0
  offset = offset or 0

  -- Read header
  local header = caml_marshal_header_read(str, offset)

  -- Return data length
  return header.data_len
end

--Provides: caml_marshal_total_size
--Requires: caml_marshal_header_size, caml_marshal_data_size
function caml_marshal_total_size(str, offset)
  -- Return total size: header size (20) + data length
  -- offset parameter is optional (defaults to 0)

  -- Default offset to 0
  offset = offset or 0

  -- Get header size (always 20)
  local header_size = caml_marshal_header_size()

  -- Get data size
  local data_size = caml_marshal_data_size(str, offset)

  -- Return total
  return header_size + data_size
end

--Provides: marshal_value_internal
--Requires: caml_marshal_buffer_create, caml_marshal_write_value, caml_marshal_buffer_to_string
function marshal_value_internal(value)
  -- High-level API: Marshal value to string without header
  -- This is a simplified wrapper for test compatibility
  -- Returns: marshaled data (no header)

  local buf = caml_marshal_buffer_create()
  local seen = {}
  local object_table = {}
  local next_id = {value = 1}

  caml_marshal_write_value(buf, value, seen, object_table, next_id)

  return caml_marshal_buffer_to_string(buf)
end

--Provides: unmarshal_value_internal
--Requires: caml_marshal_read_value
function unmarshal_value_internal(str)
  -- High-level API: Unmarshal value from string without header
  -- This is a simplified wrapper for test compatibility
  -- Returns: unmarshaled value

  local objects_by_id = {}
  local next_id = {value = 1}

  local result = caml_marshal_read_value(str, 0, objects_by_id, next_id)

  return result.value
end

--Provides: marshal_header_read_header
--Requires: caml_marshal_header_read
function marshal_header_read_header(str, offset)
  -- High-level API: Alias for caml_marshal_header_read
  -- Provided for test compatibility
  return caml_marshal_header_read(str, offset)
end

--Provides: MARSHAL_MAGIC_SMALL
MARSHAL_MAGIC_SMALL = 0x8495A6BE

--Provides: MARSHAL_MAGIC_BIG
MARSHAL_MAGIC_BIG = 0x8495A6BF


-- Runtime: list


--Provides: caml_list_empty
function caml_list_empty()
  return 0
end

--Provides: caml_list_cons
function caml_list_cons(hd, tl)
  return {tag = 0, hd, tl}
end


--Provides: caml_list_hd
function caml_list_hd(list)
  if list == 0 then
    error("hd")
  end
  return list[1]
end

--Provides: caml_list_tl
function caml_list_tl(list)
  if list == 0 then
    error("tl")
  end
  return list[2]
end

--Provides: caml_list_is_empty
function caml_list_is_empty(list)
  return list == 0
end


--Provides: caml_list_length
function caml_list_length(list)
  local len = 0
  while list ~= 0 do
    len = len + 1
    list = list[2]
  end
  return len
end


--Provides: caml_list_nth
function caml_list_nth(list, n)
  local current = list
  local index = 0
  while current ~= 0 do
    if index == n then
      return current[1]
    end
    index = index + 1
    current = current[2]
  end
  error("nth")
end

--Provides: caml_list_nth_opt
function caml_list_nth_opt(list, n)
  local current = list
  local index = 0
  while current ~= 0 do
    if index == n then
      return {tag = 0, current[1]}  -- Some(value)
    end
    index = index + 1
    current = current[2]
  end
  return 0  -- None
end


--Provides: caml_list_rev
function caml_list_rev(list)
  local result = 0
  while list ~= 0 do
    result = {tag = 0, list[1], result}
    list = list[2]
  end
  return result
end

--Provides: caml_list_rev_append
function caml_list_rev_append(list1, list2)
  local result = list2
  while list1 ~= 0 do
    result = {tag = 0, list1[1], result}
    list1 = list1[2]
  end
  return result
end


--Provides: caml_list_append
function caml_list_append(list1, list2)
  if list1 == 0 then
    return list2
  end
  local rev = 0
  local current = list1
  while current ~= 0 do
    rev = {tag = 0, current[1], rev}
    current = current[2]
  end
  local result = list2
  while rev ~= 0 do
    result = {tag = 0, rev[1], result}
    rev = rev[2]
  end
  return result
end

--Provides: caml_list_concat
--Requires: caml_list_append
function caml_list_concat(lists)
  local result = 0
  local rev_lists = 0
  while lists ~= 0 do
    rev_lists = {tag = 0, lists[1], rev_lists}
    lists = lists[2]
  end
  while rev_lists ~= 0 do
    result = caml_list_append(rev_lists[1], result)
    rev_lists = rev_lists[2]
  end
  return result
end

--Provides: caml_list_flatten
--Requires: caml_list_concat
function caml_list_flatten(lists)
  return caml_list_concat(lists)
end


--Provides: caml_list_iter
function caml_list_iter(f, list)
  while list ~= 0 do
    f(list[1])
    list = list[2]
  end
end

--Provides: caml_list_iteri
function caml_list_iteri(f, list)
  local i = 0
  while list ~= 0 do
    f(i, list[1])
    list = list[2]
    i = i + 1
  end
end


--Provides: caml_list_map
--Requires: caml_list_rev
function caml_list_map(f, list)
  if list == 0 then
    return 0
  end
  local rev = 0
  while list ~= 0 do
    rev = {tag = 0, f(list[1]), rev}
    list = list[2]
  end
  return caml_list_rev(rev)
end

--Provides: caml_list_mapi
--Requires: caml_list_rev
function caml_list_mapi(f, list)
  if list == 0 then
    return 0
  end
  local rev = 0
  local i = 0
  while list ~= 0 do
    rev = {tag = 0, f(i, list[1]), rev}
    list = list[2]
    i = i + 1
  end
  return caml_list_rev(rev)
end

--Provides: caml_list_rev_map
function caml_list_rev_map(f, list)
  local result = 0
  while list ~= 0 do
    result = {tag = 0, f(list[1]), result}
    list = list[2]
  end
  return result
end

--Provides: caml_list_filter_map
--Requires: caml_list_rev
function caml_list_filter_map(f, list)
  local rev = 0
  while list ~= 0 do
    local opt = f(list[1])
    if opt ~= 0 then  -- Some(value)
      rev = {tag = 0, opt[1], rev}
    end
    list = list[2]
  end
  return caml_list_rev(rev)
end

--Provides: caml_list_concat_map
--Requires: caml_list_append
function caml_list_concat_map(f, list)
  local result = 0
  local rev_parts = 0
  while list ~= 0 do
    rev_parts = {tag = 0, f(list[1]), rev_parts}
    list = list[2]
  end
  while rev_parts ~= 0 do
    result = caml_list_append(rev_parts[1], result)
    rev_parts = rev_parts[2]
  end
  return result
end


--Provides: caml_list_fold_left
function caml_list_fold_left(f, acc, list)
  while list ~= 0 do
    acc = f(acc, list[1])
    list = list[2]
  end
  return acc
end

--Provides: caml_list_fold_right
--Requires: caml_list_rev
function caml_list_fold_right(f, list, acc)
  local rev = caml_list_rev(list)
  while rev ~= 0 do
    acc = f(rev[1], acc)
    rev = rev[2]
  end
  return acc
end


--Provides: caml_list_for_all
function caml_list_for_all(pred, list)
  while list ~= 0 do
    if not pred(list[1]) then
      return false
    end
    list = list[2]
  end
  return true
end

--Provides: caml_list_exists
function caml_list_exists(pred, list)
  while list ~= 0 do
    if pred(list[1]) then
      return true
    end
    list = list[2]
  end
  return false
end

--Provides: caml_list_mem
function caml_list_mem(x, list)
  while list ~= 0 do
    if list[1] == x then
      return true
    end
    list = list[2]
  end
  return false
end

--Provides: caml_list_memq
--Requires: caml_list_mem
function caml_list_memq(x, list)
  return caml_list_mem(x, list)
end


--Provides: caml_list_find
function caml_list_find(pred, list)
  while list ~= 0 do
    if pred(list[1]) then
      return list[1]
    end
    list = list[2]
  end
  error("Not_found")
end

--Provides: caml_list_find_opt
function caml_list_find_opt(pred, list)
  while list ~= 0 do
    if pred(list[1]) then
      return {tag = 0, list[1]}  -- Some(value)
    end
    list = list[2]
  end
  return 0  -- None
end

--Provides: caml_list_find_map
function caml_list_find_map(f, list)
  while list ~= 0 do
    local opt = f(list[1])
    if opt ~= 0 then  -- Some(value)
      return opt
    end
    list = list[2]
  end
  return 0  -- None
end

--Provides: caml_list_filter
--Requires: caml_list_rev
function caml_list_filter(pred, list)
  local rev = 0
  while list ~= 0 do
    if pred(list[1]) then
      rev = {tag = 0, list[1], rev}
    end
    list = list[2]
  end
  return caml_list_rev(rev)
end

--Provides: caml_list_partition
--Requires: caml_list_rev
function caml_list_partition(pred, list)
  local true_list = 0
  local false_list = 0
  while list ~= 0 do
    if pred(list[1]) then
      true_list = {tag = 0, list[1], true_list}
    else
      false_list = {tag = 0, list[1], false_list}
    end
    list = list[2]
  end
  return {caml_list_rev(true_list), caml_list_rev(false_list)}
end


--Provides: caml_list_assoc
function caml_list_assoc(key, list)
  while list ~= 0 do
    local pair = list[1]
    if pair[1] == key then
      return pair[2]
    end
    list = list[2]
  end
  error("Not_found")
end

--Provides: caml_list_assoc_opt
function caml_list_assoc_opt(key, list)
  while list ~= 0 do
    local pair = list[1]
    if pair[1] == key then
      return {tag = 0, pair[2]}  -- Some(value)
    end
    list = list[2]
  end
  return 0  -- None
end

--Provides: caml_list_assq
--Requires: caml_list_assoc
function caml_list_assq(key, list)
  return caml_list_assoc(key, list)
end

--Provides: caml_list_assq_opt
--Requires: caml_list_assoc_opt
function caml_list_assq_opt(key, list)
  return caml_list_assoc_opt(key, list)
end

--Provides: caml_list_mem_assoc
function caml_list_mem_assoc(key, list)
  while list ~= 0 do
    local pair = list[1]
    if pair[1] == key then
      return true
    end
    list = list[2]
  end
  return false
end

--Provides: caml_list_mem_assq
--Requires: caml_list_mem_assoc
function caml_list_mem_assq(key, list)
  return caml_list_mem_assoc(key, list)
end

--Provides: caml_list_remove_assoc
--Requires: caml_list_rev
function caml_list_remove_assoc(key, list)
  if list == 0 then
    return 0
  end
  local pair = list[1]
  if pair[1] == key then
    return list[2]  -- Skip this element
  end
  local rev = 0
  local current = list
  local found = false
  while current ~= 0 do
    local p = current[1]
    if not found and p[1] == key then
      found = true
    else
      rev = {tag = 0, p, rev}
    end
    current = current[2]
  end
  return caml_list_rev(rev)
end

--Provides: caml_list_remove_assq
--Requires: caml_list_remove_assoc
function caml_list_remove_assq(key, list)
  return caml_list_remove_assoc(key, list)
end


--Provides: caml_list_split
--Requires: caml_list_rev
function caml_list_split(list)
  local list1 = 0
  local list2 = 0
  while list ~= 0 do
    local pair = list[1]
    list1 = {tag = 0, pair[1], list1}
    list2 = {tag = 0, pair[2], list2}
    list = list[2]
  end
  return {caml_list_rev(list1), caml_list_rev(list2)}
end

--Provides: caml_list_combine
--Requires: caml_list_rev
function caml_list_combine(list1, list2)
  local result = 0
  local rev = 0
  while list1 ~= 0 and list2 ~= 0 do
    rev = {tag = 0, {list1[1], list2[1]}, rev}
    list1 = list1[2]
    list2 = list2[2]
  end
  if list1 ~= 0 or list2 ~= 0 then
    error("Invalid_argument")
  end
  return caml_list_rev(rev)
end


--Provides: caml_list_sort
function caml_list_sort(cmp, list)
  if list == 0 or list[2] == 0 then
    return list
  end
  local arr = {}
  local current = list
  while current ~= 0 do
    table.insert(arr, current[1])
    current = current[2]
  end
  table.sort(arr, function(a, b) return cmp(a, b) < 0 end)
  local result = 0
  for i = #arr, 1, -1 do
    result = {tag = 0, arr[i], result}
  end
  return result
end

--Provides: caml_list_stable_sort
--Requires: caml_list_sort
function caml_list_stable_sort(cmp, list)
  return caml_list_sort(cmp, list)
end

--Provides: caml_list_fast_sort
--Requires: caml_list_sort
function caml_list_fast_sort(cmp, list)
  return caml_list_sort(cmp, list)
end

--Provides: caml_list_sort_uniq
--Requires: caml_list_sort
function caml_list_sort_uniq(cmp, list)
  if list == 0 then
    return 0
  end
  local sorted = caml_list_sort(cmp, list)
  local result = {tag = 0, sorted[1], 0}
  local tail = result
  sorted = sorted[2]
  while sorted ~= 0 do
    if cmp(tail[1], sorted[1]) ~= 0 then
      local new_tail = {tag = 0, sorted[1], 0}
      tail[2] = new_tail
      tail = new_tail
    end
    sorted = sorted[2]
  end
  return result
end

--Provides: caml_list_merge
--Requires: caml_list_rev
function caml_list_merge(cmp, list1, list2)
  if list1 == 0 then
    return list2
  end
  if list2 == 0 then
    return list1
  end
  local rev = 0
  while list1 ~= 0 and list2 ~= 0 do
    if cmp(list1[1], list2[1]) <= 0 then
      rev = {tag = 0, list1[1], rev}
      list1 = list1[2]
    else
      rev = {tag = 0, list2[1], rev}
      list2 = list2[2]
    end
  end
  local remaining = list1 ~= 0 and list1 or list2
  while remaining ~= 0 do
    rev = {tag = 0, remaining[1], rev}
    remaining = remaining[2]
  end
  return caml_list_rev(rev)
end


-- Runtime: lazy
--Provides: caml_lazy_from_fun
function caml_lazy_from_fun(f)
  return {246, f}  -- LAZY_TAG (not yet evaluated)
end

--Provides: caml_lazy_make_forward
function caml_lazy_make_forward(v)
  return {250, v}  -- FORWARD_TAG (already evaluated)
end

--Provides: caml_lazy_from_val
function caml_lazy_from_val(v)
  return {250, v}  -- FORWARD_TAG (already evaluated)
end


--Provides: caml_lazy_update_to_forcing
function caml_lazy_update_to_forcing(lazy_val)
  if lazy_val[1] == 246 then  -- LAZY_TAG
    lazy_val[1] = 244  -- FORCING_TAG (currently being evaluated)
    return 0
  else
    return 1
  end
end

--Provides: caml_lazy_update_to_forward
function caml_lazy_update_to_forward(lazy_val)
  if lazy_val[1] == 244 then  -- FORCING_TAG
    lazy_val[1] = 250  -- FORWARD_TAG
  end
  return 0
end

--Provides: caml_lazy_reset_to_lazy
function caml_lazy_reset_to_lazy(lazy_val)
  if lazy_val[1] == 244 then  -- FORCING_TAG
    lazy_val[1] = 246  -- LAZY_TAG
  end
  return 0
end

--Provides: caml_lazy_read_result
function caml_lazy_read_result(lazy_val)
  if lazy_val[1] == 250 then  -- FORWARD_TAG
    return lazy_val[2]
  else
    return lazy_val
  end
end


--Provides: caml_lazy_force
function caml_lazy_force(lazy_val)
  local tag = lazy_val[1]

  if tag == 250 then  -- FORWARD_TAG
    return lazy_val[2]
  end

  if tag == 244 then  -- FORCING_TAG
    error("Lazy value is undefined (recursive forcing)")
  end

  if tag == 246 then  -- LAZY_TAG
    local update_result = caml_lazy_update_to_forcing(lazy_val)
    if update_result ~= 0 then
      error("Lazy value race condition")
    end

    local thunk = lazy_val[2]

    local success, result = pcall(thunk)

    if success then
      lazy_val[2] = result
      caml_lazy_update_to_forward(lazy_val)
      return result
    else
      caml_lazy_reset_to_lazy(lazy_val)
      error(result)
    end
  end

  error("Invalid lazy value tag: " .. tostring(tag))
end

--Provides: caml_lazy_force_val
--Requires: caml_lazy_force
function caml_lazy_force_val(lazy_val)
  return caml_lazy_force(lazy_val)
end


--Provides: caml_lazy_is_val
function caml_lazy_is_val(lazy_val)
  return lazy_val[1] == 250  -- FORWARD_TAG
end

--Provides: caml_lazy_is_forcing
function caml_lazy_is_forcing(lazy_val)
  return lazy_val[1] == 244  -- FORCING_TAG
end

--Provides: caml_lazy_is_lazy
function caml_lazy_is_lazy(lazy_val)
  return lazy_val[1] == 246  -- LAZY_TAG
end


--Provides: caml_lazy_map
--Requires: caml_lazy_force, caml_lazy_from_fun
function caml_lazy_map(f, lazy_val)
  local thunk = function()
    local value = caml_lazy_force(lazy_val)
    return f(value)
  end
  return caml_lazy_from_fun(thunk)
end

--Provides: caml_lazy_map2
--Requires: caml_lazy_force, caml_lazy_from_fun
function caml_lazy_map2(f, lazy_val1, lazy_val2)
  local thunk = function()
    local value1 = caml_lazy_force(lazy_val1)
    local value2 = caml_lazy_force(lazy_val2)
    return f(value1, value2)
  end
  return caml_lazy_from_fun(thunk)
end


--Provides: caml_lazy_tag
function caml_lazy_tag(lazy_val)
  return lazy_val[1]
end

--Provides: caml_lazy_from_exception
--Requires: caml_lazy_from_fun
function caml_lazy_from_exception(exn)
  local thunk = function()
    error(exn)
  end
  return caml_lazy_from_fun(thunk)
end

--Provides: caml_lazy_force_unit
--Requires: caml_lazy_force
function caml_lazy_force_unit(lazy_val)
  caml_lazy_force(lazy_val)
  return 0  -- unit
end


-- Runtime: gc
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

_OCAML_gc = _OCAML_gc or {finalizers = {}}

--Provides: caml_gc_minor
function caml_gc_minor(_unit)
  collectgarbage("step", 0)
  return 0
end

--Provides: caml_gc_major
function caml_gc_major(_unit)
  collectgarbage("collect")
  return 0
end

--Provides: caml_gc_full_major
function caml_gc_full_major(_unit)
  collectgarbage("collect")
  return 0
end

--Provides: caml_gc_compaction
function caml_gc_compaction(_unit)
  return 0
end

--Provides: caml_gc_counters
function caml_gc_counters(_unit)
  return {254, 0, 0, 0}
end

--Provides: caml_gc_quick_stat
function caml_gc_quick_stat(_unit)
  local mem = collectgarbage("count")
  return {0, mem, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
end

--Provides: caml_gc_stat
--Requires: caml_gc_quick_stat
function caml_gc_stat(unit)
  return caml_gc_quick_stat(unit)
end

--Provides: caml_gc_set
function caml_gc_set(_control)
  return 0
end

--Provides: caml_gc_get
function caml_gc_get(_unit)
  return {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
end

--Provides: caml_gc_major_slice
function caml_gc_major_slice(_work)
  collectgarbage("step", math.max(_work, 100))
  return 0
end

--Provides: caml_gc_minor_words
function caml_gc_minor_words(_unit)
  return 0
end

--Provides: caml_get_minor_free
function caml_get_minor_free(_unit)
  return 0
end

--Provides: caml_final_register
function caml_final_register(f, x)
  if type(x) == "table" then
    local proxy
    if newproxy then
      proxy = newproxy(true)
      local mt = getmetatable(proxy)
      mt.__gc = function()
        pcall(f, x)
      end
    else
      proxy = {}
      setmetatable(proxy, {__gc = function()
        pcall(f, x)
      end})
    end
    if not _OCAML_gc.finalizers[x] then
      _OCAML_gc.finalizers[x] = {}
    end
    table.insert(_OCAML_gc.finalizers[x], proxy)
  end
  return 0
end

--Provides: caml_final_register_called_without_value
function caml_final_register_called_without_value(cb, a)
  if type(a) == "table" then
    local proxy
    if newproxy then
      proxy = newproxy(true)
      local mt = getmetatable(proxy)
      mt.__gc = function()
        pcall(cb, 0)
      end
    else
      proxy = {}
      setmetatable(proxy, {__gc = function()
        pcall(cb, 0)
      end})
    end
    if not _OCAML_gc.finalizers[a] then
      _OCAML_gc.finalizers[a] = {}
    end
    table.insert(_OCAML_gc.finalizers[a], proxy)
  end
  return 0
end

--Provides: caml_final_release
function caml_final_release(_unit)
  collectgarbage("collect")
  return 0
end

--Provides: caml_memprof_start
function caml_memprof_start(_rate, _stack_size, _tracker)
  return 0
end

--Provides: caml_memprof_stop
function caml_memprof_stop(_unit)
  return 0
end

--Provides: caml_memprof_discard
function caml_memprof_discard(_t)
  return 0
end

--Provides: caml_eventlog_resume
function caml_eventlog_resume(_unit)
  return 0
end

--Provides: caml_eventlog_pause
function caml_eventlog_pause(_unit)
  return 0
end

--Provides: caml_gc_huge_fallback_count
function caml_gc_huge_fallback_count(_unit)
  return 0
end


-- Runtime: format
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_parse_format
function caml_parse_format(fmt)
  if type(fmt) == "table" then
    local chars = {}
    for i = 1, #fmt do
      table.insert(chars, string.char(fmt[i]))
    end
    fmt = table.concat(chars)
  end

  local len = #fmt
  if len > 31 then
    error("format_int: format too long")
  end

  local f = {
    justify = "+",      -- "+" for right, "-" for left
    signstyle = "-",    -- "-" for no sign on positive, "+" for +, " " for space
    filler = " ",       -- " " or "0"
    alternate = false,  -- # flag for alternate form
    base = 0,           -- 0, 8, 10, or 16
    signedconv = false, -- true for signed conversions
    width = 0,          -- minimum field width
    uppercase = false,  -- true for uppercase output
    sign = 1,           -- 1 for positive, -1 for negative
    prec = -1,          -- precision (-1 means not specified)
    conv = "f"          -- conversion type
  }

  local i = 1
  while i <= len do
    local c = fmt:sub(i, i)

    if c == "-" then
      f.justify = "-"
      i = i + 1
    elseif c == "+" or c == " " then
      f.signstyle = c
      i = i + 1
    elseif c == "0" then
      f.filler = "0"
      i = i + 1
    elseif c == "#" then
      f.alternate = true
      i = i + 1
    elseif c >= "1" and c <= "9" then
      f.width = 0
      while i <= len do
        local digit = fmt:byte(i) - 48
        if digit >= 0 and digit <= 9 then
          f.width = f.width * 10 + digit
          i = i + 1
        else
          break
        end
      end
    elseif c == "." then
      f.prec = 0
      i = i + 1
      while i <= len do
        local digit = fmt:byte(i) - 48
        if digit >= 0 and digit <= 9 then
          f.prec = f.prec * 10 + digit
          i = i + 1
        else
          break
        end
      end
    elseif c == "d" or c == "i" then
      f.signedconv = true
      f.base = 10
      f.conv = c
      i = i + 1
    elseif c == "u" then
      f.base = 10
      f.conv = c
      i = i + 1
    elseif c == "x" then
      f.base = 16
      f.conv = c
      i = i + 1
    elseif c == "X" then
      f.base = 16
      f.uppercase = true
      f.conv = "x"
      i = i + 1
    elseif c == "o" then
      f.base = 8
      f.conv = c
      i = i + 1
    elseif c == "e" or c == "f" or c == "g" then
      f.signedconv = true
      f.conv = c
      i = i + 1
    elseif c == "E" or c == "F" or c == "G" then
      f.signedconv = true
      f.uppercase = true
      f.conv = c:lower()
      i = i + 1
    elseif c == "s" then
      f.conv = "s"
      i = i + 1
    elseif c == "c" then
      f.conv = "c"
      i = i + 1
    else
      i = i + 1
    end
  end

  return f
end

--Provides: caml_finish_formatting
function caml_finish_formatting(f, rawbuffer)
  if f.uppercase then
    rawbuffer = rawbuffer:upper()
  end

  local len = #rawbuffer

  if f.signedconv and (f.sign < 0 or f.signstyle ~= "-") then
    len = len + 1
  end
  if f.alternate then
    if f.base == 8 then
      len = len + 1
    elseif f.base == 16 then
      len = len + 2
    end
  end

  local buffer = ""

  if f.justify == "+" and f.filler == " " then
    for i = len + 1, f.width do
      buffer = buffer .. " "
    end
  end

  if f.signedconv then
    if f.sign < 0 then
      buffer = buffer .. "-"
    elseif f.signstyle ~= "-" then
      buffer = buffer .. f.signstyle
    end
  end

  if f.alternate and f.base == 8 then
    buffer = buffer .. "0"
  end
  if f.alternate and f.base == 16 then
    buffer = buffer .. (f.uppercase and "0X" or "0x")
  end

  if f.justify == "+" and f.filler == "0" then
    for i = len + 1, f.width do
      buffer = buffer .. "0"
    end
  end

  buffer = buffer .. rawbuffer

  if f.justify == "-" then
    for i = len + 1, f.width do
      buffer = buffer .. " "
    end
  end

  local result = {}
  for i = 1, #buffer do
    result[i] = buffer:byte(i)
  end
  return result
end

--Provides: caml_ocaml_string_to_lua
function caml_ocaml_string_to_lua(s)
  if type(s) == "string" then
    return s
  end
  local chars = {}
  for i = 1, #s do
    table.insert(chars, string.char(s[i]))
  end
  return table.concat(chars)
end

--Provides: caml_lua_string_to_ocaml
function caml_lua_string_to_ocaml(s)
  local result = {}
  for i = 1, #s do
    result[i] = s:byte(i)
  end
  return result
end

--Provides: caml_str_repeat
function caml_str_repeat(n, s)
  local result = {}
  for i = 1, n do
    table.insert(result, s)
  end
  return table.concat(result)
end

--Provides: caml_skip_whitespace
function caml_skip_whitespace(s, pos)
  while pos <= #s do
    local c = s:sub(pos, pos)
    if c == " " or c == "\t" or c == "\n" or c == "\r" then
      pos = pos + 1
    else
      break
    end
  end
  return pos
end

--Provides: caml_format_int
--Requires: caml_ocaml_string_to_lua, caml_lua_string_to_ocaml, caml_parse_format, caml_str_repeat, caml_finish_formatting
function caml_format_int(fmt, i)
  local fmt_str = caml_ocaml_string_to_lua(fmt)

  if fmt_str == "%d" then
    return caml_lua_string_to_ocaml(tostring(i))
  end

  local f = caml_parse_format(fmt)

  if i < 0 then
    if f.signedconv then
      f.sign = -1
      i = -i
    else
      i = i + 4294967296  -- 2^32
    end
  end

  local s
  if f.base == 10 then
    s = string.format("%d", math.floor(i))
  elseif f.base == 16 then
    s = string.format("%x", math.floor(i))
  elseif f.base == 8 then
    s = string.format("%o", math.floor(i))
  else
    s = tostring(math.floor(i))
  end

  if f.prec >= 0 then
    f.filler = " "
    local n = f.prec - #s
    if n > 0 then
      s = caml_str_repeat(n, "0") .. s
    end
  end

  return caml_finish_formatting(f, s)
end

--Provides: caml_format_float
--Requires: caml_parse_format, caml_finish_formatting
function caml_format_float(fmt, x)
  local f = caml_parse_format(fmt)
  local prec = f.prec < 0 and 6 or f.prec

  if x < 0 or (x == 0 and 1/x == -math.huge) then
    f.sign = -1
    x = -x
  end

  local s

  if x ~= x then  -- NaN
    s = "nan"
    f.filler = " "
  elseif x == math.huge then  -- Infinity
    s = "inf"
    f.filler = " "
  else
    if f.conv == "e" then
      s = string.format("%." .. prec .. "e", x)
      s = s:gsub("e([+-])(%d)$", "e%10%2")
    elseif f.conv == "f" then
      s = string.format("%." .. prec .. "f", x)
    elseif f.conv == "g" then
      local effective_prec = prec > 0 and prec or 1

      local exp_str = string.format("%." .. (effective_prec - 1) .. "e", x)
      local exp_val = tonumber(exp_str:match("e([+-]%d+)$"))

      if exp_val and (exp_val < -4 or x >= 1e21 or #string.format("%.0f", x) > effective_prec) then
        s = exp_str
        s = s:gsub("(%d)0+e", "%1e")
        s = s:gsub("%.e", "e")
        s = s:gsub("e([+-])(%d)$", "e%10%2")
      else
        local p = effective_prec
        if exp_val and exp_val < 0 then
          p = p - exp_val - 1
          s = string.format("%." .. p .. "f", x)
        else
          repeat
            s = string.format("%." .. p .. "f", x)
            if #s <= effective_prec + 1 then break end
            p = p - 1
          until p < 0
        end

        if p > 0 then
          s = s:gsub("0+$", "")
          s = s:gsub("%.$", "")
        end
      end
    else
      s = string.format("%." .. prec .. "f", x)
    end
  end

  return caml_finish_formatting(f, s)
end

--Provides: caml_format_string
--Requires: caml_parse_format, caml_ocaml_string_to_lua, caml_str_repeat, caml_lua_string_to_ocaml
function caml_format_string(fmt, s)
  local f = caml_parse_format(fmt)
  local str = caml_ocaml_string_to_lua(s)

  if f.prec >= 0 and #str > f.prec then
    str = str:sub(1, f.prec)
  end

  local len = #str
  local buffer = ""

  if f.justify == "+" and len < f.width then
    buffer = caml_str_repeat(f.width - len, " ") .. str
  elseif f.justify == "-" and len < f.width then
    buffer = str .. caml_str_repeat(f.width - len, " ")
  else
    buffer = str
  end

  return caml_lua_string_to_ocaml(buffer)
end

--Provides: caml_format_char
--Requires: caml_parse_format, caml_str_repeat, caml_lua_string_to_ocaml
function caml_format_char(fmt, c)
  local f = caml_parse_format(fmt)

  local char
  if type(c) == "number" then
    char = string.char(c)
  elseif type(c) == "string" then
    char = c:sub(1, 1)
  elseif type(c) == "table" and #c == 1 then
    char = string.char(c[1])
  else
    char = " "
  end

  local buffer = ""
  if f.justify == "+" and 1 < f.width then
    buffer = caml_str_repeat(f.width - 1, " ") .. char
  elseif f.justify == "-" and 1 < f.width then
    buffer = char .. caml_str_repeat(f.width - 1, " ")
  else
    buffer = char
  end

  return caml_lua_string_to_ocaml(buffer)
end

--Provides: caml_scan_int
--Requires: caml_ocaml_string_to_lua, caml_parse_format, caml_skip_whitespace
function caml_scan_int(s, pos, fmt)
  pos = pos or 1
  local str = caml_ocaml_string_to_lua(s)
  local f = caml_parse_format(fmt or "%d")

  pos = caml_skip_whitespace(str, pos)

  if pos > #str then
    return nil, pos
  end

  local sign = 1
  local c = str:sub(pos, pos)
  if c == "-" then
    sign = -1
    pos = pos + 1
  elseif c == "+" then
    pos = pos + 1
  end

  if pos > #str then
    return nil, pos
  end

  local base = f.base
  if base == 0 then
    base = 10
  end

  if str:sub(pos, pos + 1) == "0x" or str:sub(pos, pos + 1) == "0X" then
    if base == 16 or base == 0 then
      base = 16
      pos = pos + 2
    end
  elseif str:sub(pos, pos + 1) == "0o" or str:sub(pos, pos + 1) == "0O" then
    if base == 8 or base == 0 then
      base = 8
      pos = pos + 2
    end
  elseif str:sub(pos, pos + 1) == "0b" or str:sub(pos, pos + 1) == "0B" then
    if base == 2 or base == 0 then
      base = 2
      pos = pos + 2
    end
  elseif str:sub(pos, pos) == "0" and base == 0 then
    base = 8
  end

  local start_pos = pos
  local value = 0
  local found_digit = false

  while pos <= #str do
    local c = str:sub(pos, pos)
    local digit = nil

    if c >= "0" and c <= "9" then
      digit = c:byte() - 48
    elseif c >= "a" and c <= "z" then
      digit = c:byte() - 97 + 10
    elseif c >= "A" and c <= "Z" then
      digit = c:byte() - 65 + 10
    end

    if digit and digit < base then
      value = value * base + digit
      pos = pos + 1
      found_digit = true
    else
      break
    end
  end

  if not found_digit then
    return nil, start_pos
  end

  return sign * value, pos
end

--Provides: caml_scan_float
--Requires: caml_ocaml_string_to_lua, caml_skip_whitespace
function caml_scan_float(s, pos)
  pos = pos or 1
  local str = caml_ocaml_string_to_lua(s)

  pos = caml_skip_whitespace(str, pos)

  if pos > #str then
    return nil, pos
  end

  local start_pos = pos
  local sign_str = ""
  local int_part = ""
  local frac_part = ""
  local exp_part = ""

  local c = str:sub(pos, pos)
  if c == "-" or c == "+" then
    sign_str = c
    pos = pos + 1
  end

  if str:sub(pos, pos + 2) == "nan" or str:sub(pos, pos + 2) == "NaN" then
    return 0/0, pos + 3
  end
  if str:sub(pos, pos + 7) == "infinity" or str:sub(pos, pos + 7) == "Infinity" then
    return (sign_str == "-" and -math.huge or math.huge), pos + 8
  end
  if str:sub(pos, pos + 2) == "inf" or str:sub(pos, pos + 2) == "Inf" then
    return (sign_str == "-" and -math.huge or math.huge), pos + 3
  end

  while pos <= #str do
    c = str:sub(pos, pos)
    if c >= "0" and c <= "9" then
      int_part = int_part .. c
      pos = pos + 1
    else
      break
    end
  end

  if pos <= #str and str:sub(pos, pos) == "." then
    pos = pos + 1
    while pos <= #str do
      c = str:sub(pos, pos)
      if c >= "0" and c <= "9" then
        frac_part = frac_part .. c
        pos = pos + 1
      else
        break
      end
    end
  end

  if int_part == "" and frac_part == "" then
    return nil, start_pos
  end

  if pos <= #str then
    c = str:sub(pos, pos)
    if c == "e" or c == "E" then
      local exp_pos = pos + 1
      local exp_sign = ""

      if exp_pos <= #str then
        c = str:sub(exp_pos, exp_pos)
        if c == "+" or c == "-" then
          exp_sign = c
          exp_pos = exp_pos + 1
        end
      end

      local exp_digits = ""
      while exp_pos <= #str do
        c = str:sub(exp_pos, exp_pos)
        if c >= "0" and c <= "9" then
          exp_digits = exp_digits .. c
          exp_pos = exp_pos + 1
        else
          break
        end
      end

      if exp_digits ~= "" then
        exp_part = "e" .. exp_sign .. exp_digits
        pos = exp_pos
      end
    end
  end

  local num_str = sign_str .. (int_part ~= "" and int_part or "0") ..
                  (frac_part ~= "" and ("." .. frac_part) or "") .. exp_part
  local value = tonumber(num_str)

  if value then
    return value, pos
  else
    return nil, start_pos
  end
end

--Provides: caml_scan_string
--Requires: caml_ocaml_string_to_lua, caml_skip_whitespace
function caml_scan_string(s, pos, width)
  pos = pos or 1
  local str = caml_ocaml_string_to_lua(s)

  pos = caml_skip_whitespace(str, pos)

  if pos > #str then
    return nil, pos
  end

  local start_pos = pos
  local result = ""
  local count = 0

  while pos <= #str do
    local c = str:sub(pos, pos)
    if c == " " or c == "\t" or c == "\n" or c == "\r" then
      break
    end

    result = result .. c
    pos = pos + 1
    count = count + 1

    if width and count >= width then
      break
    end
  end

  if result == "" then
    return nil, start_pos
  end

  return result, pos
end

--Provides: caml_scan_char
--Requires: caml_ocaml_string_to_lua, caml_skip_whitespace
function caml_scan_char(s, pos, skip_ws)
  pos = pos or 1
  local str = caml_ocaml_string_to_lua(s)

  if skip_ws then
    pos = caml_skip_whitespace(str, pos)
  end

  if pos > #str then
    return nil, pos
  end

  local c = str:byte(pos)
  return c, pos + 1
end

--Provides: caml_sscanf
--Requires: caml_ocaml_string_to_lua, caml_scan_int, caml_scan_float, caml_scan_string, caml_scan_char, caml_skip_whitespace
function caml_sscanf(input, fmt)
  local str = caml_ocaml_string_to_lua(input)
  local fmt_str = caml_ocaml_string_to_lua(fmt)

  local results = {}
  local pos = 1
  local fmt_pos = 1

  while fmt_pos <= #fmt_str do
    local c = fmt_str:sub(fmt_pos, fmt_pos)

    if c == "%" then
      fmt_pos = fmt_pos + 1
      if fmt_pos > #fmt_str then
        return nil
      end

      local conv = fmt_str:sub(fmt_pos, fmt_pos)

      if conv == "d" or conv == "i" or conv == "u" or conv == "x" or conv == "o" then
        local value, new_pos = caml_scan_int(str, pos, "%" .. conv)
        if not value then
          return nil
        end
        table.insert(results, value)
        pos = new_pos
      elseif conv == "f" or conv == "e" or conv == "g" then
        local value, new_pos = caml_scan_float(str, pos)
        if not value then
          return nil
        end
        table.insert(results, value)
        pos = new_pos
      elseif conv == "s" then
        local value, new_pos = caml_scan_string(str, pos)
        if not value then
          return nil
        end
        table.insert(results, value)
        pos = new_pos
      elseif conv == "c" then
        local value, new_pos = caml_scan_char(str, pos, false)
        if not value then
          return nil
        end
        table.insert(results, value)
        pos = new_pos
      elseif conv == "%" then
        pos = caml_skip_whitespace(str, pos)
        if str:sub(pos, pos) ~= "%" then
          return nil
        end
        pos = pos + 1
      else
        return nil
      end

      fmt_pos = fmt_pos + 1
    elseif c == " " or c == "\t" or c == "\n" or c == "\r" then
      pos = caml_skip_whitespace(str, pos)
      fmt_pos = fmt_pos + 1
    else
      pos = caml_skip_whitespace(str, pos)
      if str:sub(pos, pos) ~= c then
        return nil
      end
      pos = pos + 1
      fmt_pos = fmt_pos + 1
    end
  end

  return results
end

-- NOTE: caml_printf, caml_fprintf, caml_eprintf are NOT provided here.
-- The OCaml compiler generates its own Printf code from the stdlib that uses
-- low-level primitives like caml_ml_output directly. Providing these here would
-- conflict with the compiled OCaml version.

--Provides: caml_fscanf
--Requires: caml_ocaml_string_to_lua, caml_sscanf
function caml_fscanf(chanid, fmt)
  local io_module = package.loaded.io or require("io")

  local line_len = caml_ml_input_scan_line(chanid)
  if not line_len or line_len <= 0 then
    return nil
  end

  local line_bytes = {}
  local actual_len = caml_ml_input(chanid, line_bytes, 0, math.abs(line_len))

  if actual_len <= 0 then
    return nil
  end

  local line = caml_ocaml_string_to_lua(line_bytes)

  return caml_sscanf(line, fmt)
end

--Provides: caml_scanf
--Requires: caml_fscanf
function caml_scanf(fmt)
  local io_module = package.loaded.io or require("io")
  local stdin_chanid = caml_ml_open_descriptor_in(0)
  return caml_fscanf(stdin_chanid, fmt)
end


-- Runtime: buffer
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_ocaml_string_to_lua
function caml_ocaml_string_to_lua(s)
  if type(s) == "string" then
    return s
  end
  local chars = {}
  for i = 1, #s do
    table.insert(chars, string.char(s[i]))
  end
  return table.concat(chars)
end

--Provides: caml_buffer_create
function caml_buffer_create(initial_size)
  initial_size = initial_size or 16

  local buffer = {
    chunks = {},
    length = 0,
    capacity = initial_size
  }

  return buffer
end

--Provides: caml_buffer_add_char
function caml_buffer_add_char(buffer, c)
  local char
  if type(c) == "number" then
    char = string.char(c)
  elseif type(c) == "string" then
    char = c:sub(1, 1)
  elseif type(c) == "table" and #c == 1 then
    char = string.char(c[1])
  else
    error("Invalid character type")
  end

  table.insert(buffer.chunks, char)
  buffer.length = buffer.length + 1
end

--Provides: caml_buffer_add_string
--Requires: caml_ocaml_string_to_lua
function caml_buffer_add_string(buffer, s)
  local str = caml_ocaml_string_to_lua(s)

  if #str > 0 then
    table.insert(buffer.chunks, str)
    buffer.length = buffer.length + #str
  end
end

--Provides: caml_buffer_add_substring
--Requires: caml_ocaml_string_to_lua
function caml_buffer_add_substring(buffer, s, offset, len)
  local str = caml_ocaml_string_to_lua(s)

  local start = offset + 1
  local finish = offset + len

  if start < 1 or finish > #str then
    error("Buffer.add_substring: invalid offset or length")
  end

  local substring = str:sub(start, finish)

  if #substring > 0 then
    table.insert(buffer.chunks, substring)
    buffer.length = buffer.length + #substring
  end
end

--Provides: caml_buffer_contents
function caml_buffer_contents(buffer)
  local result_str = table.concat(buffer.chunks)

  local result = {}
  for i = 1, #result_str do
    result[i] = result_str:byte(i)
  end

  return result
end

--Provides: caml_buffer_length
function caml_buffer_length(buffer)
  return buffer.length
end

--Provides: caml_buffer_reset
function caml_buffer_reset(buffer)
  buffer.chunks = {}
  buffer.length = 0
end

--Provides: caml_buffer_clear
--Requires: caml_buffer_reset
function caml_buffer_clear(buffer)
  caml_buffer_reset(buffer)
end

--Provides: caml_buffer_add_printf
--Requires: caml_ocaml_string_to_lua, caml_buffer_add_string, caml_format_int, caml_format_float, caml_format_string, caml_format_char
function caml_buffer_add_printf(buffer, fmt, ...)
  local fmt_str = caml_ocaml_string_to_lua(fmt)
  local args = {...}
  local arg_idx = 1
  local result_parts = {}

  local i = 1
  while i <= #fmt_str do
    local c = fmt_str:sub(i, i)

    if c == "%" then
      i = i + 1
      if i > #fmt_str then
        break
      end

      local spec = ""

      while i <= #fmt_str do
        local ch = fmt_str:sub(i, i)
        spec = spec .. ch
        i = i + 1

        if ch:match("[diouxXeEfFgGaAcspn%%]") then
          break
        end
      end

      local conv = spec:sub(-1)

      if conv == "%" then
        table.insert(result_parts, "%")
      elseif conv == "d" or conv == "i" or conv == "u" or conv == "x" or conv == "X" or conv == "o" then
        if arg_idx <= #args then
          local formatted = caml_format_int("%" .. spec, args[arg_idx])
          table.insert(result_parts, caml_ocaml_string_to_lua(formatted))
          arg_idx = arg_idx + 1
        end
      elseif conv == "f" or conv == "F" or conv == "e" or conv == "E" or conv == "g" or conv == "G" then
        if arg_idx <= #args then
          local formatted = caml_format_float("%" .. spec, args[arg_idx])
          table.insert(result_parts, caml_ocaml_string_to_lua(formatted))
          arg_idx = arg_idx + 1
        end
      elseif conv == "s" then
        if arg_idx <= #args then
          local formatted = caml_format_string("%" .. spec, args[arg_idx])
          table.insert(result_parts, caml_ocaml_string_to_lua(formatted))
          arg_idx = arg_idx + 1
        end
      elseif conv == "c" then
        if arg_idx <= #args then
          local formatted = caml_format_char("%" .. spec, args[arg_idx])
          table.insert(result_parts, caml_ocaml_string_to_lua(formatted))
          arg_idx = arg_idx + 1
        end
      end
    else
      table.insert(result_parts, c)
      i = i + 1
    end
  end

  local output = table.concat(result_parts)
  caml_buffer_add_string(buffer, output)
end


-- Runtime: float
-- Lua_of_ocaml runtime support
-- Float operations and IEEE 754 support
--
-- Provides OCaml float operations with proper NaN/infinity handling

--Provides: caml_classify_float
function caml_classify_float(x)
  -- FP_nan = 4, FP_infinite = 3, FP_zero = 2, FP_subnormal = 1, FP_normal = 0
  if x ~= x then
    return 4  -- FP_nan
  end
  if x == math.huge or x == -math.huge then
    return 3  -- FP_infinite
  end
  if x == 0 then
    return 2  -- FP_zero
  end
  -- Lua doesn't distinguish subnormal from normal
  -- We approximate: very small numbers are subnormal
  local abs_x = math.abs(x)
  if abs_x < 2.2250738585072014e-308 then
    return 1  -- FP_subnormal
  end
  return 0  -- FP_normal
end


--Provides: caml_modf_float
function caml_modf_float(x)
  local int_part = math.floor(x)
  local frac_part = x - int_part
  return {int_part, frac_part}
end

--Provides: caml_ldexp_float
function caml_ldexp_float(x, exp)
  -- x * 2^exp
  return x * (2 ^ exp)
end

--Provides: caml_frexp_float
function caml_frexp_float(x)
  -- Extract mantissa and exponent: x = m * 2^e where 0.5 <= |m| < 1
  if x == 0 then
    return {0, 0}
  end
  if x ~= x then
    return {0/0, 0}  -- NAN
  end
  if x == math.huge or x == -math.huge then
    return {x, 0}
  end

  local exp = 0
  local mantissa = math.abs(x)

  -- Normalize to [0.5, 1)
  while mantissa >= 1 do
    mantissa = mantissa / 2
    exp = exp + 1
  end
  while mantissa < 0.5 and mantissa > 0 do
    mantissa = mantissa * 2
    exp = exp - 1
  end

  if x < 0 then
    mantissa = -mantissa
  end

  return {mantissa, exp}
end

--Provides: caml_copysign_float
function caml_copysign_float(x, y)
  local abs_x = math.abs(x)
  if y < 0 or (y == 0 and 1/y < 0) then
    return -abs_x
  else
    return abs_x
  end
end

--Provides: caml_signbit_float
function caml_signbit_float(x)
  -- Returns 1 if sign bit is set (negative), 0 otherwise
  if x < 0 or (x == 0 and 1/x < 0) then
    return 1
  else
    return 0
  end
end

--Provides: caml_nextafter_float
function caml_nextafter_float(x, y)
  -- Next representable float after x in direction of y
  if x == y then
    return x
  end
  if x ~= x or y ~= y then
    return 0/0  -- NAN
  end

  -- Simple approximation using epsilon
  local eps = 2.220446049250313e-16
  if x < y then
    if x >= 0 then
      return x + eps * math.abs(x)
    else
      return x + eps * math.abs(x)
    end
  else
    if x >= 0 then
      return x - eps * math.abs(x)
    else
      return x - eps * math.abs(x)
    end
  end
end


--Provides: caml_trunc_float
function caml_trunc_float(x)
  if x >= 0 then
    return math.floor(x)
  else
    return math.ceil(x)
  end
end

--Provides: caml_round_float
function caml_round_float(x)
  -- Round to nearest integer, halfway cases away from zero
  if x >= 0 then
    return math.floor(x + 0.5)
  else
    return math.ceil(x - 0.5)
  end
end


--Provides: caml_is_nan
function caml_is_nan(x)
  return x ~= x
end

--Provides: caml_is_infinite
function caml_is_infinite(x)
  return x == math.huge or x == -math.huge
end

--Provides: caml_is_finite
function caml_is_finite(x)
  return x == x and x ~= math.huge and x ~= -math.huge
end


--Provides: caml_float_compare
function caml_float_compare(x, y)
  -- OCaml-style comparison: NaN = NaN, NaN < other values
  if x ~= x and y ~= y then
    return 0  -- NaN = NaN
  end
  if x ~= x then
    return -1  -- NaN < y
  end
  if y ~= y then
    return 1  -- x > NaN
  end
  if x < y then
    return -1
  end
  if x > y then
    return 1
  end
  return 0
end

--Provides: caml_float_min
function caml_float_min(x, y)
  if x ~= x then return x end
  if y ~= y then return y end
  if x < y then return x else return y end
end

--Provides: caml_float_max
function caml_float_max(x, y)
  if x ~= x then return x end
  if y ~= y then return y end
  if x > y then return x else return y end
end


-- [0] = 254 (double_array_tag)
-- [1..n] = float values

--Provides: caml_floatarray_create
function caml_floatarray_create(size)
  local arr = {}
  arr[0] = 254  -- double_array_tag
  for i = 1, size do
    arr[i] = 0.0
  end
  return arr
end

--Provides: caml_floatarray_get
function caml_floatarray_get(arr, idx)
  return arr[idx + 1]
end

--Provides: caml_floatarray_set
function caml_floatarray_set(arr, idx, val)
  arr[idx + 1] = val
  return 0
end

--Provides: caml_floatarray_unsafe_get
function caml_floatarray_unsafe_get(arr, idx)
  return arr[idx + 1]
end

--Provides: caml_floatarray_unsafe_set
function caml_floatarray_unsafe_set(arr, idx, val)
  arr[idx + 1] = val
  return 0
end

--Provides: caml_floatarray_length
function caml_floatarray_length(arr)
  return #arr
end

--Provides: caml_floatarray_blit
function caml_floatarray_blit(src, src_pos, dst, dst_pos, len)
  for i = 0, len - 1 do
    dst[dst_pos + i + 1] = src[src_pos + i + 1]
  end
  return 0
end

--Provides: caml_floatarray_fill
function caml_floatarray_fill(arr, ofs, len, val)
  for i = 0, len - 1 do
    arr[ofs + i + 1] = val
  end
  return 0
end

--Provides: caml_floatarray_of_array
function caml_floatarray_of_array(arr)
  local farr = caml_floatarray_create(#arr)
  for i = 1, #arr do
    farr[i] = arr[i]
  end
  return farr
end

--Provides: caml_floatarray_to_array
function caml_floatarray_to_array(farr)
  local arr = {}
  arr[0] = 0  -- normal array tag
  for i = 1, #farr do
    arr[i] = farr[i]
  end
  return arr
end

--Provides: caml_floatarray_concat
function caml_floatarray_concat(arrays)
  local total_len = 0
  for i = 1, #arrays do
    total_len = total_len + #arrays[i]
  end

  local result = caml_floatarray_create(total_len)
  local pos = 1
  for i = 1, #arrays do
    local arr = arrays[i]
    for j = 1, #arr do
      result[pos] = arr[j]
      pos = pos + 1
    end
  end

  return result
end

--Provides: caml_floatarray_sub
function caml_floatarray_sub(arr, ofs, len)
  local result = caml_floatarray_create(len)
  for i = 0, len - 1 do
    result[i + 1] = arr[ofs + i + 1]
  end
  return result
end

--Provides: caml_floatarray_append
function caml_floatarray_append(arr1, arr2)
  local len1 = #arr1
  local len2 = #arr2
  local result = caml_floatarray_create(len1 + len2)

  for i = 1, len1 do
    result[i] = arr1[i]
  end
  for i = 1, len2 do
    result[len1 + i] = arr2[i]
  end

  return result
end


--Provides: caml_format_float
function caml_format_float(fmt, x)
  -- Simple float formatting
  if x ~= x then
    return "nan"
  end
  if x == math.huge then
    return "inf"
  end
  if x == -math.huge then
    return "-inf"
  end
  return string.format(fmt, x)
end

--Provides: caml_hexstring_of_float
function caml_hexstring_of_float(x)
  -- Hexadecimal float representation
  if x ~= x then
    return "nan"
  end
  if x == math.huge then
    return "infinity"
  end
  if x == -math.huge then
    return "-infinity"
  end
  if x == 0 then
    if 1/x < 0 then
      return "-0x0p+0"
    else
      return "0x0p+0"
    end
  end

  -- Extract sign, mantissa, exponent
  local sign = ""
  if x < 0 then
    sign = "-"
    x = -x
  end

  local exp = 0
  while x >= 2 do
    x = x / 2
    exp = exp + 1
  end
  while x < 1 do
    x = x * 2
    exp = exp - 1
  end

  -- Convert mantissa to hex
  local mantissa = math.floor(x * 0x10000000000000)
  local mantissa_hex = string.format("%x", mantissa)

  return string.format("%s0x%s.%sp%+d", sign,
    string.sub(mantissa_hex, 1, 1),
    string.sub(mantissa_hex, 2),
    exp)
end

--Provides: caml_float_of_string
function caml_float_of_string(s)
  -- Parse float from string
  if s == "nan" or s == "NaN" then
    return 0/0  -- NAN
  end
  if s == "inf" or s == "infinity" or s == "+inf" or s == "+infinity" then
    return math.huge  -- INFINITY
  end
  if s == "-inf" or s == "-infinity" then
    return -math.huge  -- NEG_INFINITY
  end

  local num = tonumber(s)
  if num == nil then
    error("invalid float string: " .. s)
  end
  return num
end


-- Runtime: fail
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- Exception Handling Module
--
-- This module provides OCaml exception handling for Lua.
-- OCaml exceptions are mapped to Lua error() and pcall().
-- Exception values are represented as blocks with tags.

-- Global exception registry
-- Stores predefined exception constructors
_G._OCAML.exceptions = _G._OCAML.exceptions or {}

--Provides: caml_register_exception
function caml_register_exception(name, tag, id)
  local exc = { tag = tag, [1] = name, [2] = id }
  _G._OCAML.exceptions[name] = exc
  return exc
end

--Provides: caml_get_exception
function caml_get_exception(name)
  return _G._OCAML.exceptions[name]
end

-- Predefined OCaml exceptions
-- These are registered lazily when first used

--Provides: caml_get_failure
--Requires: caml_register_exception
function caml_get_failure()
  if not _G._OCAML.exceptions.Failure then
    caml_register_exception("Failure", 248, -3)
  end
  return _G._OCAML.exceptions.Failure
end

--Provides: caml_get_invalid_argument
--Requires: caml_register_exception
function caml_get_invalid_argument()
  if not _G._OCAML.exceptions.Invalid_argument then
    caml_register_exception("Invalid_argument", 248, -4)
  end
  return _G._OCAML.exceptions.Invalid_argument
end

--Provides: caml_get_not_found
--Requires: caml_register_exception
function caml_get_not_found()
  if not _G._OCAML.exceptions.Not_found then
    caml_register_exception("Not_found", 248, -5)
  end
  return _G._OCAML.exceptions.Not_found
end

--Provides: caml_get_end_of_file
--Requires: caml_register_exception
function caml_get_end_of_file()
  if not _G._OCAML.exceptions.End_of_file then
    caml_register_exception("End_of_file", 248, -7)
  end
  return _G._OCAML.exceptions.End_of_file
end

--Provides: caml_get_division_by_zero
--Requires: caml_register_exception
function caml_get_division_by_zero()
  if not _G._OCAML.exceptions.Division_by_zero then
    caml_register_exception("Division_by_zero", 248, -8)
  end
  return _G._OCAML.exceptions.Division_by_zero
end

--Provides: caml_get_match_failure
--Requires: caml_register_exception
function caml_get_match_failure()
  if not _G._OCAML.exceptions.Match_failure then
    caml_register_exception("Match_failure", 248, -9)
  end
  return _G._OCAML.exceptions.Match_failure
end

--Provides: caml_get_sys_error
--Requires: caml_register_exception
function caml_get_sys_error()
  if not _G._OCAML.exceptions.Sys_error then
    caml_register_exception("Sys_error", 248, -11)
  end
  return _G._OCAML.exceptions.Sys_error
end

--Provides: caml_raise_constant
function caml_raise_constant(exc)
  error(exc, 0)
end

--Provides: caml_raise_with_arg
function caml_raise_with_arg(exc, arg)
  local exc_value = { tag = 0, [1] = exc, [2] = arg }
  error(exc_value, 0)
end

--Provides: caml_raise_with_args
function caml_raise_with_args(exc, args)
  local exc_value = { tag = 0, [1] = exc }
  for i, arg in ipairs(args) do
    exc_value[i + 1] = arg
  end
  error(exc_value, 0)
end

--Provides: caml_raise_with_string
--Requires: caml_raise_with_arg
function caml_raise_with_string(exc, msg)
  caml_raise_with_arg(exc, msg)
end

--Provides: caml_failwith
--Requires: caml_get_failure caml_raise_with_arg
function caml_failwith(msg)
  caml_raise_with_arg(caml_get_failure(), msg)
end

--Provides: caml_invalid_argument
--Requires: caml_get_invalid_argument caml_raise_with_arg
function caml_invalid_argument(msg)
  caml_raise_with_arg(caml_get_invalid_argument(), msg)
end

--Provides: caml_raise_not_found
--Requires: caml_get_not_found caml_raise_constant
function caml_raise_not_found()
  caml_raise_constant(caml_get_not_found())
end

--Provides: caml_raise_end_of_file
--Requires: caml_get_end_of_file caml_raise_constant
function caml_raise_end_of_file()
  caml_raise_constant(caml_get_end_of_file())
end

--Provides: caml_raise_zero_divide
--Requires: caml_get_division_by_zero caml_raise_constant
function caml_raise_zero_divide()
  caml_raise_constant(caml_get_division_by_zero())
end

--Provides: caml_raise_match_failure
--Requires: caml_get_match_failure caml_raise_with_arg
function caml_raise_match_failure(location)
  caml_raise_with_arg(caml_get_match_failure(), location)
end

--Provides: caml_raise_sys_error
--Requires: caml_get_sys_error caml_raise_with_arg
function caml_raise_sys_error(msg)
  caml_raise_with_arg(caml_get_sys_error(), msg)
end

--Provides: caml_is_exception
function caml_is_exception(val)
  if type(val) ~= "table" then
    return false
  end
  if val.tag == 248 then
    return true
  end
  if val.tag == 0 and type(val[1]) == "table" and val[1].tag == 248 then
    return true
  end
  return false
end

--Provides: caml_exception_name
function caml_exception_name(exc)
  if type(exc) ~= "table" then
    return "Unknown"
  end
  if exc.tag == 248 and type(exc[1]) == "string" then
    return exc[1]
  end
  if exc.tag == 0 and type(exc[1]) == "table" and exc[1].tag == 248 then
    return exc[1][1] or "Unknown"
  end
  return "Unknown"
end

--Provides: caml_exception_to_string
--Requires: caml_exception_name
function caml_exception_to_string(exc)
  local name = caml_exception_name(exc)
  if type(exc) ~= "table" then
    return name
  end
  if exc.tag == 0 and exc[2] and type(exc[2]) == "string" then
    return name .. "(" .. exc[2] .. ")"
  end
  return name
end

--Provides: caml_try_catch
function caml_try_catch(f, ...)
  local success, result = pcall(f, ...)
  return success, result
end

--Provides: caml_catch
function caml_catch(f, handler, ...)
  local success, result = pcall(f, ...)
  if success then
    return result
  else
    return handler(result)
  end
end

--Provides: caml_try_finally
function caml_try_finally(f, cleanup, ...)
  local success, result = pcall(f, ...)
  cleanup()
  if success then
    return result
  else
    error(result, 0)
  end
end

--Provides: caml_array_bound_error
--Requires: caml_invalid_argument
function caml_array_bound_error()
  caml_invalid_argument("index out of bounds")
end

--Provides: caml_string_bound_error
--Requires: caml_invalid_argument
function caml_string_bound_error()
  caml_invalid_argument("index out of bounds")
end

--Provides: caml_bytes_bound_error
--Requires: caml_invalid_argument
function caml_bytes_bound_error()
  caml_invalid_argument("index out of bounds")
end


-- Runtime: map
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_map_height
function caml_map_height(node)
  if not node then
    return 0
  end
  return node.height
end

--Provides: caml_map_create_node
--Requires: caml_map_height
function caml_map_create_node(key, value, left, right)
  return {
    key = key,
    value = value,
    left = left,
    right = right,
    height = 1 + math.max(caml_map_height(left), caml_map_height(right))
  }
end

--Provides: caml_map_balance_factor
--Requires: caml_map_height
function caml_map_balance_factor(node)
  if not node then
    return 0
  end
  return caml_map_height(node.left) - caml_map_height(node.right)
end

--Provides: caml_map_rotate_right
--Requires: caml_map_height
function caml_map_rotate_right(node)
  local left = node.left
  local left_right = left.right

  left.right = node
  node.left = left_right

  node.height = 1 + math.max(caml_map_height(node.left), caml_map_height(node.right))
  left.height = 1 + math.max(caml_map_height(left.left), caml_map_height(left.right))

  return left
end

--Provides: caml_map_rotate_left
--Requires: caml_map_height
function caml_map_rotate_left(node)
  local right = node.right
  local right_left = right.left

  right.left = node
  node.right = right_left

  node.height = 1 + math.max(caml_map_height(node.left), caml_map_height(node.right))
  right.height = 1 + math.max(caml_map_height(right.left), caml_map_height(right.right))

  return right
end

--Provides: caml_map_balance
--Requires: caml_map_balance_factor, caml_map_rotate_left, caml_map_rotate_right
function caml_map_balance(node)
  if not node then
    return nil
  end

  local bf = caml_map_balance_factor(node)

  if bf > 1 then
    if caml_map_balance_factor(node.left) < 0 then
      node.left = caml_map_rotate_left(node.left)
    end
    return caml_map_rotate_right(node)
  end

  if bf < -1 then
    if caml_map_balance_factor(node.right) > 0 then
      node.right = caml_map_rotate_right(node.right)
    end
    return caml_map_rotate_left(node)
  end

  return node
end

--Provides: caml_map_add_internal
--Requires: caml_map_create_node, caml_map_height, caml_map_balance
function caml_map_add_internal(cmp, key, value, node)
  if not node then
    return caml_map_create_node(key, value, nil, nil)
  end

  local c = cmp(key, node.key)

  if c == 0 then
    node.value = value
    return node
  elseif c < 0 then
    node.left = caml_map_add_internal(cmp, key, value, node.left)
  else
    node.right = caml_map_add_internal(cmp, key, value, node.right)
  end

  node.height = 1 + math.max(caml_map_height(node.left), caml_map_height(node.right))

  return caml_map_balance(node)
end

--Provides: caml_map_find_internal
function caml_map_find_internal(cmp, key, node)
  if not node then
    return nil
  end

  local c = cmp(key, node.key)

  if c == 0 then
    return node.value
  elseif c < 0 then
    return caml_map_find_internal(cmp, key, node.left)
  else
    return caml_map_find_internal(cmp, key, node.right)
  end
end

--Provides: caml_map_mem_internal
function caml_map_mem_internal(cmp, key, node)
  if not node then
    return false
  end

  local c = cmp(key, node.key)

  if c == 0 then
    return true
  elseif c < 0 then
    return caml_map_mem_internal(cmp, key, node.left)
  else
    return caml_map_mem_internal(cmp, key, node.right)
  end
end

--Provides: caml_map_min_node
function caml_map_min_node(node)
  if not node.left then
    return node
  end
  return caml_map_min_node(node.left)
end

--Provides: caml_map_remove_internal
--Requires: caml_map_min_node, caml_map_height, caml_map_balance
function caml_map_remove_internal(cmp, key, node)
  if not node then
    return nil
  end

  local c = cmp(key, node.key)

  if c < 0 then
    node.left = caml_map_remove_internal(cmp, key, node.left)
  elseif c > 0 then
    node.right = caml_map_remove_internal(cmp, key, node.right)
  else
    if not node.left then
      return node.right
    elseif not node.right then
      return node.left
    else
      local successor = caml_map_min_node(node.right)
      node.key = successor.key
      node.value = successor.value
      node.right = caml_map_remove_internal(cmp, successor.key, node.right)
    end
  end

  if not node then
    return nil
  end

  node.height = 1 + math.max(caml_map_height(node.left), caml_map_height(node.right))

  return caml_map_balance(node)
end

--Provides: caml_map_iter_internal
function caml_map_iter_internal(f, node)
  if not node then
    return
  end
  caml_map_iter_internal(f, node.left)
  f(node.key, node.value)
  caml_map_iter_internal(f, node.right)
end

--Provides: caml_map_fold_internal
function caml_map_fold_internal(f, node, acc)
  if not node then
    return acc
  end
  acc = caml_map_fold_internal(f, node.left, acc)
  acc = f(node.key, node.value, acc)
  acc = caml_map_fold_internal(f, node.right, acc)
  return acc
end

--Provides: caml_map_for_all_internal
function caml_map_for_all_internal(p, node)
  if not node then
    return true
  end
  return p(node.key, node.value) and caml_map_for_all_internal(p, node.left) and caml_map_for_all_internal(p, node.right)
end

--Provides: caml_map_exists_internal
function caml_map_exists_internal(p, node)
  if not node then
    return false
  end
  return p(node.key, node.value) or caml_map_exists_internal(p, node.left) or caml_map_exists_internal(p, node.right)
end

--Provides: caml_map_cardinal_internal
function caml_map_cardinal_internal(node)
  if not node then
    return 0
  end
  return 1 + caml_map_cardinal_internal(node.left) + caml_map_cardinal_internal(node.right)
end

--Provides: caml_map_map_values_internal
--Requires: caml_map_create_node
function caml_map_map_values_internal(f, node)
  if not node then
    return nil
  end
  return caml_map_create_node(
    node.key,
    f(node.value),
    caml_map_map_values_internal(f, node.left),
    caml_map_map_values_internal(f, node.right)
  )
end

--Provides: caml_map_mapi_internal
--Requires: caml_map_create_node
function caml_map_mapi_internal(f, node)
  if not node then
    return nil
  end
  return caml_map_create_node(
    node.key,
    f(node.key, node.value),
    caml_map_mapi_internal(f, node.left),
    caml_map_mapi_internal(f, node.right)
  )
end

--Provides: caml_map_filter_internal
--Requires: caml_map_create_node, caml_map_balance, caml_map_min_node, caml_map_remove_internal
function caml_map_filter_internal(cmp, p, node)
  if not node then
    return nil
  end

  local left = caml_map_filter_internal(cmp, p, node.left)
  local right = caml_map_filter_internal(cmp, p, node.right)

  if p(node.key, node.value) then
    local result = caml_map_create_node(node.key, node.value, left, right)
    return caml_map_balance(result)
  else
    if not left then
      return right
    elseif not right then
      return left
    else
      local min = caml_map_min_node(right)
      local new_right = caml_map_remove_internal(cmp, min.key, right)
      local result = caml_map_create_node(min.key, min.value, left, new_right)
      return caml_map_balance(result)
    end
  end
end


--Provides: caml_map_empty
function caml_map_empty(_unit)
  return nil
end

--Provides: caml_map_add
--Requires: caml_map_add_internal
function caml_map_add(cmp, key, value, map)
  return caml_map_add_internal(cmp, key, value, map)
end

--Provides: caml_map_find
--Requires: caml_map_find_internal, caml_raise_not_found
function caml_map_find(cmp, key, map)
  local result = caml_map_find_internal(cmp, key, map)
  if result == nil then
    caml_raise_not_found()
  end
  return result
end

--Provides: caml_map_find_opt
--Requires: caml_map_find_internal
function caml_map_find_opt(cmp, key, map)
  local result = caml_map_find_internal(cmp, key, map)
  if result == nil then
    return 0  -- None
  else
    return {tag = 0, [1] = result}  -- Some value
  end
end

--Provides: caml_map_remove
--Requires: caml_map_remove_internal
function caml_map_remove(cmp, key, map)
  return caml_map_remove_internal(cmp, key, map)
end

--Provides: caml_map_mem
--Requires: caml_map_mem_internal
function caml_map_mem(cmp, key, map)
  if caml_map_mem_internal(cmp, key, map) then
    return 1
  else
    return 0
  end
end

--Provides: caml_map_iter
--Requires: caml_map_iter_internal
function caml_map_iter(f, map)
  caml_map_iter_internal(f, map)
  return 0
end

--Provides: caml_map_fold
--Requires: caml_map_fold_internal
function caml_map_fold(f, map, init)
  return caml_map_fold_internal(f, map, init)
end

--Provides: caml_map_for_all
--Requires: caml_map_for_all_internal
function caml_map_for_all(p, map)
  if caml_map_for_all_internal(p, map) then
    return 1
  else
    return 0
  end
end

--Provides: caml_map_exists
--Requires: caml_map_exists_internal
function caml_map_exists(p, map)
  if caml_map_exists_internal(p, map) then
    return 1
  else
    return 0
  end
end

--Provides: caml_map_cardinal
--Requires: caml_map_cardinal_internal
function caml_map_cardinal(map)
  return caml_map_cardinal_internal(map)
end

--Provides: caml_map_is_empty
function caml_map_is_empty(map)
  if map == nil then
    return 1
  else
    return 0
  end
end

--Provides: caml_map_map
--Requires: caml_map_map_values_internal
function caml_map_map(f, map)
  return caml_map_map_values_internal(f, map)
end

--Provides: caml_map_mapi
--Requires: caml_map_mapi_internal
function caml_map_mapi(f, map)
  return caml_map_mapi_internal(f, map)
end

--Provides: caml_map_filter
--Requires: caml_map_filter_internal
function caml_map_filter(cmp, p, map)
  return caml_map_filter_internal(cmp, p, map)
end


-- Runtime: io
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- I/O operations for OCaml channels and file descriptors

--Provides: caml_sys_fds
caml_sys_fds = {}

--Provides: caml_init_sys_fds
--Requires: caml_sys_fds, MlChanid
-- Initialize standard file descriptors with MlChanid objects
-- Called lazily on first use
function caml_init_sys_fds()
  if not caml_sys_fds[0] then
    caml_sys_fds[0] = { file = io.stdin, flags = {rdonly = true}, offset = 0, chanid = MlChanid(0) }
    caml_sys_fds[1] = { file = io.stdout, flags = {wronly = true}, offset = 0, chanid = MlChanid(1) }
    caml_sys_fds[2] = { file = io.stderr, flags = {wronly = true}, offset = 0, chanid = MlChanid(2) }
  end
end

--Provides: caml_next_chanid
caml_next_chanid = 3

--Provides: caml_ml_channels
caml_ml_channels = {}

--Provides: caml_io_buffer_size
caml_io_buffer_size = 4096

--Provides: MlChanid
-- Return raw integers as channel IDs
-- In OCaml, small integers are immediate values (not heap-allocated)
-- They should preserve identity through the compiler
function MlChanid(id)
  return id
end

--Provides: caml_unwrap_chanid
-- Extract numeric channel ID
function caml_unwrap_chanid(chanid)
  -- If it's already a number, return it
  if type(chanid) == "number" then
    return chanid
  end
  -- If it's a table, try to extract channel ID
  -- HACK WORKAROUND: Printf/Format passes blocks where channel IDs should be.
  -- The block has [1]=channel_id, but it's often wrong (e.g., stdin instead of stdout).
  -- For now, assume it's stdout when called from output functions.
  if type(chanid) == "table" and type(chanid[1]) == "number" then
    local ch_id = chanid[1]
    -- HACK: If it's stdin (0) but we're trying to output, use stdout (1) instead
    if ch_id == 0 then
      return 1
    end
    return ch_id
  end
  -- Unknown type
  error(string.format("caml_unwrap_chanid: unexpected value (type=%s)", type(chanid)))
end

--
-- Channel Backend Interface
--
-- A backend is a table with the following methods:
--   read(n): Read up to n bytes, return string (or nil on EOF)
--   write(str): Write string, return number of bytes written
--   flush(): Flush any pending writes (optional)
--   seek(pos): Seek to position (optional, for seekable backends)
--   close(): Close the backend (optional)
--
-- Built-in backends: file, memory, custom
--

--
-- File descriptor operations
--

--Provides: caml_sys_open
--Requires: caml_sys_fds, caml_next_chanid
function caml_sys_open(name, flags, perms)
  -- Parse OCaml open flags
  -- flags is an OCaml list: 0 = [], [tag, [next]]
  local parsed_flags = {}
  while flags ~= 0 do
    local flag = flags[1]
    -- Flag meanings from OCaml:
    -- 0 = O_RDONLY, 1 = O_WRONLY, 2 = O_APPEND, 3 = O_CREAT,
    -- 4 = O_TRUNC, 5 = O_EXCL, 6 = O_BINARY, 7 = O_TEXT, 8 = O_NONBLOCK
    if flag == 0 then
      parsed_flags.rdonly = true
    elseif flag == 1 then
      parsed_flags.wronly = true
    elseif flag == 2 then
      parsed_flags.append = true
      parsed_flags.wronly = true
    elseif flag == 3 then
      parsed_flags.create = true
    elseif flag == 4 then
      parsed_flags.truncate = true
    elseif flag == 6 then
      parsed_flags.binary = true
    elseif flag == 7 then
      parsed_flags.text = true
    end
    flags = flags[2]
  end

  -- Determine Lua file open mode
  local mode
  if parsed_flags.rdonly and not parsed_flags.wronly then
    mode = parsed_flags.binary and "rb" or "r"
  elseif parsed_flags.wronly and not parsed_flags.rdonly then
    if parsed_flags.append then
      mode = parsed_flags.binary and "ab" or "a"
    else
      mode = parsed_flags.binary and "wb" or "w"
    end
  else
    -- Read/write mode
    mode = parsed_flags.binary and "r+b" or "r+"
    if parsed_flags.create then
      mode = parsed_flags.binary and "w+b" or "w+"
    end
  end

  -- Open the file
  local file, err = io.open(name, mode)
  if not file then
    error("caml_sys_open: " .. (err or "unknown error"))
  end

  -- Find available file descriptor number
  local fd = caml_next_chanid
  caml_next_chanid = caml_next_chanid + 1

  -- Store file descriptor
  caml_sys_fds[fd] = {
    file = file,
    flags = parsed_flags,
    offset = 0
  }

  return fd
end

--Provides: caml_sys_close
--Requires: caml_sys_fds
function caml_sys_close(fd)
  local fd_desc = caml_sys_fds[fd]
  if fd_desc and fd_desc.file then
    -- Don't close stdin/stdout/stderr
    if fd >= 3 then
      fd_desc.file:close()
    end
    caml_sys_fds[fd] = nil
  end
  return 0
end

--
-- Channel operations
--

--Provides: caml_ml_open_descriptor_in
--Requires: caml_sys_fds, caml_init_sys_fds, caml_ml_channels, caml_next_chanid, caml_unwrap_chanid, MlChanid
function caml_ml_open_descriptor_in(fd)
  caml_init_sys_fds()
  local fd_desc = caml_sys_fds[fd]
  if not fd_desc then
    error("caml_ml_open_descriptor_in: invalid file descriptor " .. tostring(fd))
  end

  -- Use chanid from fd_desc if available, otherwise generate new one
  local chanid_obj
  local chanid
  if fd_desc.chanid ~= nil then
    chanid_obj = fd_desc.chanid
    chanid = caml_unwrap_chanid(chanid_obj)
  else
    chanid = caml_next_chanid
    caml_next_chanid = caml_next_chanid + 1
    chanid_obj = MlChanid(chanid)
    fd_desc.chanid = chanid_obj
  end

  -- Create input channel
  local channel = {
    file = fd_desc.file,
    fd = fd,
    flags = fd_desc.flags,
    opened = true,
    out = false,
    buffer = "",
    buffer_pos = 1,
    offset = fd_desc.offset or 0
  }

  caml_ml_channels[chanid] = channel
  return chanid_obj
end

--Provides: caml_ml_open_descriptor_out
--Requires: caml_sys_fds, caml_init_sys_fds, caml_ml_channels, caml_next_chanid, caml_unwrap_chanid, MlChanid
function caml_ml_open_descriptor_out(fd)
  caml_init_sys_fds()
  local fd_desc = caml_sys_fds[fd]
  if not fd_desc then
    error("caml_ml_open_descriptor_out: invalid file descriptor " .. tostring(fd))
  end

  -- Use chanid from fd_desc if available, otherwise generate new one
  local chanid_obj
  local chanid
  if fd_desc.chanid ~= nil then
    chanid_obj = fd_desc.chanid
    chanid = caml_unwrap_chanid(chanid_obj)
  else
    chanid = caml_next_chanid
    caml_next_chanid = caml_next_chanid + 1
    chanid_obj = MlChanid(chanid)
    fd_desc.chanid = chanid_obj
  end

  -- Create output channel
  local channel = {
    file = fd_desc.file,
    fd = fd,
    flags = fd_desc.flags,
    opened = true,
    out = true,
    buffer = {},
    buffered = 1, -- 0 = unbuffered, 1 = buffered, 2 = line buffered
    offset = fd_desc.offset or 0
  }

  caml_ml_channels[chanid] = channel
  return chanid_obj
end

--Provides: caml_ml_open_descriptor_in_with_flags
--Requires: caml_ml_open_descriptor_in
function caml_ml_open_descriptor_in_with_flags(fd, flags)
  -- OCaml 5.1+: currently ignoring flags
  return caml_ml_open_descriptor_in(fd)
end

--Provides: caml_ml_open_descriptor_out_with_flags
--Requires: caml_ml_open_descriptor_out
function caml_ml_open_descriptor_out_with_flags(fd, flags)
  -- OCaml 5.1+: currently ignoring flags
  return caml_ml_open_descriptor_out(fd)
end

--Provides: caml_ml_close_channel
--Requires: caml_unwrap_chanid, caml_ml_flush, caml_sys_close, caml_ml_channels
function caml_ml_close_channel(chanid)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if chan and chan.opened then
    if chan.out then
      caml_ml_flush(chanid)
    end
    -- Don't close standard streams (stdin/stdout/stderr have fd 0, 1, 2)
    if not chan.fd or chan.fd >= 3 then
      chan.opened = false
      -- Close custom backend if it has a close method
      if chan.backend and chan.backend.close then
        chan.backend:close()
      end
      -- Close file descriptor if present (not for memory/custom channels)
      if chan.fd then
        caml_sys_close(chan.fd)
      end
    end
  end
  return 0
end

--Provides: caml_channel_descriptor
--Requires: caml_ml_channels
function caml_channel_descriptor(chanid)
  local chan = caml_ml_channels[chanid]
  if chan then
    return chan.fd
  end
  error("caml_channel_descriptor: invalid channel")
end

--
-- Input operations
--

--Provides: caml_ml_input_char
--Requires: caml_unwrap_chanid, caml_ml_channels
function caml_ml_input_char(chanid)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_ml_input_char: channel is closed")
  end

  -- Check buffer first
  if chan.buffer_pos <= #chan.buffer then
    local c = string.byte(chan.buffer, chan.buffer_pos)
    chan.buffer_pos = chan.buffer_pos + 1
    chan.offset = chan.offset + 1
    return c
  end

  -- Memory channel
  if chan.memory then
    if chan.pos > #chan.data then
      error("End_of_file")
    end
    local c = string.byte(chan.data, chan.pos)
    chan.pos = chan.pos + 1
    chan.offset = chan.offset + 1
    return c
  end

  -- Custom backend
  if chan.backend then
    local chunk = chan.backend:read(1)
    if not chunk or #chunk == 0 then
      error("End_of_file")
    end
    chan.offset = chan.offset + 1
    return string.byte(chunk, 1)
  end

  -- Read from file
  local c = chan.file:read(1)
  if not c then
    error("End_of_file")
  end

  chan.offset = chan.offset + 1
  return string.byte(c)
end

--Provides: caml_ml_input
--Requires: caml_unwrap_chanid, caml_ml_channels
function caml_ml_input(chanid, buf, offset, len)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_ml_input: channel is closed")
  end

  local bytes_read = 0

  -- Read from buffer first
  local buf_avail = #chan.buffer - chan.buffer_pos + 1
  if buf_avail > 0 then
    local to_read = math.min(len, buf_avail)
    local chunk = string.sub(chan.buffer, chan.buffer_pos, chan.buffer_pos + to_read - 1)
    -- Store in OCaml bytes buffer (table representation)
    for i = 1, to_read do
      buf[offset + i] = string.byte(chunk, i)
    end
    chan.buffer_pos = chan.buffer_pos + to_read
    bytes_read = to_read
    len = len - to_read
    offset = offset + to_read
  end

  -- Read more from file/memory/backend if needed
  if len > 0 then
    local chunk
    if chan.memory then
      -- Read from memory
      local available = #chan.data - chan.pos + 1
      if available > 0 then
        local to_read = math.min(len, available)
        chunk = string.sub(chan.data, chan.pos, chan.pos + to_read - 1)
        chan.pos = chan.pos + to_read
      end
    elseif chan.backend then
      -- Read from custom backend
      chunk = chan.backend:read(len)
    else
      -- Read from file
      chunk = chan.file:read(len)
    end

    if chunk then
      local chunk_len = #chunk
      for i = 1, chunk_len do
        buf[offset + i] = string.byte(chunk, i)
      end
      bytes_read = bytes_read + chunk_len
      chan.offset = chan.offset + chunk_len
    end
  end

  return bytes_read
end

--Provides: caml_ml_input_int
--Requires: caml_unwrap_chanid, caml_ml_input_char
function caml_ml_input_int(chanid)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_ml_input_int: channel is closed")
  end

  -- Read 4 bytes in big-endian order (Lua 5.1 compatible)
  local result = 0
  for i = 1, 4 do
    local b = caml_ml_input_char(chanid)
    result = result * 256 + b
  end

  return result
end

--Provides: caml_ml_input_scan_line
--Requires: caml_unwrap_chanid, caml_ml_channels
function caml_ml_input_scan_line(chanid)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_ml_input_scan_line: channel is closed")
  end

  -- Look for newline in buffer
  local newline_pos = string.find(chan.buffer, "\n", chan.buffer_pos, true)
  if newline_pos then
    return newline_pos - chan.buffer_pos + 1
  end

  -- Read more into buffer
  local chunk = chan.file:read("*l")
  if chunk then
    chan.buffer = string.sub(chan.buffer, chan.buffer_pos) .. chunk .. "\n"
    chan.buffer_pos = 1
    return #chan.buffer
  end

  -- No newline found, return remaining buffer size
  return -(#chan.buffer - chan.buffer_pos + 1)
end

--Provides: caml_input_value
--Requires: caml_ml_input, caml_marshal_from_bytes, caml_marshal_total_size, caml_raise_end_of_file, caml_ml_channels
function caml_input_value(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_input_value: channel is closed")
  end

  -- Read the 20-byte marshal header first
  local header_bytes = {}
  local header_size = 20
  local bytes_read = caml_ml_input(chanid, header_bytes, 0, header_size)

  if bytes_read < header_size then
    error("caml_input_value: truncated marshal header (expected 20 bytes, got " .. bytes_read .. ")")
  end

  -- Convert byte array to string for marshal functions
  -- caml_ml_input fills buf[offset+1] to buf[offset+len] with byte values
  local header_chars = {}
  for i = 1, header_size do
    header_chars[i] = string.char(header_bytes[i])
  end
  local header_str = table.concat(header_chars)

  -- Get total size (header + data) from the header
  local total_size = caml_marshal_total_size(header_str, 0)
  local data_size = total_size - header_size

  -- Read the remaining data
  local data_bytes = {}
  if data_size > 0 then
    bytes_read = caml_ml_input(chanid, data_bytes, 0, data_size)
    if bytes_read < data_size then
      error("caml_input_value: truncated marshal data (expected " .. data_size .. " bytes, got " .. bytes_read .. ")")
    end

    -- Convert data bytes to string
    local data_chars = {}
    for i = 1, data_size do
      data_chars[i] = string.char(data_bytes[i])
    end
    local data_str = table.concat(data_chars)

    -- Combine header and data
    local full_bytes = header_str .. data_str

    -- Unmarshal the value
    return caml_marshal_from_bytes(full_bytes, 0)
  else
    -- Only header, no data
    return caml_marshal_from_bytes(header_str, 0)
  end
end

--Provides: caml_input_value_to_outside_heap
--Requires: caml_input_value
-- Alias for compatibility (OCaml 5.0+)
function caml_input_value_to_outside_heap(chanid)
  return caml_input_value(chanid)
end

--
-- Output operations
--

--Provides: caml_ml_flush
--Requires: caml_unwrap_chanid, caml_ml_channels
function caml_ml_flush(chanid)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan then
    error("caml_ml_flush: invalid channel")
  end
  if not chan.opened then
    error("caml_ml_flush: channel is closed")
  end
  if not chan.out then
    return 0
  end

  -- For memory channels, buffer is already the destination
  if chan.memory then
    -- Nothing to flush - data is already in chan.buffer
    return 0
  end

  -- Flush buffer to file or custom backend
  if #chan.buffer > 0 then
    local str = table.concat(chan.buffer)
    if chan.backend then
      -- Custom backend
      local written = chan.backend:write(str)
      if chan.backend.flush then
        chan.backend:flush()
      end
      chan.offset = chan.offset + (written or #str)
    else
      -- File backend
      chan.file:write(str)
      chan.file:flush()
      chan.offset = chan.offset + #str
    end
    chan.buffer = {}
  end

  return 0
end

--Provides: caml_ml_output_char
--Requires: caml_unwrap_chanid, caml_ml_flush, caml_ml_channels
function caml_ml_output_char(chanid, c)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_ml_output_char: channel is closed")
  end

  local char = string.char(c)
  table.insert(chan.buffer, char)

  -- Flush if unbuffered
  if chan.buffered == 0 then
    caml_ml_flush(chanid)
  -- Line buffered: flush on newline
  elseif chan.buffered == 2 and c == 10 then
    caml_ml_flush(chanid)
  end

  return 0
end

--Provides: caml_ml_output
--Requires: caml_unwrap_chanid, caml_ml_flush, caml_ml_channels, caml_io_buffer_size
function caml_ml_output(chanid, str, offset, len)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_ml_output: channel is closed")
  end

  -- Extract substring (Lua strings are 1-based, OCaml offset is 0-based)
  local chunk = string.sub(str, offset + 1, offset + len)
  table.insert(chan.buffer, chunk)

  -- Handle buffering
  if chan.buffered == 0 then
    caml_ml_flush(chanid)
  elseif chan.buffered == 2 and string.find(chunk, "\n", 1, true) then
    caml_ml_flush(chanid)
  elseif chan.buffered == 1 and #table.concat(chan.buffer) >= caml_io_buffer_size then
    caml_ml_flush(chanid)
  end

  return 0
end

--Provides: caml_ml_output_bytes
--Requires: caml_unwrap_chanid, caml_ml_output
function caml_ml_output_bytes(chanid, bytes, offset, len)
  chanid = caml_unwrap_chanid(chanid)
  -- Convert bytes (table of byte values) to string
  local chars = {}
  for i = 1, len do
    chars[i] = string.char(bytes[offset + i])
  end
  local str = table.concat(chars)

  -- Use regular output
  return caml_ml_output(chanid, str, 0, len)
end

--Provides: caml_ml_output_int
--Requires: caml_unwrap_chanid, caml_ml_flush, caml_ml_channels
function caml_ml_output_int(chanid, i)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_ml_output_int: channel is closed")
  end

  -- Write 4 bytes in big-endian order (Lua 5.1 compatible)
  local function byte_at(val, shift)
    return math.floor(val / (2 ^ shift)) % 256
  end
  local bytes = {
    string.char(byte_at(i, 24)),
    string.char(byte_at(i, 16)),
    string.char(byte_at(i, 8)),
    string.char(i % 256)
  }
  table.insert(chan.buffer, table.concat(bytes))

  if chan.buffered == 0 then
    caml_ml_flush(chanid)
  end

  return 0
end

--Provides: caml_output_value
--Requires: caml_ml_output, caml_marshal_to_string, caml_ml_channels
function caml_output_value(chanid, v, flags)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_output_value: channel is closed")
  end

  if not chan.out then
    error("caml_output_value: channel is not an output channel")
  end

  -- Marshal the value to a string (includes header)
  local marshaled = caml_marshal_to_string(v, flags)

  -- Write the marshaled bytes to the channel
  caml_ml_output(chanid, marshaled, 0, #marshaled)
end

--
-- Channel positioning
--

--Provides: caml_ml_seek_in
--Requires: caml_unwrap_chanid, caml_ml_channels
function caml_ml_seek_in(chanid, pos)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_ml_seek_in: channel is closed")
  end

  chan.file:seek("set", pos)
  chan.offset = pos
  chan.buffer = ""
  chan.buffer_pos = 1
  return 0
end

--Provides: caml_ml_seek_in_64
--Requires: caml_unwrap_chanid, caml_ml_seek_in
function caml_ml_seek_in_64(chanid, pos)
  chanid = caml_unwrap_chanid(chanid)
  -- Lua numbers are 64-bit floats, should handle most cases
  return caml_ml_seek_in(chanid, pos)
end

--Provides: caml_ml_seek_out
--Requires: caml_unwrap_chanid, caml_ml_flush
function caml_ml_seek_out(chanid, pos)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened then
    error("caml_ml_seek_out: channel is closed")
  end

  caml_ml_flush(chanid)
  chan.file:seek("set", pos)
  chan.offset = pos
  return 0
end

--Provides: caml_ml_seek_out_64
--Requires: caml_unwrap_chanid, caml_ml_seek_out
function caml_ml_seek_out_64(chanid, pos)
  chanid = caml_unwrap_chanid(chanid)
  return caml_ml_seek_out(chanid, pos)
end

--Provides: caml_ml_pos_in
--Requires: caml_unwrap_chanid, caml_ml_channels
function caml_ml_pos_in(chanid)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan then
    error("caml_ml_pos_in: invalid channel")
  end

  -- Current position is offset minus unread buffer
  return chan.offset - (#chan.buffer - chan.buffer_pos + 1)
end

--Provides: caml_ml_pos_in_64
--Requires: caml_unwrap_chanid, caml_ml_pos_in
function caml_ml_pos_in_64(chanid)
  chanid = caml_unwrap_chanid(chanid)
  return caml_ml_pos_in(chanid)
end

--Provides: caml_ml_pos_out
--Requires: caml_unwrap_chanid, caml_ml_channels
function caml_ml_pos_out(chanid)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan then
    error("caml_ml_pos_out: invalid channel")
  end

  -- Current position is offset plus buffered data
  local buffered = 0
  for _, chunk in ipairs(chan.buffer) do
    buffered = buffered + #chunk
  end
  return chan.offset + buffered
end

--Provides: caml_ml_pos_out_64
--Requires: caml_unwrap_chanid, caml_ml_pos_out
function caml_ml_pos_out_64(chanid)
  chanid = caml_unwrap_chanid(chanid)
  return caml_ml_pos_out(chanid)
end

--Provides: caml_ml_channel_size
--Requires: caml_unwrap_chanid, caml_ml_channels
function caml_ml_channel_size(chanid)
  chanid = caml_unwrap_chanid(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan then
    error("caml_ml_channel_size: invalid channel")
  end

  local current = chan.file:seek()
  local size = chan.file:seek("end")
  chan.file:seek("set", current)
  return size
end

--Provides: caml_ml_channel_size_64
--Requires: caml_unwrap_chanid, caml_ml_channel_size
function caml_ml_channel_size_64(chanid)
  chanid = caml_unwrap_chanid(chanid)
  return caml_ml_channel_size(chanid)
end

--
-- Channel configuration
--

--Provides: caml_ml_set_binary_mode
--Requires: caml_ml_channels
function caml_ml_set_binary_mode(chanid, mode)
  local chan = caml_ml_channels[chanid]
  if chan then
    chan.flags.binary = (mode ~= 0)
    chan.flags.text = (mode == 0)
  end
  return 0
end

--Provides: caml_ml_is_binary_mode
--Requires: caml_ml_channels
function caml_ml_is_binary_mode(chanid)
  local chan = caml_ml_channels[chanid]
  if chan and chan.flags.binary then
    return 1
  end
  return 0
end

--Provides: caml_ml_set_channel_name
--Requires: caml_ml_channels
function caml_ml_set_channel_name(chanid, name)
  local chan = caml_ml_channels[chanid]
  if chan then
    chan.name = name
  end
  return 0
end

--Provides: caml_ml_out_channels_list
--Requires: caml_ml_channels
function caml_ml_out_channels_list()
  -- Return OCaml list of all open output channels
  local list = 0 -- empty list
  for chanid, chan in pairs(caml_ml_channels) do
    if chan.opened and chan.out then
      list = {chanid, list}
    end
  end
  return list
end

--Provides: caml_ml_is_buffered
--Requires: caml_ml_channels
function caml_ml_is_buffered(chanid)
  local chan = caml_ml_channels[chanid]
  if chan and chan.buffered and chan.buffered > 0 then
    return 1
  end
  return 0
end

--Provides: caml_ml_set_buffered
--Requires: caml_ml_flush
function caml_ml_set_buffered(chanid, v)
  local chan = caml_ml_channels[chanid]
  if chan then
    chan.buffered = v
    if v == 0 then
      caml_ml_flush(chanid)
    end
  end
  return 0
end

--
-- In-memory channels
--

--Provides: caml_ml_open_string_in
--Requires: caml_ml_channels, caml_next_chanid
function caml_ml_open_string_in(str)
  local chanid = caml_next_chanid
  caml_next_chanid = caml_next_chanid + 1

  local channel = {
    memory = true,
    opened = true,
    out = false,
    data = str,
    pos = 1,
    buffer = "",
    buffer_pos = 1,
    offset = 0
  }

  caml_ml_channels[chanid] = channel
  return chanid
end

--Provides: caml_ml_open_buffer_out
--Requires: caml_ml_channels, caml_next_chanid
function caml_ml_open_buffer_out()
  local chanid = caml_next_chanid
  caml_next_chanid = caml_next_chanid + 1

  local channel = {
    memory = true,
    opened = true,
    out = true,
    buffer = {},
    buffered = 1,
    offset = 0
  }

  caml_ml_channels[chanid] = channel
  return chanid
end

--Provides: caml_ml_buffer_contents
--Requires: caml_ml_flush, caml_ml_channels
function caml_ml_buffer_contents(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened or not chan.out or not chan.memory then
    error("caml_ml_buffer_contents: invalid channel")
  end

  -- Flush any pending data
  caml_ml_flush(chanid)

  -- Convert buffer to string
  return table.concat(chan.buffer)
end

--Provides: caml_ml_buffer_reset
--Requires: caml_ml_channels
function caml_ml_buffer_reset(chanid)
  local chan = caml_ml_channels[chanid]
  if not chan or not chan.opened or not chan.out or not chan.memory then
    error("caml_ml_buffer_reset: invalid channel")
  end

  chan.buffer = {}
  chan.offset = 0
end

--
-- Custom Channel Backends
--

--Provides: caml_ml_open_custom_in
--Requires: caml_ml_channels, caml_next_chanid
function caml_ml_open_custom_in(backend)
  local chanid = caml_next_chanid
  caml_next_chanid = caml_next_chanid + 1

  local channel = {
    backend = backend,
    opened = true,
    out = false,
    buffer = "",
    buffer_pos = 1,
    offset = 0
  }

  caml_ml_channels[chanid] = channel
  return chanid
end

--Provides: caml_ml_open_custom_out
--Requires: caml_ml_channels, caml_next_chanid
function caml_ml_open_custom_out(backend)
  local chanid = caml_next_chanid
  caml_next_chanid = caml_next_chanid + 1

  local channel = {
    backend = backend,
    opened = true,
    out = true,
    buffer = {},
    buffered = 1,
    offset = 0
  }

  caml_ml_channels[chanid] = channel
  return chanid
end



-- Runtime: stream
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

--Provides: caml_stream_raise_failure
function caml_stream_raise_failure()
  error("Stream.Failure")
end

--Provides: caml_stream_force
function caml_stream_force(stream)
  local data = stream.data
  if data.state == "thunk" then
    local func = data.func
    local result = func()

    if result == nil then
      data.state = "empty"
      data.func = nil
    else
      data.state = "cons"
      data.head = result.head
      data.tail = result.tail
      data.func = nil
    end
  end
  return data.state
end

--Provides: caml_stream_empty
function caml_stream_empty(_unit)
  return {
    data = {
      state = "empty"
    }
  }
end

--Provides: caml_stream_peek
--Requires: caml_stream_force
function caml_stream_peek(stream)
  local state = caml_stream_force(stream)
  if state == "empty" then
    return nil
  else
    return stream.data.head
  end
end

--Provides: caml_stream_next
--Requires: caml_stream_force caml_stream_raise_failure
function caml_stream_next(stream)
  local state = caml_stream_force(stream)
  if state == "empty" then
    caml_stream_raise_failure()
  end

  local head = stream.data.head
  local tail = stream.data.tail

  if tail then
    stream.data = tail.data
  else
    stream.data = { state = "empty" }
  end

  return head
end

--Provides: caml_stream_junk
--Requires: caml_stream_force caml_stream_raise_failure
function caml_stream_junk(stream)
  local state = caml_stream_force(stream)
  if state == "empty" then
    caml_stream_raise_failure()
  end

  local tail = stream.data.tail

  if tail then
    stream.data = tail.data
  else
    stream.data = { state = "empty" }
  end

  return 0
end

--Provides: caml_stream_npeek
--Requires: caml_stream_force
function caml_stream_npeek(n, stream)
  local result = {tag = 0}
  local current = stream
  local count = 0

  while count < n do
    local state = caml_stream_force(current)
    if state == "empty" then
      break
    end

    table.insert(result, current.data.head)
    count = count + 1

    current = current.data.tail
    if not current then
      break
    end
  end

  local ocaml_list = {tag = 0}
  for i = #result, 1, -1 do
    ocaml_list = {tag = 0, [1] = result[i], [2] = ocaml_list}
  end

  return ocaml_list
end

--Provides: caml_stream_is_empty
--Requires: caml_stream_force
function caml_stream_is_empty(stream)
  local state = caml_stream_force(stream)
  if state == "empty" then
    return 1
  else
    return 0
  end
end

--Provides: caml_stream_from
function caml_stream_from(func)
  local function thunk()
    local value = func()
    if value == nil then
      return nil
    else
      return {
        head = value,
        tail = caml_stream_from(func)
      }
    end
  end

  return {
    data = {
      state = "thunk",
      func = thunk
    }
  }
end

--Provides: caml_stream_of_list
--Requires: caml_stream_empty
function caml_stream_of_list(list)
  if list.tag == 0 and not list[1] then
    return caml_stream_empty(0)
  end

  local function thunk()
    if list.tag == 0 and not list[1] then
      return nil
    else
      return {
        head = list[1],
        tail = caml_stream_of_list(list[2] or {tag = 0})
      }
    end
  end

  return {
    data = {
      state = "thunk",
      func = thunk
    }
  }
end

--Provides: caml_stream_of_string
--Requires: caml_stream_from
function caml_stream_of_string(str)
  local pos = 1
  local len = #str

  local function generator()
    if pos > len then
      return nil
    end
    local char = str:byte(pos)
    pos = pos + 1
    return char
  end

  return caml_stream_from(generator)
end

--Provides: caml_stream_of_channel
--Requires: caml_stream_from caml_ml_input_char
function caml_stream_of_channel(chan)
  local function generator()
    local ok, result = pcall(caml_ml_input_char, chan)
    if ok then
      return result
    else
      return nil
    end
  end

  return caml_stream_from(generator)
end

--Provides: caml_stream_cons
function caml_stream_cons(head, tail)
  return {
    data = {
      state = "cons",
      head = head,
      tail = tail
    }
  }
end

--Provides: caml_stream_of_array
--Requires: caml_stream_from
function caml_stream_of_array(arr)
  local len = arr[0]
  local pos = 1

  local function generator()
    if pos > len then
      return nil
    end
    local value = arr[pos]
    pos = pos + 1
    return value
  end

  return caml_stream_from(generator)
end

--Provides: caml_stream_iter
--Requires: caml_stream_force
function caml_stream_iter(f, stream)
  while true do
    local state = caml_stream_force(stream)
    if state == "empty" then
      break
    end

    f(stream.data.head)

    local tail = stream.data.tail
    if tail then
      stream.data = tail.data
    else
      stream.data = { state = "empty" }
    end
  end

  return 0
end

--Provides: caml_stream_count
--Requires: caml_stream_force
function caml_stream_count(stream)
  local count = 0
  while true do
    local state = caml_stream_force(stream)
    if state == "empty" then
      break
    end
    count = count + 1

    local tail = stream.data.tail
    if tail then
      stream.data = tail.data
    else
      stream.data = { state = "empty" }
    end
  end
  return count
end


-- Runtime: lexing
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

--Provides: caml_lex_array
function caml_lex_array(s)
  local len = #s / 2
  local result = {}

  for i = 0, len - 1 do
    local lo = s[2 * i + 1]
    local hi = s[2 * i + 2]
    -- Lua 5.1 compatible: lo | (hi << 8)
    local val = lo + hi * 256
    if val >= 0x8000 then
      val = val - 0x10000
    end
    result[i + 1] = val
  end

  return result
end

--Provides: caml_lex_engine
--Requires: caml_lex_array
function caml_lex_engine(tbl, start_state, lexbuf)
  -- Inline TBL_BASE=1, TBL_BACKTRK=2, TBL_CHECK=5, TBL_TRANS=4, TBL_DEFAULT=3
  if not tbl.lex_default then
    tbl.lex_base = caml_lex_array(tbl[1])     -- TBL_BASE
    tbl.lex_backtrk = caml_lex_array(tbl[2])  -- TBL_BACKTRK
    tbl.lex_check = caml_lex_array(tbl[5])    -- TBL_CHECK
    tbl.lex_trans = caml_lex_array(tbl[4])    -- TBL_TRANS
    tbl.lex_default = caml_lex_array(tbl[3])  -- TBL_DEFAULT
  end

  local state = start_state
  local buffer = lexbuf[2]  -- LEX_BUFFER

  -- Inline LEX_LAST_POS=7, LEX_CURR_POS=6, LEX_START_POS=5, LEX_LAST_ACTION=8
  if state >= 0 then
    lexbuf[7] = lexbuf[6]  -- LEX_LAST_POS = LEX_CURR_POS
    lexbuf[5] = lexbuf[6]  -- LEX_START_POS = LEX_CURR_POS
    lexbuf[8] = -1         -- LEX_LAST_ACTION
  else
    state = -state - 1
  end

  while true do
    local base = tbl.lex_base[state + 1]
    if base < 0 then
      return -base - 1
    end

    local backtrk = tbl.lex_backtrk[state + 1]
    if backtrk >= 0 then
      lexbuf[7] = lexbuf[6]  -- LEX_LAST_POS = LEX_CURR_POS
      lexbuf[8] = backtrk    -- LEX_LAST_ACTION
    end

    -- Inline LEX_CURR_POS=6, LEX_BUFFER_LEN=3, LEX_EOF_REACHED=9
    local c
    if lexbuf[6] >= lexbuf[3] then  -- LEX_CURR_POS >= LEX_BUFFER_LEN
      if lexbuf[9] == 0 then        -- LEX_EOF_REACHED
        return -state - 1
      else
        c = 256  -- EOF pseudo-character
      end
    else
      c = buffer[lexbuf[6] + 1]  -- LEX_CURR_POS
      lexbuf[6] = lexbuf[6] + 1  -- LEX_CURR_POS
    end

    if tbl.lex_check[base + c + 1] == state then
      state = tbl.lex_trans[base + c + 1]
    else
      state = tbl.lex_default[state + 1]
    end

    if state < 0 then
      lexbuf[6] = lexbuf[7]  -- LEX_CURR_POS = LEX_LAST_POS
      if lexbuf[8] == -1 then  -- LEX_LAST_ACTION
        error("lexing: empty token")
      else
        return lexbuf[8]  -- LEX_LAST_ACTION
      end
    else
      if c == 256 then
        lexbuf[9] = 0  -- LEX_EOF_REACHED
      end
    end
  end
end

--Provides: caml_create_lexbuf_from_string
function caml_create_lexbuf_from_string(s)
  local buffer
  if type(s) == "string" then
    buffer = {string.byte(s, 1, -1)}
  else
    buffer = s
  end

  -- Inline: LEX_REFILL_BUF=1, LEX_BUFFER=2, LEX_BUFFER_LEN=3, LEX_ABS_POS=4,
  --         LEX_START_POS=5, LEX_CURR_POS=6, LEX_LAST_POS=7, LEX_LAST_ACTION=8,
  --         LEX_EOF_REACHED=9, LEX_MEM=10, LEX_START_P=11, LEX_CURR_P=12
  local lexbuf = {
    [1] = nil,           -- LEX_REFILL_BUF (not used for string)
    [2] = buffer,        -- LEX_BUFFER (input byte array)
    [3] = #buffer,       -- LEX_BUFFER_LEN
    [4] = 0,             -- LEX_ABS_POS
    [5] = 0,             -- LEX_START_POS
    [6] = 0,             -- LEX_CURR_POS
    [7] = 0,             -- LEX_LAST_POS
    [8] = -1,            -- LEX_LAST_ACTION
    [9] = 0,             -- LEX_EOF_REACHED
    [10] = {},           -- LEX_MEM
    [11] = {             -- LEX_START_P
      pos_fname = "",
      pos_lnum = 1,
      pos_bol = 0,
      pos_cnum = 0,
    },
    [12] = {             -- LEX_CURR_P
      pos_fname = "",
      pos_lnum = 1,
      pos_bol = 0,
      pos_cnum = 0,
    },
  }

  return lexbuf
end

--Provides: caml_lexbuf_refill_from_channel
--Requires: caml_ml_input
function caml_lexbuf_refill_from_channel(channel_id, lexbuf)
  local buf_size = 1024
  local buffer = {}
  local n = caml_ml_input(channel_id, buffer, 0, buf_size)

  if n == 0 then
    lexbuf[9] = 1  -- LEX_EOF_REACHED
    return 0
  end

  lexbuf[2] = buffer  -- LEX_BUFFER
  lexbuf[3] = n       -- LEX_BUFFER_LEN
  lexbuf[6] = 0       -- LEX_CURR_POS

  return n
end

--Provides: caml_create_lexbuf_from_channel
--Requires: caml_lexbuf_refill_from_channel
function caml_create_lexbuf_from_channel(channel_id)
  -- Inline: LEX_REFILL_BUF=1, LEX_BUFFER=2, LEX_BUFFER_LEN=3, LEX_ABS_POS=4,
  --         LEX_START_POS=5, LEX_CURR_POS=6, LEX_LAST_POS=7, LEX_LAST_ACTION=8,
  --         LEX_EOF_REACHED=9, LEX_MEM=10, LEX_START_P=11, LEX_CURR_P=12
  local lexbuf = {
    [1] = channel_id,    -- LEX_REFILL_BUF (store channel_id for refill)
    [2] = {},            -- LEX_BUFFER
    [3] = 0,             -- LEX_BUFFER_LEN
    [4] = 0,             -- LEX_ABS_POS
    [5] = 0,             -- LEX_START_POS
    [6] = 0,             -- LEX_CURR_POS
    [7] = 0,             -- LEX_LAST_POS
    [8] = -1,            -- LEX_LAST_ACTION
    [9] = 0,             -- LEX_EOF_REACHED
    [10] = {},           -- LEX_MEM
    [11] = {             -- LEX_START_P
      pos_fname = "",
      pos_lnum = 1,
      pos_bol = 0,
      pos_cnum = 0,
    },
    [12] = {             -- LEX_CURR_P
      pos_fname = "",
      pos_lnum = 1,
      pos_bol = 0,
      pos_cnum = 0,
    },
  }

  caml_lexbuf_refill_from_channel(channel_id, lexbuf)

  return lexbuf
end

--Provides: caml_lexeme
function caml_lexeme(lexbuf)
  local start_pos = lexbuf[5]  -- LEX_START_POS
  local curr_pos = lexbuf[6]   -- LEX_CURR_POS
  local buffer = lexbuf[2]     -- LEX_BUFFER
  local result = {}

  for i = start_pos + 1, curr_pos do
    result[#result + 1] = buffer[i]
  end

  return result
end

--Provides: caml_lexeme_string
--Requires: caml_lexeme
function caml_lexeme_string(lexbuf)
  local bytes = caml_lexeme(lexbuf)
  local chars = {}
  for i = 1, #bytes do
    chars[i] = string.char(bytes[i])
  end
  return table.concat(chars)
end

--Provides: caml_lexeme_start
function caml_lexeme_start(lexbuf)
  return lexbuf[5] + lexbuf[4]  -- LEX_START_POS + LEX_ABS_POS
end

--Provides: caml_lexeme_end
function caml_lexeme_end(lexbuf)
  return lexbuf[6] + lexbuf[4]  -- LEX_CURR_POS + LEX_ABS_POS
end

--Provides: caml_lexeme_start_p
function caml_lexeme_start_p(lexbuf)
  return lexbuf[11]  -- LEX_START_P
end

--Provides: caml_lexeme_end_p
function caml_lexeme_end_p(lexbuf)
  return lexbuf[12]  -- LEX_CURR_P
end

--Provides: caml_new_line
function caml_new_line(lexbuf)
  local curr_p = lexbuf[12]  -- LEX_CURR_P
  curr_p.pos_lnum = curr_p.pos_lnum + 1
  curr_p.pos_bol = lexbuf[6] + lexbuf[4]  -- LEX_CURR_POS + LEX_ABS_POS
  curr_p.pos_cnum = curr_p.pos_bol
end

--Provides: caml_lexeme_char
function caml_lexeme_char(lexbuf, n)
  local pos = lexbuf[5] + n  -- LEX_START_POS
  if pos < lexbuf[6] then    -- LEX_CURR_POS
    return lexbuf[2][pos + 1]  -- LEX_BUFFER
  else
    error("lexeme_char: index out of bounds")
  end
end

--Provides: caml_flush_lexbuf
function caml_flush_lexbuf(lexbuf)
  lexbuf[4] = lexbuf[4] + lexbuf[6]  -- LEX_ABS_POS = LEX_ABS_POS + LEX_CURR_POS
  lexbuf[6] = 0   -- LEX_CURR_POS
  lexbuf[5] = 0   -- LEX_START_POS
  lexbuf[7] = 0   -- LEX_LAST_POS
  lexbuf[2] = {}  -- LEX_BUFFER
  lexbuf[3] = 0   -- LEX_BUFFER_LEN
end


-- Runtime: parsing
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


-- Global parser trace flag (accessible via caml_set_parser_trace)
caml_parser_trace_flag = false

--Provides: caml_parse_engine
--Requires: caml_lex_array
function caml_parse_engine(tables, env, cmd, arg)
  -- Inline TBL_* constants: DEFRED=6, SINDEX=8, CHECK=13, RINDEX=9, TABLE=12, LEN=5, LHS=4, GINDEX=10, DGOTO=7
  if not tables.dgoto then
    tables.defred = caml_lex_array(tables[6])   -- TBL_DEFRED
    tables.sindex = caml_lex_array(tables[8])   -- TBL_SINDEX
    tables.check = caml_lex_array(tables[13])   -- TBL_CHECK
    tables.rindex = caml_lex_array(tables[9])   -- TBL_RINDEX
    tables.table = caml_lex_array(tables[12])   -- TBL_TABLE
    tables.len = caml_lex_array(tables[5])      -- TBL_LEN
    tables.lhs = caml_lex_array(tables[4])      -- TBL_LHS
    tables.gindex = caml_lex_array(tables[10])  -- TBL_GINDEX
    tables.dgoto = caml_lex_array(tables[7])    -- TBL_DGOTO
  end

  local res = 0
  local n, n1, n2, state1

  -- Inline ENV_* constants: SP=14, STATE=15, ERRFLAG=16
  local sp = env[14]      -- ENV_SP
  local state = env[15]   -- ENV_STATE
  local errflag = env[16] -- ENV_ERRFLAG

  local continue = true
  while continue do
    continue = false  -- Will be set to true to continue loop

    if cmd == 0 then  -- START
      state = 0
      errflag = 0
      cmd = 6  -- LOOP
      continue = true
    elseif cmd == 6 then  -- LOOP
      n = tables.defred[state + 1]
      if n ~= 0 then
        cmd = 10  -- REDUCE
        continue = true
      elseif env[7] >= 0 then  -- ENV_CURR_CHAR
        cmd = 7  -- TESTSHIFT
        continue = true
      else
        res = 0  -- READ_TOKEN
        break
      end
    elseif cmd == 1 then  -- TOKEN_READ
      -- Inline TBL_TRANSL_BLOCK=3, TBL_TRANSL_CONST=2, ENV_CURR_CHAR=7, ENV_LVAL=8
      if type(arg) == "table" and arg.tag ~= nil then
        env[7] = tables[3][arg.tag + 2]  -- ENV_CURR_CHAR = TBL_TRANSL_BLOCK
        env[8] = arg[1]                  -- ENV_LVAL
      else
        env[7] = tables[2][arg + 2]  -- ENV_CURR_CHAR = TBL_TRANSL_CONST
        env[8] = 0                   -- ENV_LVAL
      end
      cmd = 7  -- TESTSHIFT
      continue = true
    elseif cmd == 7 then  -- TESTSHIFT
      n1 = tables.sindex[state + 1]
      n2 = n1 + env[7]  -- ENV_CURR_CHAR
      if n1 ~= 0 and n2 >= 0 and n2 <= tables[11] and  -- TBL_TABLESIZE
         tables.check[n2 + 1] == env[7] then  -- ENV_CURR_CHAR
        cmd = 8  -- SHIFT
        continue = true
      else
        n1 = tables.rindex[state + 1]
        n2 = n1 + env[7]  -- ENV_CURR_CHAR
        if n1 ~= 0 and n2 >= 0 and n2 <= tables[11] and  -- TBL_TABLESIZE
           tables.check[n2 + 1] == env[7] then  -- ENV_CURR_CHAR
          n = tables.table[n2 + 1]
          cmd = 10  -- REDUCE
          continue = true
        elseif errflag <= 0 then
          res = 5  -- CALL_ERROR_FUNCTION
          break
        else
          cmd = 5  -- ERROR_DETECTED
          continue = true
        end
      end
    elseif cmd == 5 then  -- ERROR_DETECTED
      if errflag < 3 then
        errflag = 3
        local error_loop = true
        while error_loop do
          state1 = env[1][sp + 1]  -- ENV_S_STACK
          n1 = tables.sindex[state1 + 1]
          n2 = n1 + 256  -- ERRCODE
          if n1 ~= 0 and n2 >= 0 and n2 <= tables[11] and  -- TBL_TABLESIZE
             tables.check[n2 + 1] == 256 then  -- ERRCODE
            cmd = 9  -- SHIFT_RECOVER
            error_loop = false
            continue = true
          else
            if sp <= env[6] then  -- ENV_STACKBASE
              env[14] = sp      -- ENV_SP
              env[15] = state   -- ENV_STATE
              env[16] = errflag -- ENV_ERRFLAG
              return 1  -- RAISE_PARSE_ERROR
            end
            sp = sp - 1
          end
        end
      else
        if env[7] == 0 then  -- ENV_CURR_CHAR
          env[14] = sp      -- ENV_SP
          env[15] = state   -- ENV_STATE
          env[16] = errflag -- ENV_ERRFLAG
          return 1  -- RAISE_PARSE_ERROR
        end
        env[7] = -1  -- ENV_CURR_CHAR
        cmd = 6  -- LOOP
        continue = true
      end
    elseif cmd == 8 then  -- SHIFT
      env[7] = -1  -- ENV_CURR_CHAR
      if errflag > 0 then
        errflag = errflag - 1
      end
      cmd = 9  -- SHIFT_RECOVER
      continue = true
    elseif cmd == 9 then  -- SHIFT_RECOVER
      state = tables.table[n2 + 1]
      sp = sp + 1
      if sp >= env[5] then  -- ENV_STACKSIZE
        res = 2  -- GROW_STACKS_1
        break
      end
      cmd = 2  -- STACKS_GROWN_1
      continue = true
    elseif cmd == 2 then  -- STACKS_GROWN_1
      -- Inline ENV_S_STACK=1, ENV_V_STACK=2, ENV_SYMB_START_STACK=3, ENV_SYMB_END_STACK=4, ENV_LVAL=8, ENV_SYMB_START=9, ENV_SYMB_END=10
      env[1][sp + 1] = state   -- ENV_S_STACK
      env[2][sp + 1] = env[8]  -- ENV_V_STACK = ENV_LVAL
      env[3][sp + 1] = env[9]  -- ENV_SYMB_START_STACK = ENV_SYMB_START
      env[4][sp + 1] = env[10] -- ENV_SYMB_END_STACK = ENV_SYMB_END
      cmd = 6  -- LOOP
      continue = true
    elseif cmd == 10 then  -- REDUCE
      local m = tables.len[n + 1]
      env[11] = sp  -- ENV_ASP
      env[13] = n   -- ENV_RULE_NUMBER
      env[12] = m   -- ENV_RULE_LEN
      sp = sp - m + 1
      m = tables.lhs[n + 1]
      state1 = env[1][sp + 1]  -- ENV_S_STACK
      n1 = tables.gindex[m + 1]
      n2 = n1 + state1
      if n1 ~= 0 and n2 >= 0 and n2 <= tables[11] and  -- TBL_TABLESIZE
         tables.check[n2 + 1] == state1 then
        state = tables.table[n2 + 1]
      else
        state = tables.dgoto[m + 1]
      end
      if sp >= env[5] then  -- ENV_STACKSIZE
        res = 3  -- GROW_STACKS_2
        break
      end
      cmd = 3  -- STACKS_GROWN_2
      continue = true
    elseif cmd == 3 then  -- STACKS_GROWN_2
      res = 4  -- COMPUTE_SEMANTIC_ACTION
      break
    elseif cmd == 4 then  -- SEMANTIC_ACTION_COMPUTED
      env[1][sp + 1] = state  -- ENV_S_STACK
      env[2][sp + 1] = arg    -- ENV_V_STACK
      local asp = env[11]     -- ENV_ASP
      env[4][sp + 1] = env[4][asp + 1]  -- ENV_SYMB_END_STACK
      if sp > asp then
        env[3][sp + 1] = env[4][asp + 1]  -- ENV_SYMB_START_STACK = ENV_SYMB_END_STACK
      end
      cmd = 6  -- LOOP
      continue = true
    else
      env[14] = sp      -- ENV_SP
      env[15] = state   -- ENV_STATE
      env[16] = errflag -- ENV_ERRFLAG
      return 1  -- RAISE_PARSE_ERROR
    end
  end

  env[14] = sp      -- ENV_SP
  env[15] = state   -- ENV_STATE
  env[16] = errflag -- ENV_ERRFLAG
  return res
end

--Provides: caml_set_parser_trace
function caml_set_parser_trace(bool)
  local oldflag = caml_parser_trace_flag
  caml_parser_trace_flag = bool
  return oldflag
end

--Provides: caml_create_parser_env
function caml_create_parser_env(stacksize)
  local size = stacksize or 100

  -- Inline ENV_* constants: S_STACK=1, V_STACK=2, SYMB_START_STACK=3, SYMB_END_STACK=4, STACKSIZE=5,
  -- STACKBASE=6, CURR_CHAR=7, LVAL=8, SYMB_START=9, SYMB_END=10, ASP=11, RULE_LEN=12, RULE_NUMBER=13,
  -- SP=14, STATE=15, ERRFLAG=16
  local env = {
    [1] = {},   -- ENV_S_STACK
    [2] = {},   -- ENV_V_STACK
    [3] = {},   -- ENV_SYMB_START_STACK
    [4] = {},   -- ENV_SYMB_END_STACK
    [5] = size, -- ENV_STACKSIZE
    [6] = 0,    -- ENV_STACKBASE
    [7] = -1,   -- ENV_CURR_CHAR
    [8] = 0,    -- ENV_LVAL
    [9] = 0,    -- ENV_SYMB_START
    [10] = 0,   -- ENV_SYMB_END
    [11] = 0,   -- ENV_ASP
    [12] = 0,   -- ENV_RULE_LEN
    [13] = 0,   -- ENV_RULE_NUMBER
    [14] = 0,   -- ENV_SP
    [15] = 0,   -- ENV_STATE
    [16] = 0,   -- ENV_ERRFLAG
  }

  return env
end

--Provides: caml_grow_parser_stacks
function caml_grow_parser_stacks(env, new_size)
  env[5] = new_size  -- ENV_STACKSIZE
end

--Provides: caml_parser_rule_info
function caml_parser_rule_info(env)
  return env[13], env[12]  -- ENV_RULE_NUMBER, ENV_RULE_LEN
end

--Provides: caml_parser_stack_value
function caml_parser_stack_value(env, offset)
  local asp = env[11]  -- ENV_ASP
  return env[2][asp + offset + 1]  -- ENV_V_STACK
end

--Provides: caml_parser_symb_start
function caml_parser_symb_start(env, offset)
  local asp = env[11]  -- ENV_ASP
  return env[3][asp + offset + 1]  -- ENV_SYMB_START_STACK
end

--Provides: caml_parser_symb_end
function caml_parser_symb_end(env, offset)
  local asp = env[11]  -- ENV_ASP
  return env[4][asp + offset + 1]  -- ENV_SYMB_END_STACK
end


-- Runtime: effect
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- Effect handlers (OCaml 5.x) using Lua coroutines
--
-- Maps OCaml effect handlers to Lua coroutines with fiber stacks.
-- This provides delimited continuations and algebraic effects.
--
-- Design:
-- - Fibers are represented as Lua coroutines
-- - Fiber stack tracks parent-child relationships
-- - Continuations are reified as fiber references
-- - Effect handlers are triples: {retc, exnc, effc}
--
-- Execution model:
-- - Current fiber executes with a low-level continuation
-- - When effect is performed, fiber yields to parent with effect value
-- - Parent's effect handler processes the effect
-- - Continuation can be resumed to return to child fiber

--
-- Fiber Stack Structure
--
-- Each fiber has:
-- - k: low-level continuation (Lua function)
-- - x: exception handler stack
-- - h: handler triple {retc, exnc, effc}
-- - e: parent fiber (enclosing stack)
-- - co: Lua coroutine (optional, for fiber)
--

--Provides: caml_current_stack
caml_current_stack = {
  k = 0,      -- low-level continuation
  x = 0,      -- exception stack
  h = 0,      -- handlers {retc, exnc, effc}
  e = 0       -- enclosing (parent) fiber
}

--
-- Stack Management
--

--Provides: save_stack
--Requires: caml_current_stack
function save_stack()
  return {
    k = caml_current_stack.k,
    x = caml_current_stack.x,
    h = caml_current_stack.h,
    e = caml_current_stack.e
  }
end

--Provides: restore_stack
--Requires: caml_current_stack
function restore_stack(stack)
  caml_current_stack.k = stack.k
  caml_current_stack.x = stack.x
  caml_current_stack.h = stack.h
  caml_current_stack.e = stack.e
end

--Provides: get_current_stack
--Requires: caml_current_stack
function get_current_stack()
  return caml_current_stack
end

--
-- Exception Handlers
--

--Provides: caml_push_trap
--Requires: caml_current_stack
function caml_push_trap(handler)
  caml_current_stack.x = {h = handler, t = caml_current_stack.x}
end

--Provides: caml_pop_trap
--Requires: caml_current_stack
function caml_pop_trap()
  if not caml_current_stack.x or caml_current_stack.x == 0 then
    return function(x)
      error(x)
    end
  end
  local h = caml_current_stack.x.h
  caml_current_stack.x = caml_current_stack.x.t
  return h
end

--
-- Fiber Management
--

--Provides: caml_pop_fiber
--Requires: caml_current_stack
function caml_pop_fiber()
  local parent = caml_current_stack.e
  caml_current_stack.e = 0
  caml_current_stack = parent
  return parent.k
end

--Provides: caml_alloc_stack
--Requires: caml_alloc_stack_call, caml_current_stack
-- Allocate new fiber with handlers
-- hv: value handler (continuation for normal return)
-- hx: exception handler
-- hf: effect handler
function caml_alloc_stack(hv, hx, hf)
  local handlers = {hv, hx, hf}

  -- Handler wrappers that call handlers in parent fiber
  local function hval_wrapper(x)
    -- Call hv in parent fiber
    local f = caml_current_stack.h[1]
    return caml_alloc_stack_call(f, x)
  end

  local function hexn_wrapper(e)
    -- Call hx in parent fiber
    local f = caml_current_stack.h[2]
    return caml_alloc_stack_call(f, e)
  end

  return {
    k = hval_wrapper,
    x = {h = hexn_wrapper, t = 0},
    h = handlers,
    e = 0
  }
end

--Provides: caml_alloc_stack_call
--Requires: caml_pop_fiber
-- Call function in parent fiber context
function caml_alloc_stack_call(f, x)
  local args = {x, caml_pop_fiber()}
  return f(table.unpack(args))
end

--Provides: caml_alloc_stack_disabled
-- Stub for when effects are disabled
function caml_alloc_stack_disabled()
  return 0
end

--
-- Continuation Management
--

--Provides: caml_continuation_tag
caml_continuation_tag = 245

--Provides: make_continuation
--Requires: caml_continuation_tag
function make_continuation(stack, last)
  return {tag = caml_continuation_tag, stack, last}
end

--Provides: caml_continuation_use_noexc
-- Use continuation (one-shot: clears the continuation)
function caml_continuation_use_noexc(cont)
  local stack = cont[1]
  cont[1] = 0  -- Mark as used
  return stack
end

--Provides: caml_continuation_use_and_update_handler_noexc
--Requires: caml_continuation_use_noexc
-- Use continuation and update its handlers
function caml_continuation_use_and_update_handler_noexc(cont, hval, hexn, heff)
  local stack = caml_continuation_use_noexc(cont)
  if stack == 0 then
    return stack
  end
  local last = cont[2]
  last.h[1] = hval
  last.h[2] = hexn
  last.h[3] = heff
  return stack
end

--
-- Effect Operations
--

-- Exception for unhandled effects
local function make_unhandled_effect_exn(eff)
  -- Try to find registered Unhandled exception
  -- Fallback to generic exception
  return {
    tag = 248,
    "Effect.Unhandled",
    eff
  }
end

--Provides: caml_raise_unhandled
-- Raise unhandled effect exception
function caml_raise_unhandled(eff)
  error(make_unhandled_effect_exn(eff))
end

--Provides: caml_perform_effect
--Requires: make_continuation, caml_pop_fiber, caml_current_stack
-- Perform an effect
-- eff: the effect value
-- k0: current continuation
function caml_perform_effect(eff, k0)
  if caml_current_stack.e == 0 then
    -- No effect handler installed
    error(make_unhandled_effect_exn(eff))
  end

  -- Get current effect handler
  local handler = caml_current_stack.h[3]
  local last_fiber = caml_current_stack
  last_fiber.k = k0

  -- Create continuation
  local cont = make_continuation(last_fiber, last_fiber)

  -- Move to parent fiber and execute effect handler
  local k1 = caml_pop_fiber()

  -- Call effect handler with effect, continuation, and parent continuation
  return handler(eff, cont, last_fiber, k1)
end

--Provides: caml_reperform_effect
--Requires: caml_pop_fiber, caml_continuation_use_noexc, caml_resume_stack, caml_current_stack
-- Re-perform an effect (for effect forwarding)
function caml_reperform_effect(eff, cont, last, k0)
  if caml_current_stack.e == 0 then
    -- No effect handler installed
    local stack = caml_continuation_use_noexc(cont)
    caml_resume_stack(stack, last, k0)
    error(make_unhandled_effect_exn(eff))
  end

  -- Get current effect handler
  local handler = caml_current_stack.h[3]
  local last_fiber = caml_current_stack
  last_fiber.k = k0
  last.e = last_fiber
  cont[2] = last_fiber

  -- Move to parent fiber and execute effect handler
  local k1 = caml_pop_fiber()

  return handler(eff, cont, last_fiber, k1)
end

--
-- Continuation Resume
--

--Provides: caml_resume_stack
--Requires: caml_current_stack
function caml_resume_stack(stack, last, k)
  if not stack or stack == 0 then
    error("Effect.Continuation_already_resumed")
  end

  if last == 0 then
    last = stack
    -- Find deepest fiber
    while last.e ~= 0 do
      last = last.e
    end
  end

  caml_current_stack.k = k
  last.e = caml_current_stack
  caml_current_stack = stack
  return stack.k
end

--Provides: caml_resume
--Requires: save_stack, restore_stack, caml_resume_stack, caml_current_stack
-- High-level resume function
function caml_resume(f, arg, stack, last)
  local saved_caml_current_stack = save_stack()

  local success, result = pcall(function()
    caml_current_stack = {k = 0, x = 0, h = 0, e = 0}

    local k = caml_resume_stack(stack, last, function(x)
      return x
    end)

    -- Call function with argument and continuation
    return f(arg, k)
  end)

  restore_stack(saved_caml_current_stack)

  if not success then
    error(result)
  end

  return result
end

--
-- Coroutine Integration
--

-- Wrap function in coroutine for effect handling
-- Helper function for testing
function with_coroutine(f)
  return coroutine.create(function(...)
    return f(...)
  end)
end

-- Yield current fiber (for cooperative multitasking)
-- Helper function for testing
function fiber_yield(value)
  if caml_current_stack.e == 0 then
    -- No parent fiber, can't yield
    return value
  end

  -- Save state and yield to parent
  return coroutine.yield(value)
end

-- Resume a fiber coroutine
-- Helper function for testing
function fiber_resume(co, value)
  if coroutine.status(co) == "dead" then
    error("Cannot resume dead fiber")
  end

  local success, result = coroutine.resume(co, value)
  if not success then
    error(result)
  end

  return result
end

--
-- Effect Handler Utilities
--

-- Check if effects are supported
-- Helper function for testing
function effects_supported()
  return true  -- Lua coroutines provide necessary support
end

--Provides: caml_get_continuation_callstack
-- Get continuation callstack (for debugging)
function caml_get_continuation_callstack()
  -- Lua doesn't provide detailed callstack for continuations
  -- Return empty list
  return {tag = 0}  -- Empty OCaml list
end

--
-- Condition Variables (for Stdlib.Condition)
--

--Provides: caml_ml_condition_new
function caml_ml_condition_new()
  return {condition = 1}
end

--Provides: caml_ml_condition_wait
function caml_ml_condition_wait()
  return 0
end

--Provides: caml_ml_condition_broadcast
function caml_ml_condition_broadcast()
  return 0
end

--Provides: caml_ml_condition_signal
function caml_ml_condition_signal()
  return 0
end

--
-- Error Handling
--

--Provides: jsoo_effect_not_supported
-- Raise "not supported" error
function jsoo_effect_not_supported()
  error("Effect handlers are not supported")
end


-- Runtime: domain
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- OCaml 5.0+ Domain and Atomic Operations
--
-- Lua is single-threaded, so atomic operations don't need actual atomic semantics.
-- These are simple implementations that provide the correct interface.

--Provides: caml_domain_dls
caml_domain_dls = {tag = 0}

--Provides: caml_domain_dls_set
--Requires: caml_domain_dls
function caml_domain_dls_set(a)
  caml_domain_dls = a
end

--Provides: caml_domain_dls_compare_and_set
--Requires: caml_domain_dls
function caml_domain_dls_compare_and_set(old, n)
  if caml_domain_dls ~= old then
    return 0
  end
  caml_domain_dls = n
  return 1
end

--Provides: caml_domain_dls_get
--Requires: caml_domain_dls
function caml_domain_dls_get(_unit)
  return caml_domain_dls
end

--Provides: caml_atomic_load
function caml_atomic_load(ref)
  -- Atomic references are blocks with tag 0: {0, value}
  -- With new array representation, ref[1] = tag, ref[2] = value
  return ref[2]
end

--Provides: caml_atomic_load_field
function caml_atomic_load_field(b, i)
  -- Fields are at index i+2 (1-indexed array, tag at index 1)
  return b[i + 2]
end

--Provides: caml_atomic_cas
function caml_atomic_cas(ref, o, n)
  -- Compare-and-swap on ref[2] (the value, not the tag)
  if ref[2] == o then
    ref[2] = n
    return 1
  end
  return 0
end

--Provides: caml_atomic_cas_field
function caml_atomic_cas_field(b, i, o, n)
  -- Field at index i+2 (skip tag at index 1)
  if b[i + 2] == o then
    b[i + 2] = n
    return 1
  end
  return 0
end

--Provides: caml_atomic_fetch_add
function caml_atomic_fetch_add(ref, i)
  -- Fetch-and-add on ref[2] (the value)
  local old = ref[2]
  ref[2] = ref[2] + i
  return old
end

--Provides: caml_atomic_fetch_add_field
function caml_atomic_fetch_add_field(b, i, n)
  -- Field at index i+2
  local old = b[i + 2]
  b[i + 2] = b[i + 2] + n
  return old
end

--Provides: caml_atomic_exchange
function caml_atomic_exchange(ref, v)
  -- Exchange value at ref[2]
  local r = ref[2]
  ref[2] = v
  return r
end

--Provides: caml_atomic_exchange_field
function caml_atomic_exchange_field(b, i, v)
  -- Field at index i+2
  local r = b[i + 2]
  b[i + 2] = v
  return r
end

--Provides: caml_atomic_make_contended
function caml_atomic_make_contended(a)
  return {tag = 0, a}
end

--Provides: caml_ml_domain_unique_token
caml_ml_domain_unique_token = {tag = 0}

--Provides: caml_ml_domain_id
function caml_ml_domain_id(_unit)
  return 0
end

--Provides: caml_ml_domain_spawn
function caml_ml_domain_spawn(_f, _term)
  error("Domains not supported in Lua (single-threaded)")
end

--Provides: caml_ml_domain_join
function caml_ml_domain_join(_domain)
  error("Domains not supported in Lua (single-threaded)")
end

--Provides: caml_ml_domain_cpu_relax
function caml_ml_domain_cpu_relax()
  -- No-op in single-threaded environment
end

--Provides: caml_ml_domain_set_name
function caml_ml_domain_set_name(_name)
  -- No-op in single-threaded environment
end

--Provides: caml_ml_domain_recommended_domain_count
function caml_ml_domain_recommended_domain_count(_unit)
  return 1
end


-- Runtime: digest
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- Digest: MD5 cryptographic hashing primitives

-- Bitwise operations (Lua 5.1 compatible)

--Provides: caml_digest_bit_and
function caml_digest_bit_and(a, b)
  -- 32-bit AND using arithmetic (Lua 5.1 compatible)
  local result = 0
  local bit_val = 1
  for i = 1, 32 do
    if (a % 2 == 1) and (b % 2 == 1) then
      result = result + bit_val
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit_val = bit_val * 2
  end
  return result
end

--Provides: caml_digest_bit_or
function caml_digest_bit_or(a, b)
  -- 32-bit OR using arithmetic (Lua 5.1 compatible)
  local result = 0
  local bit_val = 1
  for i = 1, 32 do
    if (a % 2 == 1) or (b % 2 == 1) then
      result = result + bit_val
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit_val = bit_val * 2
  end
  return result
end

--Provides: caml_digest_bit_xor
function caml_digest_bit_xor(a, b)
  -- 32-bit XOR using arithmetic (Lua 5.1 compatible)
  local result = 0
  local bit_val = 1
  for i = 1, 32 do
    local a_bit = a % 2
    local b_bit = b % 2
    if a_bit ~= b_bit then
      result = result + bit_val
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit_val = bit_val * 2
  end
  return result
end

--Provides: caml_digest_bit_not
function caml_digest_bit_not(a)
  -- 32-bit NOT using arithmetic (Lua 5.1 compatible)
  -- NOT is: 0xFFFFFFFF - a
  local max_u32 = 4294967295
  return max_u32 - a
end

--Provides: caml_digest_bit_lshift
function caml_digest_bit_lshift(a, n)
  -- 32-bit left shift with masking (Lua 5.1 compatible)
  local result = a
  for i = 1, n do
    result = result * 2
  end
  -- Mask to 32 bits
  return result % 4294967296
end

--Provides: caml_digest_bit_rshift
function caml_digest_bit_rshift(a, n)
  -- 32-bit right shift (Lua 5.1 compatible)
  local result = a
  for i = 1, n do
    result = math.floor(result / 2)
  end
  return result
end

--Provides: caml_digest_add32
function caml_digest_add32(a, b)
  -- 32-bit addition with overflow (Lua 5.1 compatible)
  local result = a + b
  return result % 4294967296
end

--Provides: caml_digest_rotl32
--Requires: caml_digest_bit_or, caml_digest_bit_lshift, caml_digest_bit_rshift
function caml_digest_rotl32(x, n)
  -- 32-bit left rotate (Lua 5.1 compatible)
  local left = caml_digest_bit_lshift(x, n)
  local right = caml_digest_bit_rshift(x, 32 - n)
  return caml_digest_bit_or(left, right)
end

-- MD5 auxiliary functions

--Provides: caml_digest_md5_F
--Requires: caml_digest_bit_and, caml_digest_bit_or, caml_digest_bit_not
function caml_digest_md5_F(x, y, z)
  -- F(x, y, z) = (x & y) | (~x & z)
  return caml_digest_bit_or(
    caml_digest_bit_and(x, y),
    caml_digest_bit_and(caml_digest_bit_not(x), z)
  )
end

--Provides: caml_digest_md5_G
--Requires: caml_digest_bit_and, caml_digest_bit_or, caml_digest_bit_not
function caml_digest_md5_G(x, y, z)
  -- G(x, y, z) = (x & z) | (y & ~z)
  return caml_digest_bit_or(
    caml_digest_bit_and(x, z),
    caml_digest_bit_and(y, caml_digest_bit_not(z))
  )
end

--Provides: caml_digest_md5_H
--Requires: caml_digest_bit_xor
function caml_digest_md5_H(x, y, z)
  -- H(x, y, z) = x ^ y ^ z
  return caml_digest_bit_xor(x, caml_digest_bit_xor(y, z))
end

--Provides: caml_digest_md5_I
--Requires: caml_digest_bit_xor, caml_digest_bit_or, caml_digest_bit_not
function caml_digest_md5_I(x, y, z)
  -- I(x, y, z) = y ^ (x | ~z)
  return caml_digest_bit_xor(y, caml_digest_bit_or(x, caml_digest_bit_not(z)))
end

--Provides: caml_digest_md5_step
--Requires: caml_digest_add32, caml_digest_rotl32
function caml_digest_md5_step(func, a, b, c, d, x, s, ac)
  -- MD5 step: a = b + rotl32(a + func(b, c, d) + x + ac, s)
  a = caml_digest_add32(a, caml_digest_add32(caml_digest_add32(func(b, c, d), x), ac))
  a = caml_digest_add32(caml_digest_rotl32(a, s), b)
  return a
end

--Provides: caml_digest_md5_transform
--Requires: caml_digest_md5_step, caml_digest_md5_F, caml_digest_md5_G, caml_digest_md5_H, caml_digest_md5_I, caml_digest_bit_or, caml_digest_bit_lshift, caml_digest_add32
function caml_digest_md5_transform(state, block)
  -- Transform MD5 state with one 64-byte block
  local a = state[1]
  local b = state[2]
  local c = state[3]
  local d = state[4]

  -- Decode block into 16 32-bit words (little-endian)
  local x = {}
  for i = 0, 15 do
    local offset = i * 4 + 1
    x[i + 1] = caml_digest_bit_or(
      caml_digest_bit_or(block[offset], caml_digest_bit_lshift(block[offset + 1], 8)),
      caml_digest_bit_or(caml_digest_bit_lshift(block[offset + 2], 16), caml_digest_bit_lshift(block[offset + 3], 24))
    )
  end

  -- Round 1 (constants: S11=7, S12=12, S13=17, S14=22)
  a = caml_digest_md5_step(caml_digest_md5_F, a, b, c, d, x[1], 7, 0xD76AA478)
  d = caml_digest_md5_step(caml_digest_md5_F, d, a, b, c, x[2], 12, 0xE8C7B756)
  c = caml_digest_md5_step(caml_digest_md5_F, c, d, a, b, x[3], 17, 0x242070DB)
  b = caml_digest_md5_step(caml_digest_md5_F, b, c, d, a, x[4], 22, 0xC1BDCEEE)
  a = caml_digest_md5_step(caml_digest_md5_F, a, b, c, d, x[5], 7, 0xF57C0FAF)
  d = caml_digest_md5_step(caml_digest_md5_F, d, a, b, c, x[6], 12, 0x4787C62A)
  c = caml_digest_md5_step(caml_digest_md5_F, c, d, a, b, x[7], 17, 0xA8304613)
  b = caml_digest_md5_step(caml_digest_md5_F, b, c, d, a, x[8], 22, 0xFD469501)
  a = caml_digest_md5_step(caml_digest_md5_F, a, b, c, d, x[9], 7, 0x698098D8)
  d = caml_digest_md5_step(caml_digest_md5_F, d, a, b, c, x[10], 12, 0x8B44F7AF)
  c = caml_digest_md5_step(caml_digest_md5_F, c, d, a, b, x[11], 17, 0xFFFF5BB1)
  b = caml_digest_md5_step(caml_digest_md5_F, b, c, d, a, x[12], 22, 0x895CD7BE)
  a = caml_digest_md5_step(caml_digest_md5_F, a, b, c, d, x[13], 7, 0x6B901122)
  d = caml_digest_md5_step(caml_digest_md5_F, d, a, b, c, x[14], 12, 0xFD987193)
  c = caml_digest_md5_step(caml_digest_md5_F, c, d, a, b, x[15], 17, 0xA679438E)
  b = caml_digest_md5_step(caml_digest_md5_F, b, c, d, a, x[16], 22, 0x49B40821)

  -- Round 2 (constants: S21=5, S22=9, S23=14, S24=20)
  a = caml_digest_md5_step(caml_digest_md5_G, a, b, c, d, x[2], 5, 0xF61E2562)
  d = caml_digest_md5_step(caml_digest_md5_G, d, a, b, c, x[7], 9, 0xC040B340)
  c = caml_digest_md5_step(caml_digest_md5_G, c, d, a, b, x[12], 14, 0x265E5A51)
  b = caml_digest_md5_step(caml_digest_md5_G, b, c, d, a, x[1], 20, 0xE9B6C7AA)
  a = caml_digest_md5_step(caml_digest_md5_G, a, b, c, d, x[6], 5, 0xD62F105D)
  d = caml_digest_md5_step(caml_digest_md5_G, d, a, b, c, x[11], 9, 0x02441453)
  c = caml_digest_md5_step(caml_digest_md5_G, c, d, a, b, x[16], 14, 0xD8A1E681)
  b = caml_digest_md5_step(caml_digest_md5_G, b, c, d, a, x[5], 20, 0xE7D3FBC8)
  a = caml_digest_md5_step(caml_digest_md5_G, a, b, c, d, x[10], 5, 0x21E1CDE6)
  d = caml_digest_md5_step(caml_digest_md5_G, d, a, b, c, x[15], 9, 0xC33707D6)
  c = caml_digest_md5_step(caml_digest_md5_G, c, d, a, b, x[4], 14, 0xF4D50D87)
  b = caml_digest_md5_step(caml_digest_md5_G, b, c, d, a, x[9], 20, 0x455A14ED)
  a = caml_digest_md5_step(caml_digest_md5_G, a, b, c, d, x[14], 5, 0xA9E3E905)
  d = caml_digest_md5_step(caml_digest_md5_G, d, a, b, c, x[3], 9, 0xFCEFA3F8)
  c = caml_digest_md5_step(caml_digest_md5_G, c, d, a, b, x[8], 14, 0x676F02D9)
  b = caml_digest_md5_step(caml_digest_md5_G, b, c, d, a, x[13], 20, 0x8D2A4C8A)

  -- Round 3 (constants: S31=4, S32=11, S33=16, S34=23)
  a = caml_digest_md5_step(caml_digest_md5_H, a, b, c, d, x[6], 4, 0xFFFA3942)
  d = caml_digest_md5_step(caml_digest_md5_H, d, a, b, c, x[9], 11, 0x8771F681)
  c = caml_digest_md5_step(caml_digest_md5_H, c, d, a, b, x[12], 16, 0x6D9D6122)
  b = caml_digest_md5_step(caml_digest_md5_H, b, c, d, a, x[15], 23, 0xFDE5380C)
  a = caml_digest_md5_step(caml_digest_md5_H, a, b, c, d, x[2], 4, 0xA4BEEA44)
  d = caml_digest_md5_step(caml_digest_md5_H, d, a, b, c, x[5], 11, 0x4BDECFA9)
  c = caml_digest_md5_step(caml_digest_md5_H, c, d, a, b, x[8], 16, 0xF6BB4B60)
  b = caml_digest_md5_step(caml_digest_md5_H, b, c, d, a, x[11], 23, 0xBEBFBC70)
  a = caml_digest_md5_step(caml_digest_md5_H, a, b, c, d, x[14], 4, 0x289B7EC6)
  d = caml_digest_md5_step(caml_digest_md5_H, d, a, b, c, x[1], 11, 0xEAA127FA)
  c = caml_digest_md5_step(caml_digest_md5_H, c, d, a, b, x[4], 16, 0xD4EF3085)
  b = caml_digest_md5_step(caml_digest_md5_H, b, c, d, a, x[7], 23, 0x04881D05)
  a = caml_digest_md5_step(caml_digest_md5_H, a, b, c, d, x[10], 4, 0xD9D4D039)
  d = caml_digest_md5_step(caml_digest_md5_H, d, a, b, c, x[13], 11, 0xE6DB99E5)
  c = caml_digest_md5_step(caml_digest_md5_H, c, d, a, b, x[16], 16, 0x1FA27CF8)
  b = caml_digest_md5_step(caml_digest_md5_H, b, c, d, a, x[3], 23, 0xC4AC5665)

  -- Round 4 (constants: S41=6, S42=10, S43=15, S44=21)
  a = caml_digest_md5_step(caml_digest_md5_I, a, b, c, d, x[1], 6, 0xF4292244)
  d = caml_digest_md5_step(caml_digest_md5_I, d, a, b, c, x[8], 10, 0x432AFF97)
  c = caml_digest_md5_step(caml_digest_md5_I, c, d, a, b, x[15], 15, 0xAB9423A7)
  b = caml_digest_md5_step(caml_digest_md5_I, b, c, d, a, x[6], 21, 0xFC93A039)
  a = caml_digest_md5_step(caml_digest_md5_I, a, b, c, d, x[13], 6, 0x655B59C3)
  d = caml_digest_md5_step(caml_digest_md5_I, d, a, b, c, x[4], 10, 0x8F0CCC92)
  c = caml_digest_md5_step(caml_digest_md5_I, c, d, a, b, x[11], 15, 0xFFEFF47D)
  b = caml_digest_md5_step(caml_digest_md5_I, b, c, d, a, x[2], 21, 0x85845DD1)
  a = caml_digest_md5_step(caml_digest_md5_I, a, b, c, d, x[9], 6, 0x6FA87E4F)
  d = caml_digest_md5_step(caml_digest_md5_I, d, a, b, c, x[16], 10, 0xFE2CE6E0)
  c = caml_digest_md5_step(caml_digest_md5_I, c, d, a, b, x[7], 15, 0xA3014314)
  b = caml_digest_md5_step(caml_digest_md5_I, b, c, d, a, x[14], 21, 0x4E0811A1)
  a = caml_digest_md5_step(caml_digest_md5_I, a, b, c, d, x[5], 6, 0xF7537E82)
  d = caml_digest_md5_step(caml_digest_md5_I, d, a, b, c, x[12], 10, 0xBD3AF235)
  c = caml_digest_md5_step(caml_digest_md5_I, c, d, a, b, x[3], 15, 0x2AD7D2BB)
  b = caml_digest_md5_step(caml_digest_md5_I, b, c, d, a, x[10], 21, 0xEB86D391)

  -- Add to state
  state[1] = caml_digest_add32(state[1], a)
  state[2] = caml_digest_add32(state[2], b)
  state[3] = caml_digest_add32(state[3], c)
  state[4] = caml_digest_add32(state[4], d)
end

--Provides: caml_md5_init
function caml_md5_init()
  -- Initialize MD5 context
  -- MD5 initial state (constants: INIT_A, INIT_B, INIT_C, INIT_D)
  return {
    state = {0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476},
    count = 0,
    buffer = {}
  }
end

--Provides: caml_md5_update
--Requires: caml_digest_md5_transform
function caml_md5_update(ctx, data)
  -- Update MD5 context with data
  local data_len = string.len(data)
  ctx.count = ctx.count + data_len

  -- Convert string to byte array
  local bytes = {}
  for i = 1, data_len do
    bytes[i] = string.byte(data, i)
  end

  local pos = 1
  local buf_len = #ctx.buffer

  -- Fill buffer if partially filled
  if buf_len > 0 then
    local needed = 64 - buf_len
    if data_len < needed then
      -- Not enough to complete a block
      for i = 1, data_len do
        table.insert(ctx.buffer, bytes[i])
      end
      return
    end
    -- Complete the block
    for i = 1, needed do
      table.insert(ctx.buffer, bytes[i])
    end
    caml_digest_md5_transform(ctx.state, ctx.buffer)
    ctx.buffer = {}
    pos = needed + 1
  end

  -- Process complete 64-byte blocks
  while pos + 63 <= data_len do
    local block = {}
    for i = 0, 63 do
      block[i + 1] = bytes[pos + i]
    end
    caml_digest_md5_transform(ctx.state, block)
    pos = pos + 64
  end

  -- Store remaining bytes in buffer
  while pos <= data_len do
    table.insert(ctx.buffer, bytes[pos])
    pos = pos + 1
  end
end

--Provides: caml_md5_final
--Requires: caml_digest_md5_transform, caml_digest_bit_rshift
function caml_md5_final(ctx)
  -- Finalize MD5 and produce digest
  table.insert(ctx.buffer, 0x80)

  -- Pad to 56 bytes (leaving 8 for length)
  if #ctx.buffer > 56 then
    -- Need to add another block
    while #ctx.buffer < 64 do
      table.insert(ctx.buffer, 0)
    end
    caml_digest_md5_transform(ctx.state, ctx.buffer)
    ctx.buffer = {}
  end

  -- Pad to 56 bytes
  while #ctx.buffer < 56 do
    table.insert(ctx.buffer, 0)
  end

  -- Append length in bits (little-endian 64-bit)
  local bit_len = ctx.count * 8
  for i = 0, 7 do
    local byte_val = math.floor(caml_digest_bit_rshift(bit_len, i * 8)) % 256
    table.insert(ctx.buffer, byte_val)
  end

  -- Final transform
  caml_digest_md5_transform(ctx.state, ctx.buffer)

  -- Produce digest (little-endian)
  local digest = {}
  for i = 1, 4 do
    local word = ctx.state[i]
    for j = 0, 3 do
      local byte_val = math.floor(caml_digest_bit_rshift(word, j * 8)) % 256
      table.insert(digest, string.char(byte_val))
    end
  end

  return table.concat(digest)
end

--Provides: caml_digest_to_hex
function caml_digest_to_hex(digest)
  -- Convert digest to hex string
  local hex = {}
  for i = 1, string.len(digest) do
    table.insert(hex, string.format("%02x", string.byte(digest, i)))
  end
  return table.concat(hex)
end

--Provides: caml_md5_string
--Requires: caml_md5_init, caml_md5_update, caml_md5_final
function caml_md5_string(str, offset, len)
  -- Hash a substring of a string
  local ctx = caml_md5_init()
  local substring = string.sub(str, offset + 1, offset + len)
  caml_md5_update(ctx, substring)
  return caml_md5_final(ctx)
end

--Provides: caml_md5_chan
--Requires: caml_md5_init, caml_md5_update, caml_md5_final
function caml_md5_chan(chanid, toread)
  -- Hash data from a channel
  -- toread: -1 for entire channel, or specific number of bytes
  local ctx = caml_md5_init()
  local buffer_size = 4096

  if toread < 0 then
    -- Read entire channel
    while true do
      local buf = {}
      local bytes_read = caml_ml_input(chanid, buf, 0, buffer_size)
      if bytes_read == 0 then
        break
      end
      -- Convert byte array to string
      local chars = {}
      for i = 1, bytes_read do
        table.insert(chars, string.char(buf[i]))
      end
      caml_md5_update(ctx, table.concat(chars))
    end
  else
    -- Read specific number of bytes
    local remaining = toread
    while remaining > 0 do
      local to_read = math.min(remaining, buffer_size)
      local buf = {}
      local bytes_read = caml_ml_input(chanid, buf, 0, to_read)
      if bytes_read == 0 then
        error("End_of_file")
      end
      -- Convert byte array to string
      local chars = {}
      for i = 1, bytes_read do
        table.insert(chars, string.char(buf[i]))
      end
      caml_md5_update(ctx, table.concat(chars))
      remaining = remaining - bytes_read
    end
  end

  return caml_md5_final(ctx)
end


-- Runtime: sys
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

--- Sys Module
--
-- Provides system operations including:
-- - Program arguments
-- - Environment variables
-- - Time measurement
-- - File system operations
-- - System configuration

-- Global state for sys module (linker-compatible)
_OCAML_sys = _OCAML_sys or {
  static_env = {},
  argv = nil,
  initial_time = os.time(),
  runtime_warnings = 0
}

--- Detect OS type (inline function for reuse)
--Provides: caml_sys_detect_os_type
function caml_sys_detect_os_type()
  if package.config:sub(1, 1) == '\\' then
    return "Win32"
  else
    return "Unix"
  end
end

--- Initialize argv from command line arguments
--Provides: caml_sys_init_argv
function caml_sys_init_argv()
  if _OCAML_sys.argv then return _OCAML_sys.argv end

  local main = arg and arg[0] or "a.out"
  local args = arg or {}

  -- Build OCaml array: [0, program_name, arg1, arg2, ...]
  -- First element is tag 0, then program name, then arguments
  _OCAML_sys.argv = {tag = 0}
  _OCAML_sys.argv[1] = main

  -- Add command-line arguments (starting from arg[1])
  for i = 1, #args do
    _OCAML_sys.argv[i + 1] = args[i]
  end

  return _OCAML_sys.argv
end

--- Set static environment variable
-- @param key string Environment variable name
-- @param value string Environment variable value
-- @return number 0 (unit)
--Provides: caml_set_static_env
--Requires: caml_unit
function caml_set_static_env(key, value)
  local key_str = key
  local val_str = value
  _OCAML_sys.static_env[key_str] = val_str
  return caml_unit
end

--- Get environment variable (internal helper)
-- @param name string Environment variable name (Lua string)
-- @return string|nil Environment variable value or nil
--Provides: caml_sys_jsoo_getenv
function caml_sys_jsoo_getenv(name)
  -- Check static environment first
  if _OCAML_sys.static_env[name] then
    return _OCAML_sys.static_env[name]
  end

  -- Check os.getenv
  local value = os.getenv(name)
  if value then
    return value
  end

  return nil
end

--- Get environment variable
-- Raises Not_found exception if variable doesn't exist
-- @param name string|table OCaml string (environment variable name)
-- @return string|table OCaml string (environment variable value)
--Provides: caml_sys_getenv
--Requires: caml_raise_not_found, caml_sys_jsoo_getenv
function caml_sys_getenv(name)
  local name_str = name
  local value = caml_sys_jsoo_getenv(name_str)

  if value == nil then
    caml_raise_not_found()
  end

  return value
end

--- Get environment variable (optional version for OCaml 5.4+)
-- @param name string|table OCaml string (environment variable name)
-- @return number|table 0 (None) or [0, value] (Some value)
--Provides: caml_sys_getenv_opt
--Requires: caml_sys_jsoo_getenv
function caml_sys_getenv_opt(name)
  local name_str = name
  local value = caml_sys_jsoo_getenv(name_str)

  if value == nil then
    return 0 -- None (represented as 0)
  else
    -- Some value: {tag = 0, [1] = value}
    return {tag = 0, [1] = value}
  end
end

--- Unsafe get environment variable (same as caml_sys_getenv)
-- @param name string|table OCaml string
-- @return string|table OCaml string
--Provides: caml_sys_unsafe_getenv
--Requires: caml_sys_getenv
function caml_sys_unsafe_getenv(name)
  return caml_sys_getenv(name)
end

--- Get program arguments
-- @param _unit number Unit value (ignored)
-- @return table OCaml array of strings
--Provides: caml_sys_argv
--Requires: caml_sys_init_argv
function caml_sys_argv(_unit)
  local argv = caml_sys_init_argv()
  return argv
end

--- Get program arguments (alternative format)
-- Returns [0, program_name, argv_array]
-- @param _unit number Unit value (ignored)
-- @return table Tuple of [0, name, array]
--Provides: caml_sys_get_argv
--Requires: caml_sys_init_argv
function caml_sys_get_argv(_unit)
  local argv = caml_sys_init_argv()
  return {tag = 0, [1] = argv[1], [2] = argv}
end

--- Modify program arguments
-- @param arg table New argv array
-- @return number 0 (unit)
--Provides: caml_sys_modify_argv
--Requires: caml_unit
function caml_sys_modify_argv(arg)
  _OCAML_sys.argv = arg
  return caml_unit
end

--- Get executable name
-- @param _unit number Unit value (ignored)
-- @return string|table OCaml string
--Provides: caml_sys_executable_name
--Requires: caml_sys_init_argv
function caml_sys_executable_name(_unit)
  local argv = caml_sys_init_argv()
  return argv[1]
end

--- Get system configuration
-- Returns [0, os_type, word_size, big_endian]
-- @param _unit number Unit value (ignored)
-- @return table Configuration tuple
--Provides: caml_sys_get_config
--Requires: caml_sys_detect_os_type
function caml_sys_get_config(_unit)
  return {
    tag = 0,
    [1] = caml_sys_detect_os_type(),
    [2] = 32,  -- word_size (always 32 for js_of_ocaml compatibility)
    [3] = 0    -- big_endian (0 = little endian)
  }
end

--- Get elapsed time since program start (in seconds)
-- @param _unit number Unit value (ignored)
-- @return number Elapsed time in seconds
--Provides: caml_sys_time
function caml_sys_time(_unit)
  local now = os.time()
  return now - _OCAML_sys.initial_time
end

--- Get elapsed time including children processes
-- Note: In Lua, there's no notion of child processes, so this is the same as caml_sys_time
-- @param _b number Ignored
-- @return number Elapsed time in seconds
--Provides: caml_sys_time_include_children
--Requires: caml_sys_time
function caml_sys_time_include_children(_b)
  return caml_sys_time(0)
end

--- Check if file exists
-- @param name string|table OCaml string (file path)
-- @return number 0 (false) or 1 (true)
--Provides: caml_sys_file_exists
--Requires: caml_true_val, caml_false_val
function caml_sys_file_exists(name)
  local path = name
  local file = io.open(path, "r")
  if file then
    file:close()
    return caml_true_val
  else
    return caml_false_val
  end
end

--- Check if path is a directory
-- @param name string|table OCaml string (directory path)
-- @return number 0 (false) or 1 (true)
--Provides: caml_sys_is_directory
--Requires: caml_true_val, caml_false_val
function caml_sys_is_directory(name)
  local path = name

  -- Try to open as directory using lfs if available
  local has_lfs, lfs = pcall(require, "lfs")
  if has_lfs then
    local attr = lfs.attributes(path)
    if attr and attr.mode == "directory" then
      return caml_true_val
    else
      return caml_false_val
    end
  end

  -- Fallback: try to list directory (Unix-specific)
  local ok, _, code = os.execute('test -d "' .. path:gsub('"', '\\"') .. '"')
  if ok == true or code == 0 then
    return caml_true_val
  else
    return caml_false_val
  end
end

--- Check if path is a regular file (OCaml 5.1+)
-- @param name string|table OCaml string (file path)
-- @return number 0 (false) or 1 (true)
--Provides: caml_sys_is_regular_file
--Requires: caml_sys_is_directory, caml_true_val, caml_false_val
function caml_sys_is_regular_file(name)
  local path = name

  -- Try using lfs if available
  local has_lfs, lfs = pcall(require, "lfs")
  if has_lfs then
    local attr = lfs.attributes(path)
    if attr and attr.mode == "file" then
      return caml_true_val
    else
      return caml_false_val
    end
  end

  -- Fallback: check if we can open for reading
  local file = io.open(path, "r")
  if file then
    file:close()
    -- Additional check: not a directory
    if caml_sys_is_directory(name) == caml_true_val then
      return caml_false_val
    end
    return caml_true_val
  else
    return caml_false_val
  end
end

--- Remove (delete) a file
-- @param name string|table OCaml string (file path)
-- @return number 0 (unit)
--Provides: caml_sys_remove
--Requires: caml_raise_sys_error, caml_unit
function caml_sys_remove(name)
  local path = name
  local ok, err = os.remove(path)
  if not ok then
    caml_raise_sys_error("remove: " .. (err or "unknown error"))
  end
  return caml_unit
end

--- Rename a file
-- @param oldname string|table OCaml string (old path)
-- @param newname string|table OCaml string (new path)
-- @return number 0 (unit)
--Provides: caml_sys_rename
--Requires: caml_raise_sys_error, caml_unit
function caml_sys_rename(oldname, newname)
  local old_path = oldname
  local new_path = newname
  local ok, err = os.rename(old_path, new_path)
  if not ok then
    caml_raise_sys_error("rename: " .. (err or "unknown error"))
  end
  return caml_unit
end

--- Change current directory
-- @param dirname string|table OCaml string (directory path)
-- @return number 0 (unit)
--Provides: caml_sys_chdir
--Requires: caml_raise_sys_error, caml_unit
function caml_sys_chdir(dirname)
  local path = dirname

  -- Try using lfs if available
  local has_lfs, lfs = pcall(require, "lfs")
  if has_lfs then
    local ok, err = lfs.chdir(path)
    if not ok then
      caml_raise_sys_error("chdir: " .. (err or "unknown error"))
    end
    return caml_unit
  end

  -- Fallback: not supported without lfs
  caml_raise_sys_error("chdir: not supported (install LuaFileSystem)")
end

--- Get current working directory
-- @param _unit number Unit value (ignored)
-- @return string|table OCaml string (current directory)
--Provides: caml_sys_getcwd
--Requires: caml_raise_sys_error
function caml_sys_getcwd(_unit)
  -- Try using lfs if available
  local has_lfs, lfs = pcall(require, "lfs")
  if has_lfs then
    local cwd = lfs.currentdir()
    return cwd
  end

  -- Fallback: use shell command (Unix-specific)
  local handle = io.popen("pwd")
  if handle then
    local cwd = handle:read("*l")
    handle:close()
    if cwd then
      return cwd
    end
  end

  -- Last resort: raise error
  caml_raise_sys_error("getcwd: not supported (install LuaFileSystem)")
end

--- Read directory contents
-- @param dirname string|table OCaml string (directory path)
-- @return table OCaml array of strings (filenames)
--Provides: caml_sys_readdir
--Requires: caml_raise_sys_error
function caml_sys_readdir(dirname)
  local path = dirname

  -- Try using lfs if available
  local has_lfs, lfs = pcall(require, "lfs")
  if has_lfs then
    local entries = {tag = 0}  -- OCaml array
    local i = 0
    for entry in lfs.dir(path) do
      if entry ~= "." and entry ~= ".." then
        entries[i] = entry
        i = i + 1
      end
    end
    return entries
  end

  -- Fallback: not supported without lfs
  caml_raise_sys_error("readdir: not supported (install LuaFileSystem)")
end

--- Execute system command
-- @param cmd string|table OCaml string (command to execute)
-- @return number Exit code
--Provides: caml_sys_system_command
function caml_sys_system_command(cmd)
  local cmd_str = cmd
  local ok, exit_type, code = os.execute(cmd_str)

  -- Lua 5.2+ returns (true/nil, "exit"/"signal", code)
  -- Lua 5.1 returns just the exit code
  if type(ok) == "number" then
    return ok  -- Lua 5.1
  elseif ok == true then
    return 0  -- Success
  else
    return code or 1  -- Failure
  end
end

--- Exit program
-- @param code number Exit code
--Provides: caml_sys_exit
function caml_sys_exit(code)
  os.exit(code)
end

--- Open file (stub - not yet implemented)
-- @param path string|table File path
-- @param flags number Open flags
-- @return number File descriptor (stub)
--Provides: sys_open
function sys_open(path, flags)
  error("caml_sys_open: not yet implemented in lua_of_ocaml")
end

--- Close file (stub - not yet implemented)
-- @param fd number File descriptor
-- @return number 0 (unit)
--Provides: sys_close
function sys_close(fd)
  error("caml_sys_close: not yet implemented in lua_of_ocaml")
end

--- Get random seed
-- Returns array of random integers for seeding Random module
-- @param _unit number Unit value (ignored)
-- @return table OCaml array [0, x1, x2, x3, x4]
--Provides: caml_sys_random_seed
function caml_sys_random_seed(_unit)
  -- Try to get good random seed
  math.randomseed(os.time() + os.clock() * 1000000)

  -- Generate 4 random integers
  local r1 = math.random(-2147483648, 2147483647)
  local r2 = math.random(-2147483648, 2147483647)
  local r3 = math.random(-2147483648, 2147483647)
  local r4 = math.random(-2147483648, 2147483647)

  return {tag = 0, [1] = r1, [2] = r2, [3] = r3, [4] = r4}
end

--- System constants

--Provides: caml_sys_const_big_endian
function caml_sys_const_big_endian(_unit)
  return 0  -- Little endian
end

--Provides: caml_sys_const_word_size
function caml_sys_const_word_size(_unit)
  return 32  -- 32-bit word size (js_of_ocaml compatibility)
end

--Provides: caml_sys_const_int_size
function caml_sys_const_int_size(_unit)
  return 32  -- 32-bit int size
end

--Provides: caml_sys_const_max_wosize
function caml_sys_const_max_wosize(_unit)
  return math.floor(0x7fffffff / 4)  -- max_int / 4
end

--Provides: caml_sys_const_ostype_unix
--Requires: caml_true_val, caml_false_val, caml_sys_detect_os_type
function caml_sys_const_ostype_unix(_unit)
  return caml_sys_detect_os_type() == "Unix" and caml_true_val or caml_false_val
end

--Provides: caml_sys_const_ostype_win32
--Requires: caml_true_val, caml_false_val, caml_sys_detect_os_type
function caml_sys_const_ostype_win32(_unit)
  return caml_sys_detect_os_type() == "Win32" and caml_true_val or caml_false_val
end

--Provides: caml_sys_const_ostype_cygwin
--Requires: caml_false_val
function caml_sys_const_ostype_cygwin(_unit)
  return caml_false_val  -- We don't detect Cygwin specifically
end

--Provides: caml_sys_const_backend_type
function caml_sys_const_backend_type(_unit)
  return {tag = 0, [1] = "lua_of_ocaml"}
end

--Provides: caml_sys_const_naked_pointers_checked
function caml_sys_const_naked_pointers_checked(_unit)
  return 0
end

--- Check if channel is a TTY
-- @param _chan number Channel id
-- @return number 0 (false, channels are not TTYs in Lua)
--Provides: caml_sys_isatty
--Requires: caml_false_val
function caml_sys_isatty(_chan)
  return caml_false_val
end

--- Get runtime variant
-- @param _unit number Unit value (ignored)
-- @return string|table OCaml string (empty)
--Provides: caml_runtime_variant
function caml_runtime_variant(_unit)
  return ""
end

--- Get runtime parameters
-- @param _unit number Unit value (ignored)
-- @return string|table OCaml string (empty)
--Provides: caml_runtime_parameters
function caml_runtime_parameters(_unit)
  return ""
end

--- Install signal handler (no-op in Lua)
-- @return number 0
--Provides: caml_install_signal_handler
--Requires: caml_unit
function caml_install_signal_handler(_sig, _action)
  return caml_unit
end

--- Enable/disable runtime warnings
-- @param bool number 0 (false) or 1 (true)
-- @return number 0 (unit)
--Provides: caml_ml_enable_runtime_warnings
--Requires: caml_unit
function caml_ml_enable_runtime_warnings(bool)
  _OCAML_sys.runtime_warnings = bool
  return caml_unit
end

--- Check if runtime warnings are enabled
-- @param _unit number Unit value (ignored)
-- @return number 0 (false) or 1 (true)
--Provides: caml_ml_runtime_warnings_enabled
function caml_ml_runtime_warnings_enabled(_unit)
  return _OCAML_sys.runtime_warnings
end

--- Get I/O buffer size (OCaml 5.4+)
-- @param _unit number Unit value (ignored)
-- @return number Buffer size (65536)
--Provides: caml_sys_io_buffer_size
function caml_sys_io_buffer_size(_unit)
  return 65536
end

--- Get temp directory name (OCaml 5.4+)
-- @param _unit number Unit value (ignored)
-- @return string|table OCaml string (temp directory or empty)
--Provides: caml_sys_temp_dir_name
--Requires: caml_sys_detect_os_type
function caml_sys_temp_dir_name(_unit)
  if caml_sys_detect_os_type() == "Win32" then
    local tmp = os.getenv("TEMP") or os.getenv("TMP") or ""
    return tmp
  else
    local tmp = os.getenv("TMPDIR") or "/tmp"
    return tmp
  end
end

--- XDG defaults (OCaml 5.2+)
-- @param _unit number Unit value (ignored)
-- @return number 0 (empty list)
--Provides: caml_xdg_defaults
function caml_xdg_defaults(_unit)
  return 0  -- Empty list
end

--- Convert signal number (OCaml 5.4+)
-- @param signo number Signal number
-- @return number Same signal number
--Provides: caml_sys_convert_signal_number
function caml_sys_convert_signal_number(signo)
  return signo
end

--- Reverse convert signal number (OCaml 5.4+)
-- @param signo number Signal number
-- @return number Same signal number
--Provides: caml_sys_rev_convert_signal_number
function caml_sys_rev_convert_signal_number(signo)
  return signo
end



-- Runtime: filename
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

--Provides: caml_filename_os_type
function caml_filename_os_type()
  if package.config:sub(1, 1) == '\\' then
    return "Win32"
  else
    return "Unix"
  end
end

--Provides: caml_filename_dir_sep
--Requires: caml_filename_os_type
function caml_filename_dir_sep(_unit)
  return caml_filename_os_type() == "Win32" and "\\" or "/"
end

--Provides: caml_filename_is_dir_sep
--Requires: caml_filename_os_type
function caml_filename_is_dir_sep(c)
  if caml_filename_os_type() == "Win32" then
    return c == '\\' or c == '/'
  else
    return c == '/'
  end
end

--Provides: caml_filename_concat
--Requires: caml_filename_os_type caml_filename_is_dir_sep caml_filename_dir_sep
function caml_filename_concat(dir, file)
  local dir_str = dir
  local file_str = file
  local os_type = caml_filename_os_type()
  local dir_sep = caml_filename_dir_sep(0)

  -- Handle empty cases
  if dir_str == "" then
    return file_str
  end
  if file_str == "" then
    return dir_str
  end

  -- Check if file is absolute (should return file unchanged)
  -- Unix: starts with /
  -- Windows: starts with \ or / or drive letter (C:\)
  if os_type == "Win32" then
    if caml_filename_is_dir_sep(file_str:sub(1, 1)) then
      return file_str
    end
    -- Check for drive letter (C:)
    if file_str:match("^%a:") then
      return file_str
    end
  else
    if file_str:sub(1, 1) == '/' then
      return file_str
    end
  end

  -- Add separator if dir doesn't end with one
  local last_char = dir_str:sub(-1)
  if caml_filename_is_dir_sep(last_char) then
    return dir_str .. file_str
  else
    return dir_str .. dir_sep .. file_str
  end
end

--Provides: caml_filename_basename
--Requires: caml_filename_is_dir_sep caml_filename_os_type
function caml_filename_basename(name)
  local name_str = name
  local os_type = caml_filename_os_type()

  if name_str == "" then
    return ""
  end

  -- Remove trailing separators
  while #name_str > 1 and caml_filename_is_dir_sep(name_str:sub(-1)) do
    name_str = name_str:sub(1, -2)
  end

  -- Special case: root directory
  if name_str == "/" or (os_type == "Win32" and name_str:match("^%a:[\\/]?$")) then
    return name_str
  end

  -- Find last separator
  local last_sep = 0
  for i = #name_str, 1, -1 do
    if caml_filename_is_dir_sep(name_str:sub(i, i)) then
      last_sep = i
      break
    end
  end

  if last_sep == 0 then
    return name_str
  else
    return name_str:sub(last_sep + 1)
  end
end

--Provides: caml_filename_dirname
--Requires: caml_filename_is_dir_sep caml_filename_os_type caml_filename_dir_sep
function caml_filename_dirname(name)
  local name_str = name
  local os_type = caml_filename_os_type()
  local dir_sep = caml_filename_dir_sep(0)

  if name_str == "" then
    return "."
  end

  -- Remove trailing separators
  while #name_str > 1 and caml_filename_is_dir_sep(name_str:sub(-1)) do
    name_str = name_str:sub(1, -2)
  end

  -- Special case: root directory
  if name_str == "/" then
    return "/"
  end
  if os_type == "Win32" and name_str:match("^%a:[\\/]?$") then
    return name_str
  end

  -- Find last separator
  local last_sep = 0
  for i = #name_str, 1, -1 do
    if caml_filename_is_dir_sep(name_str:sub(i, i)) then
      last_sep = i
      break
    end
  end

  if last_sep == 0 then
    return "."
  elseif last_sep == 1 then
    return "/"
  else
    -- Remove trailing separator from dirname
    local result = name_str:sub(1, last_sep - 1)
    if result == "" then
      return "/"
    end
    -- Windows drive letter case
    if os_type == "Win32" and result:match("^%a:$") then
      return result .. dir_sep
    end
    return result
  end
end

--Provides: caml_filename_check_suffix
function caml_filename_check_suffix(name, suff)
  local name_str = name
  local suff_str = suff

  if #suff_str > #name_str then
    return 0
  end

  if #suff_str == 0 then
    return 1
  end

  local name_end = name_str:sub(-#suff_str)
  if name_end == suff_str then
    return 1
  else
    return 0
  end
end

--Provides: caml_filename_chop_suffix
--Requires: caml_invalid_argument
function caml_filename_chop_suffix(name, suff)
  local name_str = name
  local suff_str = suff

  if #suff_str > #name_str then
    caml_invalid_argument("Filename.chop_suffix")
  end

  if #suff_str == 0 then
    return name_str
  end

  local name_end = name_str:sub(-#suff_str)
  if name_end == suff_str then
    return name_str:sub(1, -#suff_str - 1)
  else
    caml_invalid_argument("Filename.chop_suffix")
  end
end

--Provides: caml_filename_chop_extension
--Requires: caml_filename_is_dir_sep caml_invalid_argument
function caml_filename_chop_extension(name)
  local name_str = name

  -- Find last dot
  local last_dot = 0
  local last_sep = 0

  for i = #name_str, 1, -1 do
    local c = name_str:sub(i, i)
    if c == '.' and last_dot == 0 then
      last_dot = i
    end
    if caml_filename_is_dir_sep(c) then
      last_sep = i
      break
    end
  end

  -- No dot found, or dot is before last separator, or dot is first character
  if last_dot == 0 or last_dot <= last_sep or last_dot == 1 then
    caml_invalid_argument("Filename.chop_extension")
  end

  return name_str:sub(1, last_dot - 1)
end

--Provides: caml_filename_extension
--Requires: caml_filename_is_dir_sep
function caml_filename_extension(name)
  local name_str = name

  -- Find last dot
  local last_dot = 0
  local last_sep = 0

  for i = #name_str, 1, -1 do
    local c = name_str:sub(i, i)
    if c == '.' and last_dot == 0 then
      last_dot = i
    end
    if caml_filename_is_dir_sep(c) then
      last_sep = i
      break
    end
  end

  -- No dot found, or dot is before last separator, or dot is first character
  if last_dot == 0 or last_dot <= last_sep or last_dot == 1 then
    return ""
  end

  return name_str:sub(last_dot)
end

--Provides: caml_filename_remove_extension
--Requires: caml_filename_is_dir_sep
function caml_filename_remove_extension(name)
  local name_str = name

  -- Find last dot
  local last_dot = 0
  local last_sep = 0

  for i = #name_str, 1, -1 do
    local c = name_str:sub(i, i)
    if c == '.' and last_dot == 0 then
      last_dot = i
    end
    if caml_filename_is_dir_sep(c) then
      last_sep = i
      break
    end
  end

  -- No dot found, or dot is before last separator, or dot is first character
  if last_dot == 0 or last_dot <= last_sep or last_dot == 1 then
    return name_str
  end

  return name_str:sub(1, last_dot - 1)
end

--Provides: caml_filename_is_relative
--Requires: caml_filename_os_type caml_filename_is_dir_sep
function caml_filename_is_relative(name)
  local name_str = name
  local os_type = caml_filename_os_type()

  if name_str == "" then
    return 1
  end

  if os_type == "Win32" then
    -- Absolute if starts with separator or drive letter
    if caml_filename_is_dir_sep(name_str:sub(1, 1)) then
      return 0
    end
    if name_str:match("^%a:") then
      return 0
    end
    return 1
  else
    -- Unix: absolute if starts with /
    if name_str:sub(1, 1) == '/' then
      return 0
    else
      return 1
    end
  end
end

--Provides: caml_filename_is_implicit
--Requires: caml_filename_is_dir_sep caml_filename_os_type
function caml_filename_is_implicit(name)
  local name_str = name
  local os_type = caml_filename_os_type()

  if name_str == "" then
    return 1
  end

  -- Check if starts with separator (explicit)
  if caml_filename_is_dir_sep(name_str:sub(1, 1)) then
    return 0
  end

  -- Check if starts with ./ or ../
  if name_str:sub(1, 2) == "./" or name_str:sub(1, 2) == ".\\" then
    return 0
  end
  if name_str:sub(1, 3) == "../" or name_str:sub(1, 3) == "..\\" then
    return 0
  end

  -- Windows: check for drive letter
  if os_type == "Win32" and name_str:match("^%a:") then
    return 0
  end

  return 1
end

--Provides: caml_filename_current_dir_name
function caml_filename_current_dir_name(_unit)
  return "."
end

--Provides: caml_filename_parent_dir_name
function caml_filename_parent_dir_name(_unit)
  return ".."
end

--Provides: caml_filename_quote
function caml_filename_quote(name)
  local name_str = name

  -- Simple quoting: wrap in quotes if contains spaces or special chars
  if name_str:match("[ \t\n'\"\\$`!*?]") then
    -- Escape quotes and backslashes
    local escaped = name_str:gsub("\\", "\\\\"):gsub('"', '\\"')
    return '"' .. escaped .. '"'
  else
    return name_str
  end
end

--Provides: caml_filename_quote_command
function caml_filename_quote_command(cmd)
  return cmd
end

--Provides: caml_filename_temp_dir_name
--Requires: caml_sys_temp_dir_name
function caml_filename_temp_dir_name(_unit)
  return caml_sys_temp_dir_name(0)
end

--Provides: caml_filename_null
--Requires: caml_filename_os_type
function caml_filename_null(_unit)
  local os_type = caml_filename_os_type()
  if os_type == "Win32" then
    return "NUL"
  else
    return "/dev/null"
  end
end


-- Runtime: set
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_set_height
function caml_set_height(node)
  if not node then
    return 0
  end
  return node.height
end

--Provides: caml_set_create_node
--Requires: caml_set_height
function caml_set_create_node(elt, left, right)
  return {
    elt = elt,
    left = left,
    right = right,
    height = 1 + math.max(caml_set_height(left), caml_set_height(right))
  }
end

--Provides: caml_set_balance_factor
--Requires: caml_set_height
function caml_set_balance_factor(node)
  if not node then
    return 0
  end
  return caml_set_height(node.left) - caml_set_height(node.right)
end

--Provides: caml_set_rotate_right
--Requires: caml_set_height
function caml_set_rotate_right(node)
  local left = node.left
  local left_right = left.right

  left.right = node
  node.left = left_right

  node.height = 1 + math.max(caml_set_height(node.left), caml_set_height(node.right))
  left.height = 1 + math.max(caml_set_height(left.left), caml_set_height(left.right))

  return left
end

--Provides: caml_set_rotate_left
--Requires: caml_set_height
function caml_set_rotate_left(node)
  local right = node.right
  local right_left = right.left

  right.left = node
  node.right = right_left

  node.height = 1 + math.max(caml_set_height(node.left), caml_set_height(node.right))
  right.height = 1 + math.max(caml_set_height(right.left), caml_set_height(right.right))

  return right
end

--Provides: caml_set_balance
--Requires: caml_set_balance_factor, caml_set_rotate_left, caml_set_rotate_right
function caml_set_balance(node)
  if not node then
    return nil
  end

  local bf = caml_set_balance_factor(node)

  if bf > 1 then
    if caml_set_balance_factor(node.left) < 0 then
      node.left = caml_set_rotate_left(node.left)
    end
    return caml_set_rotate_right(node)
  end

  if bf < -1 then
    if caml_set_balance_factor(node.right) > 0 then
      node.right = caml_set_rotate_right(node.right)
    end
    return caml_set_rotate_left(node)
  end

  return node
end

--Provides: caml_set_add_internal
--Requires: caml_set_create_node, caml_set_height, caml_set_balance
function caml_set_add_internal(cmp, elt, node)
  if not node then
    return caml_set_create_node(elt, nil, nil)
  end

  local c = cmp(elt, node.elt)

  if c == 0 then
    return node  -- Element already exists
  elseif c < 0 then
    node.left = caml_set_add_internal(cmp, elt, node.left)
  else
    node.right = caml_set_add_internal(cmp, elt, node.right)
  end

  node.height = 1 + math.max(caml_set_height(node.left), caml_set_height(node.right))
  return caml_set_balance(node)
end

--Provides: caml_set_mem_internal
function caml_set_mem_internal(cmp, elt, node)
  if not node then
    return false
  end

  local c = cmp(elt, node.elt)

  if c == 0 then
    return true
  elseif c < 0 then
    return caml_set_mem_internal(cmp, elt, node.left)
  else
    return caml_set_mem_internal(cmp, elt, node.right)
  end
end

--Provides: caml_set_min_node
function caml_set_min_node(node)
  if not node.left then
    return node
  end
  return caml_set_min_node(node.left)
end

--Provides: caml_set_remove_internal
--Requires: caml_set_min_node, caml_set_height, caml_set_balance
function caml_set_remove_internal(cmp, elt, node)
  if not node then
    return nil
  end

  local c = cmp(elt, node.elt)

  if c < 0 then
    node.left = caml_set_remove_internal(cmp, elt, node.left)
  elseif c > 0 then
    node.right = caml_set_remove_internal(cmp, elt, node.right)
  else
    if not node.left then
      return node.right
    elseif not node.right then
      return node.left
    else
      local successor = caml_set_min_node(node.right)
      node.elt = successor.elt
      node.right = caml_set_remove_internal(cmp, successor.elt, node.right)
    end
  end

  if not node then
    return nil
  end

  node.height = 1 + math.max(caml_set_height(node.left), caml_set_height(node.right))
  return caml_set_balance(node)
end

--Provides: caml_set_union_internal
--Requires: caml_set_add_internal
function caml_set_union_internal(cmp, s1, s2)
  if not s1 then
    return s2
  end
  if not s2 then
    return s1
  end

  local result = s1
  local function add_all(node)
    if node then
      add_all(node.left)
      result = caml_set_add_internal(cmp, node.elt, result)
      add_all(node.right)
    end
  end
  add_all(s2)
  return result
end

--Provides: caml_set_inter_internal
--Requires: caml_set_mem_internal, caml_set_add_internal
function caml_set_inter_internal(cmp, s1, s2)
  if not s1 or not s2 then
    return nil
  end

  local result = nil
  local function check_all(node)
    if node then
      check_all(node.left)
      if caml_set_mem_internal(cmp, node.elt, s2) then
        result = caml_set_add_internal(cmp, node.elt, result)
      end
      check_all(node.right)
    end
  end
  check_all(s1)
  return result
end

--Provides: caml_set_diff_internal
--Requires: caml_set_mem_internal, caml_set_add_internal
function caml_set_diff_internal(cmp, s1, s2)
  if not s1 then
    return nil
  end
  if not s2 then
    return s1
  end

  local result = nil
  local function check_all(node)
    if node then
      check_all(node.left)
      if not caml_set_mem_internal(cmp, node.elt, s2) then
        result = caml_set_add_internal(cmp, node.elt, result)
      end
      check_all(node.right)
    end
  end
  check_all(s1)
  return result
end

--Provides: caml_set_iter_internal
function caml_set_iter_internal(f, node)
  if not node then
    return
  end
  caml_set_iter_internal(f, node.left)
  f(node.elt)
  caml_set_iter_internal(f, node.right)
end

--Provides: caml_set_fold_internal
function caml_set_fold_internal(f, node, acc)
  if not node then
    return acc
  end
  acc = caml_set_fold_internal(f, node.left, acc)
  acc = f(node.elt, acc)
  acc = caml_set_fold_internal(f, node.right, acc)
  return acc
end

--Provides: caml_set_for_all_internal
function caml_set_for_all_internal(p, node)
  if not node then
    return true
  end
  return p(node.elt) and caml_set_for_all_internal(p, node.left) and caml_set_for_all_internal(p, node.right)
end

--Provides: caml_set_exists_internal
function caml_set_exists_internal(p, node)
  if not node then
    return false
  end
  return p(node.elt) or caml_set_exists_internal(p, node.left) or caml_set_exists_internal(p, node.right)
end

--Provides: caml_set_cardinal_internal
function caml_set_cardinal_internal(node)
  if not node then
    return 0
  end
  return 1 + caml_set_cardinal_internal(node.left) + caml_set_cardinal_internal(node.right)
end

--Provides: caml_set_filter_internal
--Requires: caml_set_create_node, caml_set_balance, caml_set_min_node, caml_set_remove_internal
function caml_set_filter_internal(cmp, p, node)
  if not node then
    return nil
  end

  local left = caml_set_filter_internal(cmp, p, node.left)
  local right = caml_set_filter_internal(cmp, p, node.right)

  if p(node.elt) then
    local result = caml_set_create_node(node.elt, left, right)
    return caml_set_balance(result)
  else
    if not left then
      return right
    elseif not right then
      return left
    else
      local min = caml_set_min_node(right)
      local new_right = caml_set_remove_internal(cmp, min.elt, right)
      local result = caml_set_create_node(min.elt, left, new_right)
      return caml_set_balance(result)
    end
  end
end

--Provides: caml_set_partition_internal
--Requires: caml_set_create_node, caml_set_balance, caml_set_union_internal
function caml_set_partition_internal(cmp, p, node)
  if not node then
    return nil, nil
  end

  local left_t, left_f = caml_set_partition_internal(cmp, p, node.left)
  local right_t, right_f = caml_set_partition_internal(cmp, p, node.right)

  if p(node.elt) then
    local t = caml_set_create_node(node.elt, left_t, right_t)
    return caml_set_balance(t), caml_set_union_internal(cmp, left_f, right_f)
  else
    local f = caml_set_create_node(node.elt, left_f, right_f)
    return caml_set_union_internal(cmp, left_t, right_t), caml_set_balance(f)
  end
end

--Provides: caml_set_subset_internal
--Requires: caml_set_for_all_internal, caml_set_mem_internal
function caml_set_subset_internal(cmp, s1, s2)
  if not s1 then
    return true
  end
  if not s2 then
    return false
  end
  return caml_set_for_all_internal(function(elt) return caml_set_mem_internal(cmp, elt, s2) end, s1)
end

--Provides: caml_set_min_elt_internal
function caml_set_min_elt_internal(node)
  if not node then
    return nil
  end
  if not node.left then
    return node.elt
  end
  return caml_set_min_elt_internal(node.left)
end

--Provides: caml_set_max_elt_internal
function caml_set_max_elt_internal(node)
  if not node then
    return nil
  end
  if not node.right then
    return node.elt
  end
  return caml_set_max_elt_internal(node.right)
end


--Provides: caml_set_empty
function caml_set_empty(_unit)
  return nil
end

--Provides: caml_set_add
--Requires: caml_set_add_internal
function caml_set_add(cmp, elt, set)
  return caml_set_add_internal(cmp, elt, set)
end

--Provides: caml_set_remove
--Requires: caml_set_remove_internal
function caml_set_remove(cmp, elt, set)
  return caml_set_remove_internal(cmp, elt, set)
end

--Provides: caml_set_mem
--Requires: caml_set_mem_internal, caml_true_val, caml_false_val
function caml_set_mem(cmp, elt, set)
  if caml_set_mem_internal(cmp, elt, set) then
    return caml_true_val
  else
    return caml_false_val
  end
end

--Provides: caml_set_union
--Requires: caml_set_union_internal
function caml_set_union(cmp, s1, s2)
  return caml_set_union_internal(cmp, s1, s2)
end

--Provides: caml_set_inter
--Requires: caml_set_inter_internal
function caml_set_inter(cmp, s1, s2)
  return caml_set_inter_internal(cmp, s1, s2)
end

--Provides: caml_set_diff
--Requires: caml_set_diff_internal
function caml_set_diff(cmp, s1, s2)
  return caml_set_diff_internal(cmp, s1, s2)
end

--Provides: caml_set_iter
--Requires: caml_set_iter_internal, caml_unit
function caml_set_iter(f, set)
  caml_set_iter_internal(f, set)
  return caml_unit
end

--Provides: caml_set_fold
--Requires: caml_set_fold_internal
function caml_set_fold(f, set, init)
  return caml_set_fold_internal(f, set, init)
end

--Provides: caml_set_for_all
--Requires: caml_set_for_all_internal, caml_true_val, caml_false_val
function caml_set_for_all(p, set)
  if caml_set_for_all_internal(p, set) then
    return caml_true_val
  else
    return caml_false_val
  end
end

--Provides: caml_set_exists
--Requires: caml_set_exists_internal, caml_true_val, caml_false_val
function caml_set_exists(p, set)
  if caml_set_exists_internal(p, set) then
    return caml_true_val
  else
    return caml_false_val
  end
end

--Provides: caml_set_cardinal
--Requires: caml_set_cardinal_internal
function caml_set_cardinal(set)
  return caml_set_cardinal_internal(set)
end

--Provides: caml_set_is_empty
--Requires: caml_true_val, caml_false_val
function caml_set_is_empty(set)
  if set == nil then
    return caml_true_val
  else
    return caml_false_val
  end
end

--Provides: caml_set_filter
--Requires: caml_set_filter_internal
function caml_set_filter(cmp, p, set)
  return caml_set_filter_internal(cmp, p, set)
end

--Provides: caml_set_partition
--Requires: caml_set_partition_internal
function caml_set_partition(cmp, p, set)
  local t, f = caml_set_partition_internal(cmp, p, set)
  return {tag = 0, [1] = t, [2] = f}
end

--Provides: caml_set_subset
--Requires: caml_set_subset_internal, caml_true_val, caml_false_val
function caml_set_subset(cmp, s1, s2)
  if caml_set_subset_internal(cmp, s1, s2) then
    return caml_true_val
  else
    return caml_false_val
  end
end

--Provides: caml_set_min_elt
--Requires: caml_set_min_elt_internal, caml_raise_not_found
function caml_set_min_elt(set)
  local min = caml_set_min_elt_internal(set)
  if min == nil then
    caml_raise_not_found()
  end
  return min
end

--Provides: caml_set_max_elt
--Requires: caml_set_max_elt_internal, caml_raise_not_found
function caml_set_max_elt(set)
  local max = caml_set_max_elt_internal(set)
  if max == nil then
    caml_raise_not_found()
  end
  return max
end

--Provides: caml_set_equal
--Requires: caml_set_cardinal_internal, caml_set_subset_internal, caml_true_val, caml_false_val
function caml_set_equal(cmp, s1, s2)
  if caml_set_cardinal_internal(s1) ~= caml_set_cardinal_internal(s2) then
    return caml_false_val
  end
  if caml_set_subset_internal(cmp, s1, s2) then
    return caml_true_val
  else
    return caml_false_val
  end
end


-- Runtime: compare
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_is_ocaml_string
function caml_is_ocaml_string(v)
  if type(v) ~= "table" then
    return false
  end
  if v.tag ~= nil then
    return false
  end
  for k, val in pairs(v) do
    if type(k) ~= "number" or type(val) ~= "number" then
      return false
    end
  end
  return true
end

--Provides: caml_is_ocaml_block
function caml_is_ocaml_block(v)
  if type(v) ~= "table" then
    return false
  end
  return v.tag ~= nil and type(v.tag) == "number"
end

--Provides: caml_compare_tag
--Requires: caml_is_ocaml_string, caml_is_ocaml_block
function caml_compare_tag(v)
  local t = type(v)

  if t == "number" then
    return 1000
  elseif t == "string" then
    return 12520
  elseif t == "boolean" then
    return 1002
  elseif t == "nil" then
    return 1003
  elseif t == "function" then
    return 1247
  elseif t == "table" then
    if caml_is_ocaml_string(v) then
      return 252
    elseif caml_is_ocaml_block(v) then
      local tag = v.tag
      if tag == 250 then
        return 250
      end
      return tag == 254 and 0 or tag
    else
      return 1001
    end
  else
    return 1004
  end
end

--Provides: caml_compare_ocaml_strings
function caml_compare_ocaml_strings(a, b)
  local len_a = #a
  local len_b = #b
  local min_len = len_a < len_b and len_a or len_b

  for i = 1, min_len do
    if a[i] < b[i] then
      return -1
    elseif a[i] > b[i] then
      return 1
    end
  end

  if len_a < len_b then
    return -1
  elseif len_a > len_b then
    return 1
  else
    return 0
  end
end

--Provides: caml_compare_numbers
function caml_compare_numbers(a, b)
  if a < b then
    return -1
  elseif a > b then
    return 1
  elseif a == b then
    return 0
  else
    if a ~= a then
      if b ~= b then
        return 0
      else
        return -1
      end
    else
      return 1
    end
  end
end

--Provides: caml_compare_val
--Requires: caml_compare_tag, caml_is_ocaml_block, caml_compare_numbers, caml_compare_ocaml_strings
function caml_compare_val(a, b, total)
  local stack = {}

  while true do
    -- Use repeat-until to enable breaking out and restarting the outer loop
    repeat
      if not (total and a == b) then
        local tag_a = caml_compare_tag(a)

        if tag_a == 250 and caml_is_ocaml_block(a) then
          a = a[1]
          break  -- Restart outer loop
        end

        local tag_b = caml_compare_tag(b)

        if tag_b == 250 and caml_is_ocaml_block(b) then
          b = b[1]
          break  -- Restart outer loop
        end

        if tag_a ~= tag_b then
          if tag_a < tag_b then
            return -1
          else
            return 1
          end
        end

        if tag_a == 1000 then
          local result = caml_compare_numbers(a, b)
          if result ~= 0 then
            return result
          end
        elseif tag_a == 12520 then
          if a < b then
            return -1
          elseif a > b then
            return 1
          end
        elseif tag_a == 252 then
          if a ~= b then
            local result = caml_compare_ocaml_strings(a, b)
            if result ~= 0 then
              return result
            end
          end
        elseif tag_a == 1002 then
          if a ~= b then
            if not a then
              return -1
            else
              return 1
            end
          end
        elseif tag_a == 1003 then
        elseif tag_a == 1247 then
          error("compare: functional value")
        elseif tag_a == 1001 or tag_a == 1004 then
          if a < b then
            return -1
          elseif a > b then
            return 1
          elseif a ~= b then
            if total then
              return 1
            else
              error("compare: incomparable values")
            end
          end
        elseif tag_a == 248 then
          if caml_is_ocaml_block(a) and caml_is_ocaml_block(b) then
            local id_a = a[2] or 0
            local id_b = b[2] or 0
            if id_a < id_b then
              return -1
            elseif id_a > id_b then
              return 1
            end
          end
        else
          if caml_is_ocaml_block(a) and caml_is_ocaml_block(b) then
            local len_a = #a
            local len_b = #b

            if len_a ~= len_b then
              if len_a < len_b then
                return -1
              else
                return 1
              end
            end

            if len_a > 0 then
              if len_a > 1 then
                table.insert(stack, {a = a, b = b, i = 2})
              end
              a = a[1]
              b = b[1]
              break  -- Restart outer loop
            end
          end
        end
      end

      -- If we reach here, we didn't break, so handle stack
      if #stack == 0 then
        return 0
      end

      local frame = table.remove(stack)
      local parent_a = frame.a
      local parent_b = frame.b
      local i = frame.i

      if i + 1 <= #parent_a then
        table.insert(stack, {a = parent_a, b = parent_b, i = i + 1})
      end

      a = parent_a[i]
      b = parent_b[i]
    until true  -- Single iteration, but allows break to restart outer loop
  end
end

--Provides: caml_compare
--Requires: caml_compare_val
function caml_compare(a, b)
  return caml_compare_val(a, b, true)
end

--Provides: caml_int_compare
function caml_int_compare(a, b)
  if a < b then
    return -1
  elseif a > b then
    return 1
  else
    return 0
  end
end

--Provides: caml_int32_compare
function caml_int32_compare(a, b)
  if a < b then
    return -1
  elseif a > b then
    return 1
  else
    return 0
  end
end

--Provides: caml_nativeint_compare
function caml_nativeint_compare(a, b)
  if a < b then
    return -1
  elseif a > b then
    return 1
  else
    return 0
  end
end

--Provides: caml_float_compare
function caml_float_compare(a, b)
  if a ~= a then
    if b ~= b then
      return 0
    else
      return 1
    end
  end
  if b ~= b then
    return -1
  end

  if a < b then
    return -1
  elseif a > b then
    return 1
  else
    return 0
  end
end

--Provides: caml_equal
--Requires: caml_compare_val
function caml_equal(x, y)
  local success, result = pcall(function()
    return caml_compare_val(x, y, false) == 0
  end)

  if success then
    return result and 1 or 0
  else
    error(result)
  end
end

--Provides: caml_notequal
--Requires: caml_compare_val
function caml_notequal(x, y)
  local success, result = pcall(function()
    return caml_compare_val(x, y, false) ~= 0
  end)

  if success then
    return result and 1 or 0
  else
    error(result)
  end
end

--Provides: caml_lessthan
--Requires: caml_compare_val
function caml_lessthan(x, y)
  local success, result = pcall(function()
    return caml_compare_val(x, y, false) < 0
  end)

  if success then
    return result and 1 or 0
  else
    error(result)
  end
end

--Provides: caml_lessequal
--Requires: caml_compare_val
function caml_lessequal(x, y)
  local success, result = pcall(function()
    return caml_compare_val(x, y, false) <= 0
  end)

  if success then
    return result and 1 or 0
  else
    error(result)
  end
end

--Provides: caml_greaterthan
--Requires: caml_compare_val
function caml_greaterthan(x, y)
  local success, result = pcall(function()
    return caml_compare_val(x, y, false) > 0
  end)

  if success then
    return result and 1 or 0
  else
    error(result)
  end
end

--Provides: caml_greaterequal
--Requires: caml_compare_val
function caml_greaterequal(x, y)
  local success, result = pcall(function()
    return caml_compare_val(x, y, false) >= 0
  end)

  if success then
    return result and 1 or 0
  else
    error(result)
  end
end

--Provides: caml_min
--Requires: caml_compare
function caml_min(x, y)
  if caml_compare(x, y) <= 0 then
    return x
  else
    return y
  end
end

--Provides: caml_max
--Requires: caml_compare
function caml_max(x, y)
  if caml_compare(x, y) >= 0 then
    return x
  else
    return y
  end
end


-- Runtime: hash
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_hash_bit_xor
function caml_hash_bit_xor(a, b)
  a = a % 0x100000000
  b = b % 0x100000000
  local result = 0
  local bit_val = 1
  for i = 0, 31 do
    local a_bit = a % 2
    local b_bit = b % 2
    if a_bit ~= b_bit then
      result = result + bit_val
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit_val = bit_val * 2
  end
  return result % 0x100000000
end

--Provides: caml_hash_bit_lshift
function caml_hash_bit_lshift(a, n)
  a = a % 0x100000000
  n = n % 32
  local result = a * (2 ^ n)
  return math.floor(result % 0x100000000)
end

--Provides: caml_hash_bit_rshift
function caml_hash_bit_rshift(a, n)
  a = a % 0x100000000
  n = n % 32
  local result = a / (2 ^ n)
  return math.floor(result % 0x100000000)
end

--Provides: caml_hash_bit_and
function caml_hash_bit_and(a, b)
  a = a % 0x100000000
  b = b % 0x100000000
  local result = 0
  local bit_val = 1
  for i = 0, 31 do
    if a % 2 == 1 and b % 2 == 1 then
      result = result + bit_val
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit_val = bit_val * 2
  end
  return result % 0x100000000
end

--Provides: caml_hash_bit_or
function caml_hash_bit_or(a, b)
  a = a % 0x100000000
  b = b % 0x100000000
  local result = 0
  local bit_val = 1
  for i = 0, 31 do
    if a % 2 == 1 or b % 2 == 1 then
      result = result + bit_val
    end
    a = math.floor(a / 2)
    b = math.floor(b / 2)
    bit_val = bit_val * 2
  end
  return result % 0x100000000
end

--Provides: caml_hash_mul32
function caml_hash_mul32(a, b)
  a = a % 0x100000000
  b = b % 0x100000000
  local result = a * b
  return math.floor(result % 0x100000000)
end

--Provides: caml_hash_to_int32
function caml_hash_to_int32(n)
  n = math.floor(n % 0x100000000)
  if n >= 0x80000000 then
    return n - 0x100000000
  end
  return n
end

--Provides: caml_hash_mix_int
--Requires: caml_hash_mul32, caml_hash_bit_or, caml_hash_bit_lshift, caml_hash_bit_rshift, caml_hash_bit_xor, caml_hash_to_int32
function caml_hash_mix_int(h, d)
  d = caml_hash_mul32(d, 0xcc9e2d51)
  d = caml_hash_bit_or(caml_hash_bit_lshift(d, 15), caml_hash_bit_rshift(d, 17))  -- ROTL32(d, 15)
  d = caml_hash_mul32(d, 0x1b873593)
  h = caml_hash_bit_xor(h, d)
  h = caml_hash_bit_or(caml_hash_bit_lshift(h, 13), caml_hash_bit_rshift(h, 19))  -- ROTL32(h, 13)
  h = caml_hash_to_int32(caml_hash_to_int32(h + caml_hash_bit_lshift(h, 2)) + 0xe6546b64)
  return h
end

--Provides: caml_hash_mix_final
--Requires: caml_hash_bit_xor, caml_hash_bit_rshift, caml_hash_mul32
function caml_hash_mix_final(h)
  h = caml_hash_bit_xor(h, caml_hash_bit_rshift(h, 16))
  h = caml_hash_mul32(h, 0x85ebca6b)
  h = caml_hash_bit_xor(h, caml_hash_bit_rshift(h, 13))
  h = caml_hash_mul32(h, 0xc2b2ae35)
  h = caml_hash_bit_xor(h, caml_hash_bit_rshift(h, 16))
  return h
end

--Provides: caml_hash_mix_float
--Requires: caml_hash_bit_and, caml_hash_bit_rshift, caml_hash_bit_lshift, caml_hash_bit_or, caml_hash_mix_int, caml_hash_to_int32
function caml_hash_mix_float(hash, v)
  local lo, hi

  if v == 0 then
    if 1/v == -math.huge then
      lo, hi = 0, 0x80000000
    else
      lo, hi = 0, 0
    end
  elseif v ~= v then
    lo, hi = 0x00000001, 0x7ff00000
  elseif v == math.huge then
    lo, hi = 0, 0x7ff00000
  elseif v == -math.huge then
    lo, hi = 0, 0xfff00000
  else
    local sign = v < 0 and 1 or 0
    v = math.abs(v)

    local exp = math.floor(math.log(v) / math.log(2))
    local frac = v / (2 ^ exp) - 1

    exp = exp + 1023
    if exp <= 0 then
      exp = 0
      frac = v / (2 ^ -1022)
    elseif exp >= 0x7ff then
      exp = 0x7ff
      frac = 0
    end

    local frac_hi = math.floor(frac * (2 ^ 20))
    local frac_lo = math.floor((frac * (2 ^ 52)) % (2 ^ 32))

    hi = caml_hash_bit_or(caml_hash_bit_lshift(sign, 31), caml_hash_bit_or(caml_hash_bit_lshift(exp, 20), frac_hi))
    lo = frac_lo
  end

  local exp = caml_hash_bit_and(caml_hash_bit_rshift(hi, 20), 0x7ff)
  if exp == 0x7ff then
    local frac_hi = caml_hash_bit_and(hi, 0xfffff)
    if frac_hi ~= 0 or lo ~= 0 then
      hi = 0x7ff00000
      lo = 0x00000001
    end
  elseif hi == 0x80000000 and lo == 0 then
    hi = 0
  end

  hash = caml_hash_mix_int(hash, caml_hash_to_int32(lo))
  hash = caml_hash_mix_int(hash, caml_hash_to_int32(hi))
  return hash
end

--Provides: caml_hash_mix_string
--Requires: caml_hash_bit_or, caml_hash_bit_lshift, caml_hash_mix_int, caml_hash_to_int32, caml_hash_bit_xor
function caml_hash_mix_string(h, s)
  local len = #s
  local i = 1
  local w

  while i + 3 <= len do
    w = caml_hash_bit_or(
      caml_hash_bit_or(s[i], caml_hash_bit_lshift(s[i + 1], 8)),
      caml_hash_bit_or(caml_hash_bit_lshift(s[i + 2], 16), caml_hash_bit_lshift(s[i + 3], 24))
    )
    h = caml_hash_mix_int(h, caml_hash_to_int32(w))
    i = i + 4
  end

  w = 0
  local remaining = len - i + 1
  if remaining == 3 then
    w = caml_hash_bit_lshift(s[i + 2], 16)
    w = caml_hash_bit_or(w, caml_hash_bit_lshift(s[i + 1], 8))
    w = caml_hash_bit_or(w, s[i])
    h = caml_hash_mix_int(h, caml_hash_to_int32(w))
  elseif remaining == 2 then
    w = caml_hash_bit_or(caml_hash_bit_lshift(s[i + 1], 8), s[i])
    h = caml_hash_mix_int(h, caml_hash_to_int32(w))
  elseif remaining == 1 then
    w = s[i]
    h = caml_hash_mix_int(h, caml_hash_to_int32(w))
  end

  h = caml_hash_bit_xor(h, len)
  return h
end

--Provides: caml_hash
--Requires: caml_hash_mix_int, caml_hash_mix_float, caml_hash_mix_string, caml_hash_mix_final, caml_is_ocaml_string, caml_is_ocaml_block, caml_hash_bit_or, caml_hash_bit_lshift, caml_hash_to_int32, caml_hash_bit_and
function caml_hash(count, limit, seed, obj)
  local sz = limit
  if sz < 0 or sz > 256 then
    sz = 256
  end

  local num = count
  local h = seed
  local queue = {obj}
  local rd = 1
  local wr = 2

  while rd < wr and num > 0 do
    local v = queue[rd]
    rd = rd + 1

    if type(v) == "number" then
      -- Lua 5.1: no math.type(), all numbers are doubles
      -- Check if integer-valued and in 31-bit signed range
      if v == math.floor(v) and v >= -0x40000000 and v < 0x40000000 then
        h = caml_hash_mix_int(h, caml_hash_to_int32(v + v + 1))
        num = num - 1
      else
        h = caml_hash_mix_float(h, v)
        num = num - 1
      end
    elseif type(v) == "string" then
      local bytes = {string.byte(v, 1, -1)}
      h = caml_hash_mix_string(h, bytes)
      num = num - 1
    elseif caml_is_ocaml_string(v) then
      h = caml_hash_mix_string(h, v)
      num = num - 1
    elseif caml_is_ocaml_block(v) then
      local tag_value = caml_hash_bit_or(caml_hash_bit_lshift(#v, 10), v.tag)
      h = caml_hash_mix_int(h, caml_hash_to_int32(tag_value))

      for i = 1, #v do
        if wr >= sz then
          break
        end
        queue[wr] = v[i]
        wr = wr + 1
      end
    elseif type(v) == "table" then
      h = caml_hash_mix_int(h, caml_hash_to_int32(#v))

      for i = 1, #v do
        if wr >= sz then
          break
        end
        queue[wr] = v[i]
        wr = wr + 1
      end
    end
  end

  h = caml_hash_mix_final(h)
  return caml_hash_bit_and(h, 0x3fffffff)
end

--Provides: caml_hash_default
--Requires: caml_hash
function caml_hash_default(obj)
  return caml_hash(10, 100, 0, obj)
end


-- Runtime: hashtbl
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


--Provides: caml_hashtbl_equal
function caml_hashtbl_equal(a, b)
  if a == b then
    return true
  end

  local ta = type(a)
  local tb = type(b)

  if ta ~= tb then
    return false
  end

  if ta ~= "table" then
    return false
  end

  local len_a = #a
  local len_b = #b

  if len_a ~= len_b then
    return false
  end

  for i = 1, len_a do
    if not caml_hashtbl_equal(a[i], b[i]) then
      return false
    end
  end

  if a.tag ~= b.tag then
    return false
  end

  return true
end

--Provides: caml_hashtbl_get_bucket_index
--Requires: caml_hash_default
function caml_hashtbl_get_bucket_index(tbl, key)
  local hash = caml_hash_default(key)
  return (hash % tbl.capacity) + 1
end

--Provides: caml_hashtbl_resize
--Requires: caml_hashtbl_get_bucket_index, caml_hashtbl_equal
function caml_hashtbl_resize(tbl)
  local new_capacity = tbl.capacity * 2
  local old_buckets = tbl.buckets

  tbl.buckets = {}
  for i = 1, new_capacity do
    tbl.buckets[i] = {}
  end

  tbl.capacity = new_capacity
  local old_size = tbl.size
  tbl.size = 0

  for _, bucket in ipairs(old_buckets) do
    for _, entry in ipairs(bucket) do
      local idx = caml_hashtbl_get_bucket_index(tbl, entry.key)
      local new_bucket = tbl.buckets[idx]
      table.insert(new_bucket, 1, {key = entry.key, value = entry.value})
      tbl.size = tbl.size + 1
    end
  end
end

--Provides: caml_hash_create
function caml_hash_create(initial_size)
  local size = initial_size or 16
  if size < 1 then
    size = 16
  end

  local tbl = {
    buckets = {},
    size = 0,
    capacity = size,
  }

  for i = 1, size do
    tbl.buckets[i] = {}
  end

  return tbl
end

--Provides: caml_hash_add
--Requires: caml_hashtbl_resize, caml_hashtbl_get_bucket_index
function caml_hash_add(tbl, key, value)
  if tbl.size >= tbl.capacity * 0.75 then
    caml_hashtbl_resize(tbl)
  end

  local idx = caml_hashtbl_get_bucket_index(tbl, key)
  local bucket = tbl.buckets[idx]

  table.insert(bucket, 1, {key = key, value = value})
  tbl.size = tbl.size + 1
end

--Provides: caml_hash_find
--Requires: caml_hashtbl_get_bucket_index, caml_hashtbl_equal
function caml_hash_find(tbl, key)
  local idx = caml_hashtbl_get_bucket_index(tbl, key)
  local bucket = tbl.buckets[idx]

  for _, entry in ipairs(bucket) do
    if caml_hashtbl_equal(entry.key, key) then
      return entry.value
    end
  end

  error("Not_found")
end

--Provides: caml_hash_find_opt
--Requires: caml_hashtbl_get_bucket_index, caml_hashtbl_equal
function caml_hash_find_opt(tbl, key)
  local idx = caml_hashtbl_get_bucket_index(tbl, key)
  local bucket = tbl.buckets[idx]

  for _, entry in ipairs(bucket) do
    if caml_hashtbl_equal(entry.key, key) then
      return entry.value
    end
  end

  return nil
end

--Provides: caml_hash_remove
--Requires: caml_hashtbl_get_bucket_index, caml_hashtbl_equal
function caml_hash_remove(tbl, key)
  local idx = caml_hashtbl_get_bucket_index(tbl, key)
  local bucket = tbl.buckets[idx]

  for i, entry in ipairs(bucket) do
    if caml_hashtbl_equal(entry.key, key) then
      table.remove(bucket, i)
      tbl.size = tbl.size - 1
      return
    end
  end
end

--Provides: caml_hash_replace
--Requires: caml_hashtbl_get_bucket_index, caml_hashtbl_equal
function caml_hash_replace(tbl, key, value)
  local idx = caml_hashtbl_get_bucket_index(tbl, key)
  local bucket = tbl.buckets[idx]

  local removed_count = 0
  for i = #bucket, 1, -1 do
    if caml_hashtbl_equal(bucket[i].key, key) then
      table.remove(bucket, i)
      removed_count = removed_count + 1
    end
  end

  table.insert(bucket, 1, {key = key, value = value})

  tbl.size = tbl.size - removed_count + 1
end

--Provides: caml_hash_mem
--Requires: caml_hashtbl_get_bucket_index, caml_hashtbl_equal
function caml_hash_mem(tbl, key)
  local idx = caml_hashtbl_get_bucket_index(tbl, key)
  local bucket = tbl.buckets[idx]

  for _, entry in ipairs(bucket) do
    if caml_hashtbl_equal(entry.key, key) then
      return true
    end
  end

  return false
end

--Provides: caml_hash_length
function caml_hash_length(tbl)
  return tbl.size
end

--Provides: caml_hash_clear
function caml_hash_clear(tbl)
  for i = 1, tbl.capacity do
    tbl.buckets[i] = {}
  end
  tbl.size = 0
end

--Provides: caml_hash_iter
function caml_hash_iter(tbl, f)
  for _, bucket in ipairs(tbl.buckets) do
    for _, entry in ipairs(bucket) do
      f(entry.key, entry.value)
    end
  end
end

--Provides: caml_hash_fold
function caml_hash_fold(tbl, f, init)
  local acc = init
  for _, bucket in ipairs(tbl.buckets) do
    for _, entry in ipairs(bucket) do
      acc = f(entry.key, entry.value, acc)
    end
  end
  return acc
end

--Provides: caml_hash_entries
function caml_hash_entries(tbl)
  local bucket_idx = 1
  local entry_idx = 0

  return function()
    while bucket_idx <= tbl.capacity do
      entry_idx = entry_idx + 1
      local bucket = tbl.buckets[bucket_idx]

      if entry_idx <= #bucket then
        local entry = bucket[entry_idx]
        return entry.key, entry.value
      end

      bucket_idx = bucket_idx + 1
      entry_idx = 0
    end

    return nil
  end
end

--Provides: caml_hash_keys
function caml_hash_keys(tbl)
  local keys = {}
  for _, bucket in ipairs(tbl.buckets) do
    for _, entry in ipairs(bucket) do
      table.insert(keys, entry.key)
    end
  end
  return keys
end

--Provides: caml_hash_values
function caml_hash_values(tbl)
  local values = {}
  for _, bucket in ipairs(tbl.buckets) do
    for _, entry in ipairs(bucket) do
      table.insert(values, entry.value)
    end
  end
  return values
end

--Provides: caml_hash_to_array
function caml_hash_to_array(tbl)
  local result = {}
  for _, bucket in ipairs(tbl.buckets) do
    for _, entry in ipairs(bucket) do
      table.insert(result, {entry.key, entry.value})
    end
  end
  return result
end

--Provides: caml_hash_stats
function caml_hash_stats(tbl)
  local max_bucket_size = 0
  local empty_buckets = 0
  local total_buckets = tbl.capacity

  for _, bucket in ipairs(tbl.buckets) do
    local bucket_size = #bucket
    if bucket_size == 0 then
      empty_buckets = empty_buckets + 1
    end
    if bucket_size > max_bucket_size then
      max_bucket_size = bucket_size
    end
  end

  return {
    size = tbl.size,
    capacity = tbl.capacity,
    load_factor = tbl.size / tbl.capacity,
    max_bucket_size = max_bucket_size,
    empty_buckets = empty_buckets,
    avg_bucket_size = tbl.size / (tbl.capacity - empty_buckets),
  }
end


-- Runtime: closure
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- Metatable for callable wrapped closures
-- This makes tables with {l=arity, [1]=fn} callable like functions
local closure_mt = {
  __call = function(t, ...)
    return t[1](...)
  end,
  -- Add __closure marker to distinguish our closures from other tables
  __closure = true
}

--Provides: caml_make_closure
function caml_make_closure(arity, fn)
  -- Create a callable table that acts like a JavaScript function with .l property
  -- The table has:
  --   .l = arity (matches JavaScript's f.l)
  --   [1] = actual function
  --   metatable.__closure = true (marker to identify our closures)
  return setmetatable({l = arity, [1] = fn}, closure_mt)
end


-- Runtime: fun
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

--Provides: caml_call_gen
--Requires: caml_make_closure
function caml_call_gen(f, args)
  -- Normalize f to ensure consistent handling
  -- f can be:
  --   1. A wrapped closure from caml_make_closure: {l=arity, [1]=fn} with __closure metatable
  --   2. A plain function (shouldn't happen in normal operation)
  --   3. Another table with .l property (from partial application)

  local n, actual_f

  -- Check if f is a table with .l property (matches JavaScript f.l)
  if type(f) == "table" and f.l then
    n = f.l

    -- Check if it's one of our wrapped closures or has function at [1]
    if type(f[1]) == "function" then
      -- It has a function at [1], use it
      actual_f = f[1]
    else
      -- f itself might be callable via metatable
      local mt = getmetatable(f)
      if mt and mt.__call then
        actual_f = f
      else
        error("caml_call_gen: table has .l but no callable function")
      end
    end
  elseif type(f) == "function" then
    -- Plain function - shouldn't happen in normal OCaml code
    error("caml_call_gen: plain function has no arity information")
  else
    error("caml_call_gen: not a function or callable table")
  end

  local argsLen = #args
  local d = n - argsLen

  if d == 0 then
    -- Exact match: call function directly with all arguments
    return actual_f(unpack(args))
  elseif d < 0 then
    -- Over-application: more args than needed
    -- Call f with first n arguments, then apply rest to result
    local first_args = {}
    for i = 1, n do
      first_args[i] = args[i]
    end
    local g = actual_f(unpack(first_args))

    -- If result is not a function or callable table, return it
    if type(g) ~= "function" and type(g) ~= "table" then
      return g
    end

    -- Result is a function/callable, apply remaining arguments recursively
    local rest_args = {}
    for i = n + 1, argsLen do
      rest_args[#rest_args + 1] = args[i]
    end
    return caml_call_gen(g, rest_args)
  else
    -- Under-application: not enough arguments
    -- Build a closure that captures provided args and waits for more
    -- This matches JavaScript's partial application behavior

    local g_fn
    if d == 1 then
      -- Need exactly 1 more argument
      g_fn = function(x)
        local nargs = {}
        for i = 1, argsLen do
          nargs[i] = args[i]
        end
        nargs[argsLen + 1] = x
        return actual_f(unpack(nargs))
      end
    elseif d == 2 then
      -- Need exactly 2 more arguments
      g_fn = function(x, y)
        local nargs = {}
        for i = 1, argsLen do
          nargs[i] = args[i]
        end
        nargs[argsLen + 1] = x
        nargs[argsLen + 2] = y
        return actual_f(unpack(nargs))
      end
    else
      -- Need 3 or more arguments - general case
      -- IMPORTANT FIX: We must create a new partial application closure
      -- that will be called with the remaining arguments
      g_fn = function(...)
        local extra_args = {...}
        -- If no args provided, JavaScript passes undefined (nil in Lua)
        if #extra_args == 0 then
          extra_args = {nil}
        end
        -- Combine captured args with new args and call caml_call_gen again
        -- BUT we need to use the ORIGINAL f with ALL accumulated args
        local combined_args = {}
        for i = 1, argsLen do
          combined_args[i] = args[i]
        end
        for i = 1, #extra_args do
          combined_args[argsLen + i] = extra_args[i]
        end
        -- CRITICAL: Pass the original f (with its full arity), not the partial
        return caml_call_gen(f, combined_args)
      end
    end

    -- Return wrapped closure with correct arity, matching JavaScript behavior
    -- In JavaScript: g.l = d; return g
    return caml_make_closure(d, g_fn)
  end
end

--Provides: caml_apply
--Requires: caml_call_gen
function caml_apply(func, ...)
  local args = {...}
  if type(func) == "table" or type(func) == "function" then
    return caml_call_gen(func, args)
  else
    error("caml_apply expects a function or callable table")
  end
end


-- Runtime: call_helpers
-- Js_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-- Call helpers for curried function application
-- These match js_of_ocaml's caml_call1, caml_call2, etc. in runtime/js/stdlib.js

--Provides: caml_call1
--Requires: caml_call_gen
function caml_call1(f, a0)
  -- DEBUG: Print what we received
  if type(f) == "table" then
    print("DEBUG caml_call1: f is table")
    print("  f.l = " .. tostring(f.l))
    print("  f[1] type = " .. type(f[1]))
    print("  f.tag = " .. tostring(f.tag))
    local mt = getmetatable(f)
    print("  metatable = " .. tostring(mt))
    if mt then
      print("  __call = " .. tostring(mt.__call))
    end
  end

  -- Get arity and actual callable
  local arity, actual_f
  if type(f) == "table" then
    arity = f.l  -- May be nil
    -- Check if it's a wrapped closure {l=arity, [1]=function}
    if type(f[1]) == "function" then
      actual_f = f[1]
    else
      -- Try calling as-is (might have __call metatable)
      actual_f = f
    end
  elseif type(f) == "function" then
    arity = nil
    actual_f = f
  else
    actual_f = f  -- Hope for the best
    arity = nil
  end

  -- If arity is 1 (or unknown), call directly
  if arity == 1 or arity == nil then
    return actual_f(a0)
  else
    -- Wrong arity, use generic call
    return caml_call_gen(f, {a0})
  end
end

--Provides: caml_call2
--Requires: caml_call_gen
function caml_call2(f, a0, a1)
  local arity, actual_f
  if type(f) == "table" then
    arity = f.l
    if type(f[1]) == "function" then
      actual_f = f[1]
    else
      actual_f = f
    end
  else
    arity = nil
    actual_f = f
  end

  if arity == 2 or arity == nil then
    return actual_f(a0, a1)
  else
    return caml_call_gen(f, {a0, a1})
  end
end

--Provides: caml_call3
--Requires: caml_call_gen
function caml_call3(f, a0, a1, a2)
  local arity, actual_f
  if type(f) == "table" then
    arity = f.l
    if type(f[1]) == "function" then
      actual_f = f[1]
    else
      actual_f = f
    end
  else
    arity = nil
    actual_f = f
  end

  if arity == 3 or arity == nil then
    return actual_f(a0, a1, a2)
  else
    return caml_call_gen(f, {a0, a1, a2})
  end
end

--Provides: caml_call4
--Requires: caml_call_gen
function caml_call4(f, a0, a1, a2, a3)
  local arity, actual_f
  if type(f) == "table" then
    arity = f.l
    if type(f[1]) == "function" then
      actual_f = f[1]
    else
      actual_f = f
    end
  else
    arity = nil
    actual_f = f
  end

  if arity == 4 or arity == nil then
    return actual_f(a0, a1, a2, a3)
  else
    return caml_call_gen(f, {a0, a1, a2, a3})
  end
end

--Provides: caml_call5
--Requires: caml_call_gen
function caml_call5(f, a0, a1, a2, a3, a4)
  local arity, actual_f
  if type(f) == "table" then
    arity = f.l
    if type(f[1]) == "function" then
      actual_f = f[1]
    else
      actual_f = f
    end
  else
    arity = nil
    actual_f = f
  end

  if arity == 5 or arity == nil then
    return actual_f(a0, a1, a2, a3, a4)
  else
    return caml_call_gen(f, {a0, a1, a2, a3, a4})
  end
end


-- Runtime: bigarray
-- Lua_of_ocaml runtime support
-- Bigarray support (OCaml Bigarray module)
--
-- Provides multi-dimensional arrays with various numeric types.
-- Supports both C layout (row-major) and Fortran layout (column-major).
--
-- Note: Lua doesn't have typed arrays like JavaScript. We use regular tables
-- with metadata to track element kind and provide bounds checking.

--Provides: caml_ba_get_size_per_element
function caml_ba_get_size_per_element(kind)
  -- Element size per kind (in number of storage elements)
  -- kind values: FLOAT32=0, FLOAT64=1, INT8_SIGNED=2, INT8_UNSIGNED=3,
  --   INT16_SIGNED=4, INT16_UNSIGNED=5, INT32=6, INT64=7, NATIVEINT=8,
  --   CAML_INT=9, COMPLEX32=10, COMPLEX64=11, CHAR=12, FLOAT16=13
  if kind == 7 or kind == 10 or kind == 11 then
    -- INT64 or COMPLEX32 or COMPLEX64
    return 2  -- Stored as 2 numbers
  else
    return 1
  end
end

--Provides: caml_ba_clamp_value
function caml_ba_clamp_value(kind, value)
  -- Range clamping for different kinds
  if kind == 2 then
    -- INT8_SIGNED
    value = math.floor(value)
    if value < -128 then return -128 end
    if value > 127 then return 127 end
    return value
  elseif kind == 3 or kind == 12 then
    -- INT8_UNSIGNED or CHAR
    value = math.floor(value)
    if value < 0 then return 0 end
    if value > 255 then return 255 end
    return value
  elseif kind == 4 then
    -- INT16_SIGNED
    value = math.floor(value)
    if value < -32768 then return -32768 end
    if value > 32767 then return 32767 end
    return value
  elseif kind == 5 then
    -- INT16_UNSIGNED
    value = math.floor(value)
    if value < 0 then return 0 end
    if value > 65535 then return 65535 end
    return value
  elseif kind == 6 or kind == 8 or kind == 9 then
    -- INT32 or NATIVEINT or CAML_INT
    return math.floor(value)
  else
    -- Float types: no clamping, just return as-is
    return value
  end
end

--Provides: caml_ba_create_buffer
--Requires: caml_ba_get_size_per_element
function caml_ba_create_buffer(kind, size)
  -- Create buffer for bigarray data
  local elem_size = caml_ba_get_size_per_element(kind)
  local total_size = size * elem_size
  local buffer = {}

  -- Initialize all elements to 0
  for i = 1, total_size do
    buffer[i] = 0
  end

  return buffer
end

--Provides: caml_ba_get_size
function caml_ba_get_size(dims)
  -- Get total size from dimensions
  local size = 1
  for i = 1, #dims do
    if dims[i] < 0 then
      error("Bigarray.create: negative dimension")
    end
    size = size * dims[i]
  end
  return size
end

--Provides: caml_ba_create_unsafe
function caml_ba_create_unsafe(kind, layout, dims, data)
  -- Create bigarray (unsafe, no validation)
  -- BA_CUSTOM_NAME = "_bigarr02"
  return {
    kind = kind,
    layout = layout,
    dims = dims,
    data = data,
    caml_custom = "_bigarr02"
  }
end

--Provides: caml_ba_create
--Requires: caml_ba_get_size, caml_ba_create_buffer, caml_ba_create_unsafe
function caml_ba_create(kind, layout, dims_ml)
  -- Create bigarray with validation
  -- dims_ml can be either a Lua table or OCaml array representation
  local dims
  if type(dims_ml) == "table" then
    if dims_ml[0] ~= nil then
      -- OCaml array (0-indexed)
      dims = {}
      for i = 0, #dims_ml do
        if dims_ml[i] ~= nil then
          table.insert(dims, dims_ml[i])
        end
      end
    else
      -- Plain Lua table (1-indexed)
      dims = dims_ml
    end
  else
    error("Bigarray.create: invalid dims")
  end

  local size = caml_ba_get_size(dims)
  local data = caml_ba_create_buffer(kind, size)
  return caml_ba_create_unsafe(kind, layout, dims, data)
end

--Provides: caml_ba_init
function caml_ba_init()
  -- Initialize bigarray module
  return 0
end

--Provides: caml_ba_kind
function caml_ba_kind(ba)
  -- Get bigarray kind
  return ba.kind
end

--Provides: caml_ba_layout
function caml_ba_layout(ba)
  -- Get bigarray layout
  return ba.layout
end

--Provides: caml_ba_num_dims
function caml_ba_num_dims(ba)
  -- Get number of dimensions
  return #ba.dims
end

--Provides: caml_ba_dim
function caml_ba_dim(ba, i)
  -- Get dimension size
  if i < 0 or i >= #ba.dims then
    error("Bigarray.dim")
  end
  return ba.dims[i + 1]  -- Lua is 1-indexed
end

--Provides: caml_ba_dim_1
--Requires: caml_ba_dim
function caml_ba_dim_1(ba)
  -- Get first dimension
  return caml_ba_dim(ba, 0)
end

--Provides: caml_ba_dim_2
--Requires: caml_ba_dim
function caml_ba_dim_2(ba)
  -- Get second dimension
  return caml_ba_dim(ba, 1)
end

--Provides: caml_ba_dim_3
--Requires: caml_ba_dim
function caml_ba_dim_3(ba)
  -- Get third dimension
  return caml_ba_dim(ba, 2)
end

--Provides: caml_ba_change_layout
--Requires: caml_ba_create_unsafe
function caml_ba_change_layout(ba, layout)
  -- Change bigarray layout
  if ba.layout == layout then
    return ba
  end

  -- Reverse dimensions for layout change
  local new_dims = {}
  for i = #ba.dims, 1, -1 do
    table.insert(new_dims, ba.dims[i])
  end

  return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data)
end

--Provides: caml_ba_calculate_offset
function caml_ba_calculate_offset(ba, indices)
  -- Calculate linear offset from multi-dimensional index
  local ofs = 0
  -- LAYOUT: C_LAYOUT=0, FORTRAN_LAYOUT=1

  if ba.layout == 0 then
    -- C layout: row-major, 0-indexed
    for i = 1, #ba.dims do
      local idx = indices[i]
      if idx < 0 or idx >= ba.dims[i] then
        error("array bound error")
      end
      ofs = ofs * ba.dims[i] + idx
    end
  else
    -- Fortran layout: column-major, 1-indexed
    for i = #ba.dims, 1, -1 do
      local idx = indices[i]
      if idx < 1 or idx > ba.dims[i] then
        error("array bound error")
      end
      ofs = ofs * ba.dims[i] + (idx - 1)
    end
  end

  return ofs
end

--Provides: caml_ba_get_generic
--Requires: caml_ba_calculate_offset, caml_ba_get_size_per_element
function caml_ba_get_generic(ba, indices)
  -- Get element at indices
  local ofs = caml_ba_calculate_offset(ba, indices)
  local elem_size = caml_ba_get_size_per_element(ba.kind)

  if ba.kind == 7 then
    -- INT64: stored as two Int32s
    local lo = ba.data[ofs * elem_size + 1]
    local hi = ba.data[ofs * elem_size + 2]
    return {lo, hi}  -- OCaml int64 representation
  elseif ba.kind == 10 or ba.kind == 11 then
    -- COMPLEX32 or COMPLEX64: stored as (real, imag)
    local re = ba.data[ofs * elem_size + 1]
    local im = ba.data[ofs * elem_size + 2]
    return {tag = 0, re, im}  -- OCaml complex representation
  else
    -- Simple scalar types
    return ba.data[ofs + 1]
  end
end

--Provides: caml_ba_set_generic
--Requires: caml_ba_calculate_offset, caml_ba_get_size_per_element, caml_ba_clamp_value
function caml_ba_set_generic(ba, indices, value)
  -- Set element at indices
  local ofs = caml_ba_calculate_offset(ba, indices)
  local elem_size = caml_ba_get_size_per_element(ba.kind)

  if ba.kind == 7 then
    -- INT64: store as two Int32s
    ba.data[ofs * elem_size + 1] = value[1]  -- lo
    ba.data[ofs * elem_size + 2] = value[2]  -- hi
  elseif ba.kind == 10 or ba.kind == 11 then
    -- COMPLEX32 or COMPLEX64: store as (real, imag)
    ba.data[ofs * elem_size + 1] = value[1]  -- real
    ba.data[ofs * elem_size + 2] = value[2]  -- imag
  else
    -- Simple scalar types
    ba.data[ofs + 1] = caml_ba_clamp_value(ba.kind, value)
  end

  return 0  -- unit
end

--Provides: caml_ba_get_1
--Requires: caml_ba_get_generic
function caml_ba_get_1(ba, i0)
  -- Get element from 1D array
  return caml_ba_get_generic(ba, {i0})
end

--Provides: caml_ba_set_1
--Requires: caml_ba_set_generic
function caml_ba_set_1(ba, i0, value)
  -- Set element in 1D array
  return caml_ba_set_generic(ba, {i0}, value)
end

--Provides: caml_ba_unsafe_get_1
--Requires: caml_ba_get_size_per_element
function caml_ba_unsafe_get_1(ba, i0)
  -- Unsafe get (no bounds check)
  local ofs = ba.layout == 0 and i0 or (i0 - 1)
  local elem_size = caml_ba_get_size_per_element(ba.kind)

  if ba.kind == 7 then
    -- INT64
    return {ba.data[ofs * elem_size + 1], ba.data[ofs * elem_size + 2]}
  elseif ba.kind == 10 or ba.kind == 11 then
    -- COMPLEX32 or COMPLEX64
    return {tag = 0, ba.data[ofs * elem_size + 1], ba.data[ofs * elem_size + 2]}
  else
    return ba.data[ofs + 1]
  end
end

--Provides: caml_ba_unsafe_set_1
--Requires: caml_ba_get_size_per_element, caml_ba_clamp_value
function caml_ba_unsafe_set_1(ba, i0, value)
  -- Unsafe set (no bounds check)
  local ofs = ba.layout == 0 and i0 or (i0 - 1)
  local elem_size = caml_ba_get_size_per_element(ba.kind)

  if ba.kind == 7 then
    -- INT64
    ba.data[ofs * elem_size + 1] = value[1]
    ba.data[ofs * elem_size + 2] = value[2]
  elseif ba.kind == 10 or ba.kind == 11 then
    -- COMPLEX32 or COMPLEX64
    ba.data[ofs * elem_size + 1] = value[1]
    ba.data[ofs * elem_size + 2] = value[2]
  else
    ba.data[ofs + 1] = caml_ba_clamp_value(ba.kind, value)
  end

  return 0
end

--Provides: caml_ba_get_2
--Requires: caml_ba_get_generic
function caml_ba_get_2(ba, i0, i1)
  return caml_ba_get_generic(ba, {i0, i1})
end

--Provides: caml_ba_set_2
--Requires: caml_ba_set_generic
function caml_ba_set_2(ba, i0, i1, value)
  return caml_ba_set_generic(ba, {i0, i1}, value)
end

--Provides: caml_ba_unsafe_get_2
--Requires: caml_ba_get_size_per_element
function caml_ba_unsafe_get_2(ba, i0, i1)
  -- For unsafe, skip bounds check
  local ofs = 0

  if ba.layout == 0 then
    -- C layout: row-major, 0-indexed
    ofs = i0 * ba.dims[2] + i1
  else
    -- Fortran layout: column-major, 1-indexed
    ofs = (i1 - 1) * ba.dims[1] + (i0 - 1)
  end

  local elem_size = caml_ba_get_size_per_element(ba.kind)

  if ba.kind == 7 then
    -- INT64
    return {ba.data[ofs * elem_size + 1], ba.data[ofs * elem_size + 2]}
  elseif ba.kind == 10 or ba.kind == 11 then
    -- COMPLEX32 or COMPLEX64
    return {tag = 0, ba.data[ofs * elem_size + 1], ba.data[ofs * elem_size + 2]}
  else
    return ba.data[ofs + 1]
  end
end

--Provides: caml_ba_unsafe_set_2
--Requires: caml_ba_get_size_per_element, caml_ba_clamp_value
function caml_ba_unsafe_set_2(ba, i0, i1, value)
  local ofs = 0

  if ba.layout == 0 then
    -- C layout: row-major, 0-indexed
    ofs = i0 * ba.dims[2] + i1
  else
    -- Fortran layout: column-major, 1-indexed
    ofs = (i1 - 1) * ba.dims[1] + (i0 - 1)
  end

  local elem_size = caml_ba_get_size_per_element(ba.kind)

  if ba.kind == 7 then
    -- INT64
    ba.data[ofs * elem_size + 1] = value[1]
    ba.data[ofs * elem_size + 2] = value[2]
  elseif ba.kind == 10 or ba.kind == 11 then
    -- COMPLEX32 or COMPLEX64
    ba.data[ofs * elem_size + 1] = value[1]
    ba.data[ofs * elem_size + 2] = value[2]
  else
    ba.data[ofs + 1] = caml_ba_clamp_value(ba.kind, value)
  end

  return 0
end

--Provides: caml_ba_get_3
--Requires: caml_ba_get_generic
function caml_ba_get_3(ba, i0, i1, i2)
  return caml_ba_get_generic(ba, {i0, i1, i2})
end

--Provides: caml_ba_set_3
--Requires: caml_ba_set_generic
function caml_ba_set_3(ba, i0, i1, i2, value)
  return caml_ba_set_generic(ba, {i0, i1, i2}, value)
end

--Provides: caml_ba_sub
--Requires: caml_ba_get_size_per_element, caml_ba_create_unsafe
function caml_ba_sub(ba, ofs, len)
  -- Create sub-array (shares data with parent)
  if #ba.dims ~= 1 then
    error("Bigarray.sub: only for 1D arrays")
  end

  local elem_size = caml_ba_get_size_per_element(ba.kind)

  -- Create shallow copy of data starting at offset
  local new_data = {}
  local start_ofs = ofs * elem_size + 1
  for i = 0, len * elem_size - 1 do
    new_data[i + 1] = ba.data[start_ofs + i]
  end

  return caml_ba_create_unsafe(ba.kind, ba.layout, {len}, new_data)
end

--Provides: caml_ba_slice_left
function caml_ba_slice_left(ba, indices)
  -- Slice array along first dimension
  error("Bigarray.slice_left: not yet implemented")
end

--Provides: caml_ba_slice_right
function caml_ba_slice_right(ba, indices)
  -- Slice array along last dimension
  error("Bigarray.slice_right: not yet implemented")
end

--Provides: caml_ba_fill
--Requires: caml_ba_get_size_per_element, caml_ba_get_size, caml_ba_clamp_value
function caml_ba_fill(ba, value)
  -- Fill bigarray with value
  local elem_size = caml_ba_get_size_per_element(ba.kind)
  local total_elems = caml_ba_get_size(ba.dims)

  if ba.kind == 7 then
    -- INT64
    for i = 0, total_elems - 1 do
      ba.data[i * elem_size + 1] = value[1]
      ba.data[i * elem_size + 2] = value[2]
    end
  elseif ba.kind == 10 or ba.kind == 11 then
    -- COMPLEX32 or COMPLEX64
    for i = 0, total_elems - 1 do
      ba.data[i * elem_size + 1] = value[1]
      ba.data[i * elem_size + 2] = value[2]
    end
  else
    local clamped = caml_ba_clamp_value(ba.kind, value)
    for i = 1, total_elems do
      ba.data[i] = clamped
    end
  end

  return 0
end

--Provides: caml_ba_blit
function caml_ba_blit(src, dst)
  -- Blit (copy) from src to dst
  if src.kind ~= dst.kind then
    error("Bigarray.blit: kind mismatch")
  end

  if #src.dims ~= #dst.dims then
    error("Bigarray.blit: dimension mismatch")
  end

  for i = 1, #src.dims do
    if src.dims[i] ~= dst.dims[i] then
      error("Bigarray.blit: dimension mismatch")
    end
  end

  -- Copy data
  for i = 1, #src.data do
    dst.data[i] = src.data[i]
  end

  return 0
end

--Provides: caml_ba_reshape
--Requires: caml_ba_get_size, caml_ba_create_unsafe
function caml_ba_reshape(ba, new_dims_ml)
  -- Reshape bigarray to new dimensions
  -- Handle both OCaml arrays and Lua tables
  local new_dims
  if type(new_dims_ml) == "table" then
    if new_dims_ml[0] ~= nil then
      -- OCaml array (0-indexed)
      new_dims = {}
      for i = 0, #new_dims_ml do
        if new_dims_ml[i] ~= nil then
          table.insert(new_dims, new_dims_ml[i])
        end
      end
    else
      -- Plain Lua table (1-indexed)
      new_dims = new_dims_ml
    end
  else
    error("Bigarray.reshape: invalid dims")
  end

  local old_size = caml_ba_get_size(ba.dims)
  local new_size = caml_ba_get_size(new_dims)

  if old_size ~= new_size then
    error("Bigarray.reshape: size mismatch")
  end

  return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, ba.data)
end


-- Runtime: array
-- Lua_of_ocaml runtime support
-- http://www.ocsigen.org/js_of_ocaml/
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, with linking exception;
-- either version 2.1 of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

--- Array Operations Primitives

--Provides: caml_make_vect
function caml_make_vect(len, init)
  local arr = { tag = 0, [0] = len }
  for i = 1, len do
    arr[i] = init
  end
  return arr
end

--Provides: caml_array_of_list
function caml_array_of_list(list)
  -- Count list length
  local len = 0
  local l = list
  while l ~= 0 do
    len = len + 1
    l = l[2]  -- tail
  end

  -- Build array
  local arr = { tag = 0, [0] = len }
  l = list
  local i = 1
  while l ~= 0 do
    arr[i] = l[1]  -- head
    l = l[2]       -- tail
    i = i + 1
  end

  return arr
end

--Provides: caml_array_to_list
function caml_array_to_list(arr)
  local len = arr[0]
  local result = 0  -- nil/empty list

  -- Build list in reverse
  for i = len, 1, -1 do
    result = { tag = 0, [1] = arr[i], [2] = result }
  end

  return result
end

--Provides: caml_array_length
function caml_array_length(arr)
  return arr[0]
end

--Provides: caml_array_get
function caml_array_get(arr, idx)
  local len = arr[0]
  if idx < 0 or idx >= len then
    error("index out of bounds")
  end
  return arr[idx + 1]  -- Convert to 1-indexed
end

--Provides: caml_array_set
function caml_array_set(arr, idx, val)
  local len = arr[0]
  if idx < 0 or idx >= len then
    error("index out of bounds")
  end
  arr[idx + 1] = val
end

--Provides: caml_array_unsafe_get
function caml_array_unsafe_get(arr, idx)
  return arr[idx + 1]
end

--Provides: caml_array_unsafe_set
function caml_array_unsafe_set(arr, idx, val)
  arr[idx + 1] = val
end

--Provides: caml_array_sub
function caml_array_sub(arr, start, len)
  local result = { tag = 0, [0] = len }
  for i = 0, len - 1 do
    result[i + 1] = arr[start + i + 1]
  end
  return result
end

--Provides: caml_array_append
function caml_array_append(arr1, arr2)
  local len1 = arr1[0]
  local len2 = arr2[0]
  local len = len1 + len2

  local result = { tag = 0, [0] = len }

  -- Copy first array
  for i = 1, len1 do
    result[i] = arr1[i]
  end

  -- Copy second array
  for i = 1, len2 do
    result[len1 + i] = arr2[i]
  end

  return result
end

--Provides: caml_array_concat
function caml_array_concat(list)
  -- Calculate total length
  local total_len = 0
  local l = list
  while l ~= 0 do
    local arr = l[1]  -- head
    total_len = total_len + arr[0]
    l = l[2]  -- tail
  end

  -- Build result
  local result = { tag = 0, [0] = total_len }
  local pos = 1

  l = list
  while l ~= 0 do
    local arr = l[1]
    local arr_len = arr[0]
    for i = 1, arr_len do
      result[pos] = arr[i]
      pos = pos + 1
    end
    l = l[2]
  end

  return result
end

--Provides: caml_array_blit
function caml_array_blit(src, src_pos, dst, dst_pos, len)
  -- Handle overlapping ranges by copying in appropriate direction
  if dst == src and dst_pos > src_pos then
    -- Copy backwards to handle overlap
    for i = len - 1, 0, -1 do
      dst[dst_pos + i + 1] = src[src_pos + i + 1]
    end
  else
    -- Copy forwards
    for i = 0, len - 1 do
      dst[dst_pos + i + 1] = src[src_pos + i + 1]
    end
  end
end

--Provides: caml_array_fill
function caml_array_fill(arr, start, len, val)
  for i = 0, len - 1 do
    arr[start + i + 1] = val
  end
end

--Provides: caml_array_init
function caml_array_init(len, f)
  local arr = { tag = 0, [0] = len }
  for i = 0, len - 1 do
    arr[i + 1] = f(i)
  end
  return arr
end

--Provides: caml_array_iter
function caml_array_iter(f, arr)
  local len = arr[0]
  for i = 0, len - 1 do
    f(arr[i + 1])
  end
end

--Provides: caml_array_iteri
function caml_array_iteri(f, arr)
  local len = arr[0]
  for i = 0, len - 1 do
    f(i, arr[i + 1])
  end
end

--Provides: caml_array_map
function caml_array_map(f, arr)
  local len = arr[0]
  local result = { tag = 0, [0] = len }
  for i = 0, len - 1 do
    result[i + 1] = f(arr[i + 1])
  end
  return result
end

--Provides: caml_array_mapi
function caml_array_mapi(f, arr)
  local len = arr[0]
  local result = { tag = 0, [0] = len }
  for i = 0, len - 1 do
    result[i + 1] = f(i, arr[i + 1])
  end
  return result
end

--Provides: caml_array_fold_left
function caml_array_fold_left(f, init, arr)
  local acc = init
  local len = arr[0]
  for i = 0, len - 1 do
    acc = f(acc, arr[i + 1])
  end
  return acc
end

--Provides: caml_array_fold_right
function caml_array_fold_right(f, arr, init)
  local acc = init
  local len = arr[0]
  for i = len - 1, 0, -1 do
    acc = f(arr[i + 1], acc)
  end
  return acc
end

--Provides: caml_floatarray_get
function caml_floatarray_get(arr, idx)
  return caml_array_get(arr, idx)
end

--Provides: caml_floatarray_set
function caml_floatarray_set(arr, idx, val)
  return caml_array_set(arr, idx, val)
end

--Provides: caml_floatarray_sub
function caml_floatarray_sub(arr, start, len)
  return caml_array_sub(arr, start, len)
end

--Provides: caml_floatarray_append
function caml_floatarray_append(arr1, arr2)
  return caml_array_append(arr1, arr2)
end

--Provides: caml_floatarray_concat
function caml_floatarray_concat(list)
  return caml_array_concat(list)
end

--Provides: caml_floatarray_blit
function caml_floatarray_blit(src, src_pos, dst, dst_pos, len)
  return caml_array_blit(src, src_pos, dst, dst_pos, len)
end

--Provides: caml_uniform_array_sub
function caml_uniform_array_sub(arr, start, len)
  return caml_array_sub(arr, start, len)
end

--Provides: caml_uniform_array_append
function caml_uniform_array_append(arr1, arr2)
  return caml_array_append(arr1, arr2)
end

--Provides: caml_uniform_array_concat
function caml_uniform_array_concat(list)
  return caml_array_concat(list)
end

--Provides: caml_uniform_array_blit
function caml_uniform_array_blit(src, src_pos, dst, dst_pos, len)
  return caml_array_blit(src, src_pos, dst, dst_pos, len)
end


-- 
function __caml_init__()
  -- Module initialization code
  -- Hoisted variables (216 total, using table due to Lua's 200 local limit)
  local _V = {}
  _V.Assert_failure = nil
  _V.Division_by_zero = nil
  _V.End_of_file = nil
  _V.Failure = nil
  _V.Invalid_argument = nil
  _V.Match_failure = nil
  _V.Not_found = nil
  _V.Out_of_memory = nil
  _V.Stack_overflow = nil
  _V.Sys_blocked_io = nil
  _V.Sys_error = nil
  _V.Undefined_recursive_module = nil
  _V.dummy = nil
  _V.v0 = nil
  _V.v1 = nil
  _V.v10 = nil
  _V.v100 = nil
  _V.v101 = nil
  _V.v102 = nil
  _V.v103 = nil
  _V.v104 = nil
  _V.v105 = nil
  _V.v106 = nil
  _V.v107 = nil
  _V.v108 = nil
  _V.v109 = nil
  _V.v11 = nil
  _V.v110 = nil
  _V.v111 = nil
  _V.v112 = nil
  _V.v113 = nil
  _V.v114 = nil
  _V.v115 = nil
  _V.v116 = nil
  _V.v117 = nil
  _V.v118 = nil
  _V.v119 = nil
  _V.v12 = nil
  _V.v120 = nil
  _V.v121 = nil
  _V.v122 = nil
  _V.v123 = nil
  _V.v124 = nil
  _V.v125 = nil
  _V.v126 = nil
  _V.v127 = nil
  _V.v128 = nil
  _V.v129 = nil
  _V.v13 = nil
  _V.v130 = nil
  _V.v131 = nil
  _V.v132 = nil
  _V.v133 = nil
  _V.v134 = nil
  _V.v135 = nil
  _V.v136 = nil
  _V.v137 = nil
  _V.v138 = nil
  _V.v139 = nil
  _V.v14 = nil
  _V.v140 = nil
  _V.v141 = nil
  _V.v142 = nil
  _V.v143 = nil
  _V.v144 = nil
  _V.v145 = nil
  _V.v146 = nil
  _V.v147 = nil
  _V.v148 = nil
  _V.v149 = nil
  _V.v15 = nil
  _V.v150 = nil
  _V.v151 = nil
  _V.v152 = nil
  _V.v153 = nil
  _V.v154 = nil
  _V.v155 = nil
  _V.v156 = nil
  _V.v157 = nil
  _V.v158 = nil
  _V.v159 = nil
  _V.v16 = nil
  _V.v160 = nil
  _V.v161 = nil
  _V.v162 = nil
  _V.v163 = nil
  _V.v164 = nil
  _V.v165 = nil
  _V.v166 = nil
  _V.v167 = nil
  _V.v168 = nil
  _V.v169 = nil
  _V.v17 = nil
  _V.v170 = nil
  _V.v171 = nil
  _V.v172 = nil
  _V.v173 = nil
  _V.v174 = nil
  _V.v175 = nil
  _V.v176 = nil
  _V.v177 = nil
  _V.v178 = nil
  _V.v179 = nil
  _V.v18 = nil
  _V.v180 = nil
  _V.v181 = nil
  _V.v182 = nil
  _V.v183 = nil
  _V.v184 = nil
  _V.v185 = nil
  _V.v186 = nil
  _V.v187 = nil
  _V.v188 = nil
  _V.v189 = nil
  _V.v19 = nil
  _V.v190 = nil
  _V.v191 = nil
  _V.v192 = nil
  _V.v193 = nil
  _V.v194 = nil
  _V.v195 = nil
  _V.v196 = nil
  _V.v197 = nil
  _V.v198 = nil
  _V.v199 = nil
  _V.v2 = nil
  _V.v20 = nil
  _V.v200 = nil
  _V.v201 = nil
  _V.v202 = nil
  _V.v21 = nil
  _V.v22 = nil
  _V.v23 = nil
  _V.v24 = nil
  _V.v25 = nil
  _V.v26 = nil
  _V.v27 = nil
  _V.v28 = nil
  _V.v29 = nil
  _V.v3 = nil
  _V.v30 = nil
  _V.v31 = nil
  _V.v32 = nil
  _V.v33 = nil
  _V.v34 = nil
  _V.v35 = nil
  _V.v36 = nil
  _V.v37 = nil
  _V.v38 = nil
  _V.v39 = nil
  _V.v4 = nil
  _V.v40 = nil
  _V.v41 = nil
  _V.v42 = nil
  _V.v43 = nil
  _V.v44 = nil
  _V.v45 = nil
  _V.v46 = nil
  _V.v47 = nil
  _V.v48 = nil
  _V.v49 = nil
  _V.v5 = nil
  _V.v50 = nil
  _V.v51 = nil
  _V.v52 = nil
  _V.v53 = nil
  _V.v54 = nil
  _V.v55 = nil
  _V.v56 = nil
  _V.v57 = nil
  _V.v58 = nil
  _V.v59 = nil
  _V.v6 = nil
  _V.v60 = nil
  _V.v61 = nil
  _V.v62 = nil
  _V.v63 = nil
  _V.v64 = nil
  _V.v65 = nil
  _V.v66 = nil
  _V.v67 = nil
  _V.v68 = nil
  _V.v69 = nil
  _V.v7 = nil
  _V.v70 = nil
  _V.v71 = nil
  _V.v72 = nil
  _V.v73 = nil
  _V.v74 = nil
  _V.v75 = nil
  _V.v76 = nil
  _V.v77 = nil
  _V.v78 = nil
  _V.v79 = nil
  _V.v8 = nil
  _V.v80 = nil
  _V.v81 = nil
  _V.v82 = nil
  _V.v83 = nil
  _V.v84 = nil
  _V.v85 = nil
  _V.v86 = nil
  _V.v87 = nil
  _V.v88 = nil
  _V.v89 = nil
  _V.v9 = nil
  _V.v90 = nil
  _V.v91 = nil
  _V.v92 = nil
  _V.v93 = nil
  _V.v94 = nil
  _V.v95 = nil
  _V.v96 = nil
  _V.v97 = nil
  _V.v98 = nil
  _V.v99 = nil
  local _next_block = 0
  while true do
    if _next_block == 0 then
      _V.dummy = 0
      _V.Out_of_memory = {248, "Out_of_memory", -1}
      _V.Sys_error = {248, "Sys_error", -2}
      _V.Failure = {248, "Failure", -3}
      _V.Invalid_argument = {248, "Invalid_argument", -4}
      _V.End_of_file = {248, "End_of_file", -5}
      _V.Division_by_zero = {248, "Division_by_zero", -6}
      _V.Not_found = {248, "Not_found", -7}
      _V.Match_failure = {248, "Match_failure", -8}
      _V.Stack_overflow = {248, "Stack_overflow", -9}
      _V.Sys_blocked_io = {248, "Sys_blocked_io", -10}
      _V.Assert_failure = {248, "Assert_failure", -11}
      _V.Undefined_recursive_module = {248, "Undefined_recursive_module", -12}
      _V.v0 = "true"
      _V.v1 = "false"
      _V.v2 = "\\\\"
      _V.v3 = "\\'"
      _V.v4 = "\\b"
      _V.v5 = "\\t"
      _V.v6 = "\\n"
      _V.v7 = "\\r"
      _V.v8 = "String.blit / Bytes.blit_string"
      _V.v9 = "Bytes.blit"
      _V.v10 = "String.sub / Bytes.sub"
      _V.v11 = "%c"
      _V.v12 = "%s"
      _V.v13 = "%i"
      _V.v14 = "%li"
      _V.v15 = "%ni"
      _V.v16 = "%Li"
      _V.v17 = "%f"
      _V.v18 = "%B"
      _V.v19 = "%{"
      _V.v20 = "%}"
      _V.v21 = "%("
      _V.v22 = "%)"
      _V.v23 = "%a"
      _V.v24 = "%t"
      _V.v25 = "%?"
      _V.v26 = "%r"
      _V.v27 = "%_r"
      _V.v28 = {0, "camlinternalFormat.ml", 850, 23}
      _V.v29 = {0, "camlinternalFormat.ml", 814, 21}
      _V.v30 = {0, "camlinternalFormat.ml", 815, 21}
      _V.v31 = {0, "camlinternalFormat.ml", 818, 21}
      _V.v32 = {0, "camlinternalFormat.ml", 819, 21}
      _V.v33 = {0, "camlinternalFormat.ml", 822, 19}
      _V.v34 = {0, "camlinternalFormat.ml", 823, 19}
      _V.v35 = {0, "camlinternalFormat.ml", 826, 22}
      _V.v36 = {0, "camlinternalFormat.ml", 827, 22}
      _V.v37 = {0, "camlinternalFormat.ml", 831, 30}
      _V.v38 = {0, "camlinternalFormat.ml", 832, 30}
      _V.v39 = {0, "camlinternalFormat.ml", 836, 26}
      _V.v40 = {0, "camlinternalFormat.ml", 837, 26}
      _V.v41 = {0, "camlinternalFormat.ml", 846, 28}
      _V.v42 = {0, "camlinternalFormat.ml", 847, 28}
      _V.v43 = {0, "camlinternalFormat.ml", 851, 23}
      _V.v44 = {0, "camlinternalFormat.ml", 1558, 4}
      _V.v45 = "Printf: bad conversion %["
      _V.v46 = {0, "camlinternalFormat.ml", 1626, 39}
      _V.v47 = {0, "camlinternalFormat.ml", 1649, 31}
      _V.v48 = {0, "camlinternalFormat.ml", 1650, 31}
      _V.v49 = "Printf: bad conversion %_"
      _V.v50 = "@{"
      _V.v51 = "@["
      _V.v52 = "nan"
      _V.v53 = "neg_infinity"
      _V.v54 = "infinity"
      _V.v55 = "."
      _V.v56 = {0, 103}
      _V.v57 = "%+nd"
      _V.v58 = "% nd"
      _V.v59 = "%+ni"
      _V.v60 = "% ni"
      _V.v61 = "%nx"
      _V.v62 = "%#nx"
      _V.v63 = "%nX"
      _V.v64 = "%#nX"
      _V.v65 = "%no"
      _V.v66 = "%#no"
      _V.v67 = "%nd"
      _V.v68 = "%ni"
      _V.v69 = "%nu"
      _V.v70 = "%+ld"
      _V.v71 = "% ld"
      _V.v72 = "%+li"
      _V.v73 = "% li"
      _V.v74 = "%lx"
      _V.v75 = "%#lx"
      _V.v76 = "%lX"
      _V.v77 = "%#lX"
      _V.v78 = "%lo"
      _V.v79 = "%#lo"
      _V.v80 = "%ld"
      _V.v81 = "%li"
      _V.v82 = "%lu"
      _V.v83 = "%+Ld"
      _V.v84 = "% Ld"
      _V.v85 = "%+Li"
      _V.v86 = "% Li"
      _V.v87 = "%Lx"
      _V.v88 = "%#Lx"
      _V.v89 = "%LX"
      _V.v90 = "%#LX"
      _V.v91 = "%Lo"
      _V.v92 = "%#Lo"
      _V.v93 = "%Ld"
      _V.v94 = "%Li"
      _V.v95 = "%Lu"
      _V.v96 = "%+d"
      _V.v97 = "% d"
      _V.v98 = "%+i"
      _V.v99 = "% i"
      _V.v100 = "%x"
      _V.v101 = "%#x"
      _V.v102 = "%X"
      _V.v103 = "%#X"
      _V.v104 = "%o"
      _V.v105 = "%#o"
      _V.v106 = "%d"
      _V.v107 = "%i"
      _V.v108 = "%u"
      _V.v109 = "@]"
      _V.v110 = "@}"
      _V.v111 = "@?"
      _V.v112 = "@\n"
      _V.v113 = "@."
      _V.v114 = "@@"
      _V.v115 = "@%"
      _V.v116 = "@"
      _V.v117 = "CamlinternalFormat.Type_mismatch"
      _V.v118 = {0, {11, "Hello ", {4, 0, 0, 0, {12, 10, 0}}}, "Hello %d\n"}
      _V.v119 = caml_register_global(11, _V.Undefined_recursive_module, "Undefined_recursive_module")
      _V.v120 = caml_register_global(10, _V.Assert_failure, "Assert_failure")
      _V.v121 = caml_register_global(9, _V.Sys_blocked_io, "Sys_blocked_io")
      _V.v122 = caml_register_global(8, _V.Stack_overflow, "Stack_overflow")
      _V.v123 = caml_register_global(7, _V.Match_failure, "Match_failure")
      _V.v124 = caml_register_global(6, _V.Not_found, "Not_found")
      _V.v125 = caml_register_global(5, _V.Division_by_zero, "Division_by_zero")
      _V.v126 = caml_register_global(4, _V.End_of_file, "End_of_file")
      _V.v127 = caml_register_global(3, _V.Invalid_argument, "Invalid_argument")
      _V.v128 = caml_register_global(2, _V.Failure, "Failure")
      _V.v129 = caml_register_global(1, _V.Sys_error, "Sys_error")
      _V.v130 = caml_register_global(0, _V.Out_of_memory, "Out_of_memory")
      _V.v131 = caml_make_closure(1, function(v203)
        -- Hoisted variables (50 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v203 = v203
        local _next_block = 1
        while true do
          if _next_block == 1 then
            _V.v204 = type(_V.v203) == "number" and _V.v203 % 1 == 0
            if _V.v204 then
              _next_block = 3
            else
              _next_block = 2
            end
          else
            if _next_block == 2 then
              _V.v205 = _V.v203[1] or 0
              if _V.v205 == 0 then
                _next_block = 4
              else
                if _V.v205 == 1 then
                  _next_block = 5
                else
                  if _V.v205 == 2 then
                    _next_block = 6
                  else
                    if _V.v205 == 3 then
                      _next_block = 7
                    else
                      if _V.v205 == 4 then
                        _next_block = 8
                      else
                        if _V.v205 == 5 then
                          _next_block = 9
                        else
                          if _V.v205 == 6 then
                            _next_block = 10
                          else
                            if _V.v205 == 7 then
                              _next_block = 11
                            else
                              if _V.v205 == 8 then
                                _next_block = 12
                              else
                                if _V.v205 == 9 then
                                  _next_block = 13
                                else
                                  if _V.v205 == 10 then
                                    _next_block = 14
                                  else
                                    if _V.v205 == 11 then
                                      _next_block = 15
                                    else
                                      if _V.v205 == 12 then
                                        _next_block = 16
                                      else
                                        if _V.v205 == 13 then
                                          _next_block = 17
                                        else
                                          if _V.v205 == 14 then
                                            _next_block = 18
                                          else
                                            _next_block = 4
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            else
              if _next_block == 3 then
                _V.v206 = 0
                return _V.v206
              else
                if _next_block == 4 then
                  _V.v207 = _V.v203[2]
                  _V.v208 = _V.v131(_V.v207)
                  _V.v209 = {0, _V.v208}
                  return _V.v209
                else
                  if _next_block == 5 then
                    _V.v210 = _V.v203[2]
                    _V.v211 = _V.v131(_V.v210)
                    _V.v212 = {1, _V.v211}
                    return _V.v212
                  else
                    if _next_block == 6 then
                      _V.v213 = _V.v203[2]
                      _V.v214 = _V.v131(_V.v213)
                      _V.v215 = {2, _V.v214}
                      return _V.v215
                    else
                      if _next_block == 7 then
                        _V.v216 = _V.v203[2]
                        _V.v217 = _V.v131(_V.v216)
                        _V.v218 = {3, _V.v217}
                        return _V.v218
                      else
                        if _next_block == 8 then
                          _V.v219 = _V.v203[2]
                          _V.v220 = _V.v131(_V.v219)
                          _V.v221 = {4, _V.v220}
                          return _V.v221
                        else
                          if _next_block == 9 then
                            _V.v222 = _V.v203[2]
                            _V.v223 = _V.v131(_V.v222)
                            _V.v224 = {5, _V.v223}
                            return _V.v224
                          else
                            if _next_block == 10 then
                              _V.v225 = _V.v203[2]
                              _V.v226 = _V.v131(_V.v225)
                              _V.v227 = {6, _V.v226}
                              return _V.v227
                            else
                              if _next_block == 11 then
                                _V.v228 = _V.v203[2]
                                _V.v229 = _V.v131(_V.v228)
                                _V.v230 = {7, _V.v229}
                                return _V.v230
                              else
                                if _next_block == 12 then
                                  _V.v231 = _V.v203[3]
                                  _V.v232 = _V.v203[2]
                                  _V.v233 = _V.v131(_V.v231)
                                  _V.v234 = {8, _V.v232, _V.v233}
                                  return _V.v234
                                else
                                  if _next_block == 13 then
                                    _V.v235 = _V.v203[4]
                                    _V.v236 = _V.v203[2]
                                    _V.v237 = _V.v131(_V.v235)
                                    _V.v238 = {9, _V.v236, _V.v236, _V.v237}
                                    return _V.v238
                                  else
                                    if _next_block == 14 then
                                      _V.v239 = _V.v203[2]
                                      _V.v240 = _V.v131(_V.v239)
                                      _V.v241 = {10, _V.v240}
                                      return _V.v241
                                    else
                                      if _next_block == 15 then
                                        _V.v242 = _V.v203[2]
                                        _V.v243 = _V.v131(_V.v242)
                                        _V.v244 = {11, _V.v243}
                                        return _V.v244
                                      else
                                        if _next_block == 16 then
                                          _V.v245 = _V.v203[2]
                                          _V.v246 = _V.v131(_V.v245)
                                          _V.v247 = {12, _V.v246}
                                          return _V.v247
                                        else
                                          if _next_block == 17 then
                                            _V.v248 = _V.v203[2]
                                            _V.v249 = _V.v131(_V.v248)
                                            _V.v250 = {13, _V.v249}
                                            return _V.v250
                                          else
                                            if _next_block == 18 then
                                              _V.v251 = _V.v203[2]
                                              _V.v252 = _V.v131(_V.v251)
                                              _V.v253 = {14, _V.v252}
                                              return _V.v253
                                            else
                                              break
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v132 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (50 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v254 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 19
        while true do
          if _next_block == 19 then
            _V.v205 = type(_V.v203) == "number" and _V.v203 % 1 == 0
            if _V.v205 then
              _next_block = 21
            else
              _next_block = 20
            end
          else
            if _next_block == 20 then
              _V.v206 = _V.v203[1] or 0
              if _V.v206 == 0 then
                _next_block = 22
              else
                if _V.v206 == 1 then
                  _next_block = 23
                else
                  if _V.v206 == 2 then
                    _next_block = 24
                  else
                    if _V.v206 == 3 then
                      _next_block = 25
                    else
                      if _V.v206 == 4 then
                        _next_block = 26
                      else
                        if _V.v206 == 5 then
                          _next_block = 27
                        else
                          if _V.v206 == 6 then
                            _next_block = 28
                          else
                            if _V.v206 == 7 then
                              _next_block = 29
                            else
                              if _V.v206 == 8 then
                                _next_block = 30
                              else
                                if _V.v206 == 9 then
                                  _next_block = 31
                                else
                                  if _V.v206 == 10 then
                                    _next_block = 32
                                  else
                                    if _V.v206 == 11 then
                                      _next_block = 33
                                    else
                                      if _V.v206 == 12 then
                                        _next_block = 34
                                      else
                                        if _V.v206 == 13 then
                                          _next_block = 35
                                        else
                                          if _V.v206 == 14 then
                                            _next_block = 36
                                          else
                                            _next_block = 22
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            else
              if _next_block == 21 then
                return _V.v204
              else
                if _next_block == 22 then
                  _V.v207 = _V.v203[2]
                  _V.v208 = _V.v132(_V.v207, _V.v204)
                  _V.v209 = {0, _V.v208}
                  return _V.v209
                else
                  if _next_block == 23 then
                    _V.v210 = _V.v203[2]
                    _V.v211 = _V.v132(_V.v210, _V.v204)
                    _V.v212 = {1, _V.v211}
                    return _V.v212
                  else
                    if _next_block == 24 then
                      _V.v213 = _V.v203[2]
                      _V.v214 = _V.v132(_V.v213, _V.v204)
                      _V.v215 = {2, _V.v214}
                      return _V.v215
                    else
                      if _next_block == 25 then
                        _V.v216 = _V.v203[2]
                        _V.v217 = _V.v132(_V.v216, _V.v204)
                        _V.v218 = {3, _V.v217}
                        return _V.v218
                      else
                        if _next_block == 26 then
                          _V.v219 = _V.v203[2]
                          _V.v220 = _V.v132(_V.v219, _V.v204)
                          _V.v221 = {4, _V.v220}
                          return _V.v221
                        else
                          if _next_block == 27 then
                            _V.v222 = _V.v203[2]
                            _V.v223 = _V.v132(_V.v222, _V.v204)
                            _V.v224 = {5, _V.v223}
                            return _V.v224
                          else
                            if _next_block == 28 then
                              _V.v225 = _V.v203[2]
                              _V.v226 = _V.v132(_V.v225, _V.v204)
                              _V.v227 = {6, _V.v226}
                              return _V.v227
                            else
                              if _next_block == 29 then
                                _V.v228 = _V.v203[2]
                                _V.v229 = _V.v132(_V.v228, _V.v204)
                                _V.v230 = {7, _V.v229}
                                return _V.v230
                              else
                                if _next_block == 30 then
                                  _V.v231 = _V.v203[3]
                                  _V.v232 = _V.v203[2]
                                  _V.v233 = _V.v132(_V.v231, _V.v204)
                                  _V.v234 = {8, _V.v232, _V.v233}
                                  return _V.v234
                                else
                                  if _next_block == 31 then
                                    _V.v235 = _V.v203[4]
                                    _V.v236 = _V.v203[3]
                                    _V.v237 = _V.v203[2]
                                    _V.v238 = _V.v132(_V.v235, _V.v204)
                                    _V.v239 = {9, _V.v237, _V.v236, _V.v238}
                                    return _V.v239
                                  else
                                    if _next_block == 32 then
                                      _V.v240 = _V.v203[2]
                                      _V.v241 = _V.v132(_V.v240, _V.v204)
                                      _V.v242 = {10, _V.v241}
                                      return _V.v242
                                    else
                                      if _next_block == 33 then
                                        _V.v243 = _V.v203[2]
                                        _V.v244 = _V.v132(_V.v243, _V.v204)
                                        _V.v245 = {11, _V.v244}
                                        return _V.v245
                                      else
                                        if _next_block == 34 then
                                          _V.v246 = _V.v203[2]
                                          _V.v247 = _V.v132(_V.v246, _V.v204)
                                          _V.v248 = {12, _V.v247}
                                          return _V.v248
                                        else
                                          if _next_block == 35 then
                                            _V.v249 = _V.v203[2]
                                            _V.v250 = _V.v132(_V.v249, _V.v204)
                                            _V.v251 = {13, _V.v250}
                                            return _V.v251
                                          else
                                            if _next_block == 36 then
                                              _V.v252 = _V.v203[2]
                                              _V.v253 = _V.v132(_V.v252, _V.v204)
                                              _V.v254 = {14, _V.v253}
                                              return _V.v254
                                            else
                                              break
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v133 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (109 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v254 = nil
        _V.v255 = nil
        _V.v256 = nil
        _V.v257 = nil
        _V.v258 = nil
        _V.v259 = nil
        _V.v260 = nil
        _V.v261 = nil
        _V.v262 = nil
        _V.v263 = nil
        _V.v264 = nil
        _V.v265 = nil
        _V.v266 = nil
        _V.v267 = nil
        _V.v268 = nil
        _V.v269 = nil
        _V.v270 = nil
        _V.v271 = nil
        _V.v272 = nil
        _V.v273 = nil
        _V.v274 = nil
        _V.v275 = nil
        _V.v276 = nil
        _V.v277 = nil
        _V.v278 = nil
        _V.v279 = nil
        _V.v280 = nil
        _V.v281 = nil
        _V.v282 = nil
        _V.v283 = nil
        _V.v284 = nil
        _V.v285 = nil
        _V.v286 = nil
        _V.v287 = nil
        _V.v288 = nil
        _V.v289 = nil
        _V.v290 = nil
        _V.v291 = nil
        _V.v292 = nil
        _V.v293 = nil
        _V.v294 = nil
        _V.v295 = nil
        _V.v296 = nil
        _V.v297 = nil
        _V.v298 = nil
        _V.v299 = nil
        _V.v300 = nil
        _V.v301 = nil
        _V.v302 = nil
        _V.v303 = nil
        _V.v304 = nil
        _V.v305 = nil
        _V.v306 = nil
        _V.v307 = nil
        _V.v308 = nil
        _V.v309 = nil
        _V.v310 = nil
        _V.v311 = nil
        _V.v312 = nil
        _V.v313 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 37
        while true do
          if _next_block == 37 then
            _V.v205 = type(_V.v203) == "number" and _V.v203 % 1 == 0
            if _V.v205 then
              _next_block = 39
            else
              _next_block = 38
            end
          else
            if _next_block == 38 then
              _V.v206 = _V.v203[1] or 0
              if _V.v206 == 0 then
                _next_block = 40
              else
                if _V.v206 == 1 then
                  _next_block = 41
                else
                  if _V.v206 == 2 then
                    _next_block = 42
                  else
                    if _V.v206 == 3 then
                      _next_block = 43
                    else
                      if _V.v206 == 4 then
                        _next_block = 44
                      else
                        if _V.v206 == 5 then
                          _next_block = 45
                        else
                          if _V.v206 == 6 then
                            _next_block = 46
                          else
                            if _V.v206 == 7 then
                              _next_block = 47
                            else
                              if _V.v206 == 8 then
                                _next_block = 48
                              else
                                if _V.v206 == 9 then
                                  _next_block = 49
                                else
                                  if _V.v206 == 10 then
                                    _next_block = 50
                                  else
                                    if _V.v206 == 11 then
                                      _next_block = 51
                                    else
                                      if _V.v206 == 12 then
                                        _next_block = 52
                                      else
                                        if _V.v206 == 13 then
                                          _next_block = 53
                                        else
                                          if _V.v206 == 14 then
                                            _next_block = 54
                                          else
                                            if _V.v206 == 15 then
                                              _next_block = 55
                                            else
                                              if _V.v206 == 16 then
                                                _next_block = 56
                                              else
                                                if _V.v206 == 17 then
                                                  _next_block = 57
                                                else
                                                  if _V.v206 == 18 then
                                                    _next_block = 58
                                                  else
                                                    if _V.v206 == 19 then
                                                      _next_block = 59
                                                    else
                                                      if _V.v206 == 20 then
                                                        _next_block = 60
                                                      else
                                                        if _V.v206 == 21 then
                                                          _next_block = 61
                                                        else
                                                          if _V.v206 == 22 then
                                                            _next_block = 62
                                                          else
                                                            if _V.v206 == 23 then
                                                              _next_block = 63
                                                            else
                                                              if _V.v206 == 24 then
                                                                _next_block = 64
                                                              else
                                                                _next_block = 40
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            else
              if _next_block == 39 then
                return _V.v204
              else
                if _next_block == 40 then
                  _V.v207 = _V.v203[2]
                  _V.v208 = _V.v133(_V.v207, _V.v204)
                  _V.v209 = {0, _V.v208}
                  return _V.v209
                else
                  if _next_block == 41 then
                    _V.v210 = _V.v203[2]
                    _V.v211 = _V.v133(_V.v210, _V.v204)
                    _V.v212 = {1, _V.v211}
                    return _V.v212
                  else
                    if _next_block == 42 then
                      _V.v213 = _V.v203[3]
                      _V.v214 = _V.v203[2]
                      _V.v215 = _V.v133(_V.v213, _V.v204)
                      _V.v216 = {2, _V.v214, _V.v215}
                      return _V.v216
                    else
                      if _next_block == 43 then
                        _V.v217 = _V.v203[3]
                        _V.v218 = _V.v203[2]
                        _V.v219 = _V.v133(_V.v217, _V.v204)
                        _V.v220 = {3, _V.v218, _V.v219}
                        return _V.v220
                      else
                        if _next_block == 44 then
                          _V.v221 = _V.v203[5]
                          _V.v222 = _V.v203[4]
                          _V.v223 = _V.v203[3]
                          _V.v224 = _V.v203[2]
                          _V.v225 = _V.v133(_V.v221, _V.v204)
                          _V.v226 = {4, _V.v224, _V.v223, _V.v222, _V.v225}
                          return _V.v226
                        else
                          if _next_block == 45 then
                            _V.v227 = _V.v203[5]
                            _V.v228 = _V.v203[4]
                            _V.v229 = _V.v203[3]
                            _V.v230 = _V.v203[2]
                            _V.v231 = _V.v133(_V.v227, _V.v204)
                            _V.v232 = {5, _V.v230, _V.v229, _V.v228, _V.v231}
                            return _V.v232
                          else
                            if _next_block == 46 then
                              _V.v233 = _V.v203[5]
                              _V.v234 = _V.v203[4]
                              _V.v235 = _V.v203[3]
                              _V.v236 = _V.v203[2]
                              _V.v237 = _V.v133(_V.v233, _V.v204)
                              _V.v238 = {6, _V.v236, _V.v235, _V.v234, _V.v237}
                              return _V.v238
                            else
                              if _next_block == 47 then
                                _V.v239 = _V.v203[5]
                                _V.v240 = _V.v203[4]
                                _V.v241 = _V.v203[3]
                                _V.v242 = _V.v203[2]
                                _V.v243 = _V.v133(_V.v239, _V.v204)
                                _V.v244 = {7, _V.v242, _V.v241, _V.v240, _V.v243}
                                return _V.v244
                              else
                                if _next_block == 48 then
                                  _V.v245 = _V.v203[5]
                                  _V.v246 = _V.v203[4]
                                  _V.v247 = _V.v203[3]
                                  _V.v248 = _V.v203[2]
                                  _V.v249 = _V.v133(_V.v245, _V.v204)
                                  _V.v250 = {8, _V.v248, _V.v247, _V.v246, _V.v249}
                                  return _V.v250
                                else
                                  if _next_block == 49 then
                                    _V.v251 = _V.v203[3]
                                    _V.v252 = _V.v203[2]
                                    _V.v253 = _V.v133(_V.v251, _V.v204)
                                    _V.v254 = {9, _V.v252, _V.v253}
                                    return _V.v254
                                  else
                                    if _next_block == 50 then
                                      _V.v255 = _V.v203[2]
                                      _V.v256 = _V.v133(_V.v255, _V.v204)
                                      _V.v257 = {10, _V.v256}
                                      return _V.v257
                                    else
                                      if _next_block == 51 then
                                        _V.v258 = _V.v203[3]
                                        _V.v259 = _V.v203[2]
                                        _V.v260 = _V.v133(_V.v258, _V.v204)
                                        _V.v261 = {11, _V.v259, _V.v260}
                                        return _V.v261
                                      else
                                        if _next_block == 52 then
                                          _V.v262 = _V.v203[3]
                                          _V.v263 = _V.v203[2]
                                          _V.v264 = _V.v133(_V.v262, _V.v204)
                                          _V.v265 = {12, _V.v263, _V.v264}
                                          return _V.v265
                                        else
                                          if _next_block == 53 then
                                            _V.v266 = _V.v203[4]
                                            _V.v267 = _V.v203[3]
                                            _V.v268 = _V.v203[2]
                                            _V.v269 = _V.v133(_V.v266, _V.v204)
                                            _V.v270 = {13, _V.v268, _V.v267, _V.v269}
                                            return _V.v270
                                          else
                                            if _next_block == 54 then
                                              _V.v271 = _V.v203[4]
                                              _V.v272 = _V.v203[3]
                                              _V.v273 = _V.v203[2]
                                              _V.v274 = _V.v133(_V.v271, _V.v204)
                                              _V.v275 = {14, _V.v273, _V.v272, _V.v274}
                                              return _V.v275
                                            else
                                              if _next_block == 55 then
                                                _V.v276 = _V.v203[2]
                                                _V.v277 = _V.v133(_V.v276, _V.v204)
                                                _V.v278 = {15, _V.v277}
                                                return _V.v278
                                              else
                                                if _next_block == 56 then
                                                  _V.v279 = _V.v203[2]
                                                  _V.v280 = _V.v133(_V.v279, _V.v204)
                                                  _V.v281 = {16, _V.v280}
                                                  return _V.v281
                                                else
                                                  if _next_block == 57 then
                                                    _V.v282 = _V.v203[3]
                                                    _V.v283 = _V.v203[2]
                                                    _V.v284 = _V.v133(_V.v282, _V.v204)
                                                    _V.v285 = {17, _V.v283, _V.v284}
                                                    return _V.v285
                                                  else
                                                    if _next_block == 58 then
                                                      _V.v286 = _V.v203[3]
                                                      _V.v287 = _V.v203[2]
                                                      _V.v288 = _V.v133(_V.v286, _V.v204)
                                                      _V.v289 = {18, _V.v287, _V.v288}
                                                      return _V.v289
                                                    else
                                                      if _next_block == 59 then
                                                        _V.v290 = _V.v203[2]
                                                        _V.v291 = _V.v133(_V.v290, _V.v204)
                                                        _V.v292 = {19, _V.v291}
                                                        return _V.v292
                                                      else
                                                        if _next_block == 60 then
                                                          _V.v293 = _V.v203[4]
                                                          _V.v294 = _V.v203[3]
                                                          _V.v295 = _V.v203[2]
                                                          _V.v296 = _V.v133(_V.v293, _V.v204)
                                                          _V.v297 = {20, _V.v295, _V.v294, _V.v296}
                                                          return _V.v297
                                                        else
                                                          if _next_block == 61 then
                                                            _V.v298 = _V.v203[3]
                                                            _V.v299 = _V.v203[2]
                                                            _V.v300 = _V.v133(_V.v298, _V.v204)
                                                            _V.v301 = {21, _V.v299, _V.v300}
                                                            return _V.v301
                                                          else
                                                            if _next_block == 62 then
                                                              _V.v302 = _V.v203[2]
                                                              _V.v303 = _V.v133(_V.v302, _V.v204)
                                                              _V.v304 = {22, _V.v303}
                                                              return _V.v304
                                                            else
                                                              if _next_block == 63 then
                                                                _V.v305 = _V.v203[3]
                                                                _V.v306 = _V.v203[2]
                                                                _V.v307 = _V.v133(_V.v305, _V.v204)
                                                                _V.v308 = {23, _V.v306, _V.v307}
                                                                return _V.v308
                                                              else
                                                                if _next_block == 64 then
                                                                  _V.v309 = _V.v203[4]
                                                                  _V.v310 = _V.v203[3]
                                                                  _V.v311 = _V.v203[2]
                                                                  _V.v312 = _V.v133(_V.v309, _V.v204)
                                                                  _V.v313 = {24, _V.v311, _V.v310, _V.v312}
                                                                  return _V.v313
                                                                else
                                                                  break
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v134 = caml_make_closure(1, function(v203)
        -- Hoisted variables (1 total, using inherited _V table)
        _V.v204 = nil
        _V.v203 = v203
        local _next_block = 79
        while true do
          if _next_block == 79 then
            _V.v204 = {0, _V.Invalid_argument, _V.v203}
            error(_V.v204)
          else
            break
          end
        end
      end)
      _V.v135 = caml_fresh_oo_id(0)
      _V.v136 = caml_make_closure(1, function(v203)
        -- Hoisted variables (2 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v203 = v203
        local _next_block = 76
        while true do
          if _next_block == 76 then
            _V.v204 = 0 <= _V.v203
            if _V.v204 then
              _next_block = 77
            else
              _next_block = 78
            end
          else
            if _next_block == 77 then
              return _V.v203
            else
              if _next_block == 78 then
                _V.v205 = -_V.v203
                return _V.v205
              else
                break
              end
            end
          end
        end
      end)
      _V.v137 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (4 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 75
        while true do
          if _next_block == 75 then
            _V.v205 = caml_ml_string_length(_V.v203)
            _V.v206 = caml_ml_string_length(_V.v204)
            _V.v207 = caml_string_concat(_V.v203, _V.v204)
            _V.v208 = caml_bytes_of_string(_V.v207)
            return _V.v207
          else
            break
          end
        end
      end)
      _V.v138 = caml_make_closure(1, function(v203)
        _V.v203 = v203
        local _next_block = 72
        while true do
          if _next_block == 72 then
            if _V.v203 then
              _next_block = 73
            else
              _next_block = 74
            end
          else
            if _next_block == 73 then
              return _V.v0
            else
              if _next_block == 74 then
                return _V.v1
              else
                break
              end
            end
          end
        end
      end)
      _V.v139 = caml_ml_open_descriptor_in(0)
      _V.v140 = caml_ml_open_descriptor_out(1)
      _V.v141 = caml_ml_open_descriptor_out(2)
      _V.v142 = caml_make_closure(1, function(v203)
        -- Hoisted variables (8 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v203 = v203
        local _next_block = 66
        while true do
          if _next_block == 66 then
            _V.v204 = _V.v211[3]
            _V.v205 = _V.v211[2]
            _next_block = 67
          else
            if _next_block == 67 then
              _V.v206 = caml_ml_flush(_V.v205)
              -- Block arg: v211 = v204 (captured)
              _V.v211 = _V.v204
              _next_block = 797
            else
              if _next_block == 68 then
                _V.v207 = _V.v212[2]
                _V.v208 = _V.v207 == _V.Sys_error
                if _V.v208 then
                  -- Block arg: v211 = v204 (captured)
                  _V.v211 = _V.v204
                  _next_block = 797
                else
                  _next_block = 69
                end
              else
                if _next_block == 69 then
                  error(_V.v212)
                else
                  if _next_block == 70 then
                    _V.v209 = 0
                    return _V.v209
                  else
                    if _next_block == 71 then
                      _V.v210 = caml_ml_out_channels_list(0)
                      -- Block arg: v211 = v210 (captured)
                      _V.v211 = _V.v210
                      _next_block = 797
                    else
                      if _next_block == 797 then
                        if _V.v211 then
                          _next_block = 66
                        else
                          _next_block = 70
                        end
                      else
                        break
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v143 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (2 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 65
        while true do
          if _next_block == 65 then
            _V.v205 = caml_ml_string_length(_V.v204)
            _V.v206 = caml_ml_output(_V.v203, _V.v204, 0, _V.v205)
            return _V.dummy
          else
            break
          end
        end
      end)
      _V.v144 = {0, _V.v142}
      _V.v145 = caml_sys_executable_name(0)
      _V.v146 = caml_sys_get_config(0)
      _V.v147 = caml_sys_const_ostype_unix(0)
      _V.v148 = caml_sys_const_ostype_win32(0)
      _V.v149 = caml_sys_const_ostype_cygwin(0)
      _V.v150 = caml_sys_const_max_wosize(0)
      _V.v151 = caml_fresh_oo_id(0)
      _V.v152 = caml_fresh_oo_id(0)
      _V.v153 = caml_fresh_oo_id(0)
      _V.v154 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (2 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 149
        while true do
          if _next_block == 149 then
            _V.v205 = caml_create_bytes(_V.v203)
            _V.v206 = caml_fill_bytes(_V.v205, 0, _V.v203, _V.v204)
            return _V.v205
          else
            break
          end
        end
      end)
      _V.v155 = caml_create_bytes(0)
      _V.v156 = caml_make_closure(5, function(v203, v204, v205, v206, v207)
        -- Hoisted variables (11 total, using inherited _V table)
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        _V.v206 = v206
        _V.v207 = v207
        local _next_block = 132
        while true do
          if _next_block == 132 then
            _V.v208 = 0 <= _V.v207
            if _V.v208 then
              _next_block = 133
            else
              _next_block = 137
            end
          else
            if _next_block == 133 then
              _V.v209 = 0 <= _V.v204
              if _V.v209 then
                _next_block = 134
              else
                _next_block = 137
              end
            else
              if _next_block == 134 then
                _V.v210 = caml_ml_string_length(_V.v203)
                _V.v211 = _V.v210 - _V.v207
                _V.v212 = _V.v211 < _V.v204
                if _V.v212 then
                  _next_block = 137
                else
                  _next_block = 135
                end
              else
                if _next_block == 135 then
                  _V.v213 = 0 <= _V.v206
                  if _V.v213 then
                    _next_block = 136
                  else
                    _next_block = 137
                  end
                else
                  if _next_block == 136 then
                    _V.v214 = caml_ml_bytes_length(_V.v205)
                    _V.v215 = _V.v214 - _V.v207
                    _V.v216 = _V.v215 < _V.v206
                    if _V.v216 then
                      _next_block = 137
                    else
                      _next_block = 138
                    end
                  else
                    if _next_block == 137 then
                      _V.v217 = _V.v134(_V.v8)
                      return _V.v217
                    else
                      if _next_block == 138 then
                        _V.v218 = caml_blit_string(_V.v203, _V.v204, _V.v205, _V.v206, _V.v207)
                        return _V.dummy
                      else
                        break
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v157 = caml_make_closure(1, function(v203)
        -- Hoisted variables (4 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v203 = v203
        local _next_block = 792
        while true do
          if _next_block == 792 then
            _V.v204 = _V.v203[3]
            _V.v205 = 5 == _V.v204
            if _V.v205 then
              _next_block = 794
            else
              _next_block = 793
            end
          else
            if _next_block == 793 then
              _V.v206 = -6
              return _V.v206
            else
              if _next_block == 794 then
                _V.v207 = 12
                return _V.v207
              else
                break
              end
            end
          end
        end
      end)
      _V.v158 = caml_make_closure(1, function(v203)
        -- Hoisted variables (3 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v206 = nil
        _V.v203 = v203
        local _next_block = 791
        while true do
          if _next_block == 791 then
            _V.v204 = caml_create_bytes(_V.v203)
            _V.v205 = 0
            _V.v206 = {0, _V.v205, _V.v204}
            return _V.v206
          else
            break
          end
        end
      end)
      _V.v159 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (18 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 140
        while true do
          if _next_block == 140 then
            _V.v205 = caml_ml_bytes_length(_V.v221)
            _V.v206 = _V.v205 - _V.v214
            _V.v207 = _V.v206 < 0
            if _V.v207 then
              _next_block = 143
            else
              _next_block = 142
            end
          else
            if _next_block == 142 then
              _V.v208 = caml_ml_bytes_length(_V.v220)
              _V.v209 = _V.v208 - _V.v214
              _V.v210 = _V.v209 < 0
              if _V.v210 then
                _next_block = 143
              else
                _next_block = 144
              end
            else
              if _next_block == 143 then
                _V.v211 = _V.v134(_V.v9)
                _next_block = 812
              else
                if _next_block == 144 then
                  _V.v212 = caml_blit_bytes(_V.v221, 0, _V.v220, 0, _V.v214)
                  _next_block = 812
                else
                  if _next_block == 788 then
                    _V.v213 = _V.v203[3]
                    _V.v214 = caml_ml_bytes_length(_V.v213)
                    _V.v215 = _V.v203[2]
                    _V.v216 = _V.v215 + _V.v204
                    _V.v217 = _V.v214 < _V.v216
                    if _V.v217 then
                      _next_block = 789
                    else
                      _next_block = 790
                    end
                  else
                    if _next_block == 789 then
                      _V.v218 = caml_direct_int_mul(_V.v214, 2)
                      _V.v219 = _V.v216 <= _V.v218
                      if _V.v219 then
                        -- Block arg: v223 = v218 (captured)
                        _V.v223 = _V.v218
                        _next_block = 813
                      else
                        -- Block arg: v223 = v216 (captured)
                        _V.v223 = _V.v216
                        _next_block = 813
                      end
                    else
                      if _next_block == 790 then
                        return _V.dummy
                      else
                        if _next_block == 812 then
                          _V.v203[2] = _V.v220
                          _next_block = 790
                        else
                          if _next_block == 813 then
                            _V.v220 = caml_create_bytes(_V.v223)
                            _V.v221 = _V.v203[3]
                            _V.v222 = 0 <= _V.v214
                            if _V.v222 then
                              _next_block = 140
                            else
                              _next_block = 143
                            end
                          else
                            break
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v160 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (7 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 787
        while true do
          if _next_block == 787 then
            _V.v205 = 1
            _V.v206 = _V.v159(_V.v203, _V.v205)
            _V.v207 = _V.v203[2]
            _V.v208 = _V.v203[3]
            _V.v209 = caml_bytes_set(_V.v208, _V.v207, _V.v204)
            _V.v210 = _V.v203[2]
            _V.v211 = _V.v210 + 1
            _V.v203[1] = _V.v211
            return _V.dummy
          else
            break
          end
        end
      end)
      _V.v161 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (8 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 786
        while true do
          if _next_block == 786 then
            _V.v205 = caml_ml_string_length(_V.v204)
            _V.v206 = _V.v159(_V.v203, _V.v205)
            _V.v207 = _V.v203[2]
            _V.v208 = _V.v203[3]
            _V.v209 = 0
            _V.v210 = _V.v156(_V.v204, _V.v209, _V.v208, _V.v207, _V.v205)
            _V.v211 = _V.v203[2]
            _V.v212 = _V.v211 + _V.v205
            _V.v203[1] = _V.v212
            return _V.dummy
          else
            break
          end
        end
      end)
      _V.v162 = caml_make_closure(1, function(v203)
        -- Hoisted variables (10 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v203 = v203
        local _next_block = 146
        while true do
          if _next_block == 146 then
            _V.v204 = caml_ml_bytes_length(_V.v211)
            _V.v205 = _V.v204 - _V.v210
            _V.v206 = _V.v205 < 0
            if _V.v206 then
              _next_block = 147
            else
              _next_block = 148
            end
          else
            if _next_block == 147 then
              _V.v207 = _V.v134(_V.v10)
              -- Block arg: v214 = v207 (captured)
              _V.v214 = _V.v207
              _next_block = 811
            else
              if _next_block == 148 then
                _V.v208 = caml_create_bytes(_V.v210)
                _V.v209 = caml_blit_bytes(_V.v211, 0, _V.v208, 0, _V.v210)
                -- Block arg: v214 = v208 (captured)
                _V.v214 = _V.v208
                _next_block = 811
              else
                if _next_block == 785 then
                  _V.v210 = _V.v203[2]
                  _V.v211 = _V.v203[3]
                  _V.v212 = 0 <= _V.v210
                  if _V.v212 then
                    _next_block = 146
                  else
                    _next_block = 147
                  end
                else
                  if _next_block == 811 then
                    _V.v213 = caml_string_of_bytes(_V.v214)
                    return _V.v213
                  else
                    break
                  end
                end
              end
            end
          end
        end
      end)
      _V.v163 = caml_make_closure(2, function(v203, v204)
        -- Block arg: v205 = v204 (local)
        _V.v205 = v204
        -- Hoisted variables (39 total, using inherited _V table)
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 150
        while true do
          if _next_block == 150 then
            _V.v206 = _V.v205[1] or 0
            if _V.v206 == 0 then
              _next_block = 152
            else
              if _V.v206 == 1 then
                _next_block = 153
              else
                if _V.v206 == 2 then
                  _next_block = 154
                else
                  if _V.v206 == 3 then
                    _next_block = 155
                  else
                    if _V.v206 == 4 then
                      _next_block = 156
                    else
                      if _V.v206 == 5 then
                        _next_block = 157
                      else
                        if _V.v206 == 6 then
                          _next_block = 158
                        else
                          if _V.v206 == 7 then
                            _next_block = 159
                          else
                            if _V.v206 == 8 then
                              _next_block = 160
                            else
                              if _V.v206 == 9 then
                                _next_block = 161
                              else
                                if _V.v206 == 10 then
                                  _next_block = 162
                                else
                                  if _V.v206 == 11 then
                                    _next_block = 163
                                  else
                                    if _V.v206 == 12 then
                                      _next_block = 164
                                    else
                                      if _V.v206 == 13 then
                                        _next_block = 165
                                      else
                                        if _V.v206 == 14 then
                                          _next_block = 166
                                        else
                                          _next_block = 152
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          else
            if _next_block == 151 then
              return _V.dummy
            else
              if _next_block == 152 then
                _V.v207 = _V.v205[2]
                _V.v208 = _V.v161(_V.v203, _V.v11)
                -- Block arg: v205 = v207 (captured)
                _V.v205 = _V.v207
                _next_block = 799
              else
                if _next_block == 153 then
                  _V.v209 = _V.v205[2]
                  _V.v210 = _V.v161(_V.v203, _V.v12)
                  -- Block arg: v205 = v209 (captured)
                  _V.v205 = _V.v209
                  _next_block = 799
                else
                  if _next_block == 154 then
                    _V.v211 = _V.v205[2]
                    _V.v212 = _V.v161(_V.v203, _V.v13)
                    -- Block arg: v205 = v211 (captured)
                    _V.v205 = _V.v211
                    _next_block = 799
                  else
                    if _next_block == 155 then
                      _V.v213 = _V.v205[2]
                      _V.v214 = _V.v161(_V.v203, _V.v14)
                      -- Block arg: v205 = v213 (captured)
                      _V.v205 = _V.v213
                      _next_block = 799
                    else
                      if _next_block == 156 then
                        _V.v215 = _V.v205[2]
                        _V.v216 = _V.v161(_V.v203, _V.v15)
                        -- Block arg: v205 = v215 (captured)
                        _V.v205 = _V.v215
                        _next_block = 799
                      else
                        if _next_block == 157 then
                          _V.v217 = _V.v205[2]
                          _V.v218 = _V.v161(_V.v203, _V.v16)
                          -- Block arg: v205 = v217 (captured)
                          _V.v205 = _V.v217
                          _next_block = 799
                        else
                          if _next_block == 158 then
                            _V.v219 = _V.v205[2]
                            _V.v220 = _V.v161(_V.v203, _V.v17)
                            -- Block arg: v205 = v219 (captured)
                            _V.v205 = _V.v219
                            _next_block = 799
                          else
                            if _next_block == 159 then
                              _V.v221 = _V.v205[2]
                              _V.v222 = _V.v161(_V.v203, _V.v18)
                              -- Block arg: v205 = v221 (captured)
                              _V.v205 = _V.v221
                              _next_block = 799
                            else
                              if _next_block == 160 then
                                _V.v223 = _V.v205[3]
                                _V.v224 = _V.v205[2]
                                _V.v225 = _V.v161(_V.v203, _V.v19)
                                _V.v226 = _V.v163(_V.v203, _V.v224)
                                _V.v227 = _V.v161(_V.v203, _V.v20)
                                -- Block arg: v205 = v223 (captured)
                                _V.v205 = _V.v223
                                _next_block = 799
                              else
                                if _next_block == 161 then
                                  _V.v228 = _V.v205[4]
                                  _V.v229 = _V.v205[2]
                                  _V.v230 = _V.v161(_V.v203, _V.v21)
                                  _V.v231 = _V.v163(_V.v203, _V.v229)
                                  _V.v232 = _V.v161(_V.v203, _V.v22)
                                  -- Block arg: v205 = v228 (captured)
                                  _V.v205 = _V.v228
                                  _next_block = 799
                                else
                                  if _next_block == 162 then
                                    _V.v233 = _V.v205[2]
                                    _V.v234 = _V.v161(_V.v203, _V.v23)
                                    -- Block arg: v205 = v233 (captured)
                                    _V.v205 = _V.v233
                                    _next_block = 799
                                  else
                                    if _next_block == 163 then
                                      _V.v235 = _V.v205[2]
                                      _V.v236 = _V.v161(_V.v203, _V.v24)
                                      -- Block arg: v205 = v235 (captured)
                                      _V.v205 = _V.v235
                                      _next_block = 799
                                    else
                                      if _next_block == 164 then
                                        _V.v237 = _V.v205[2]
                                        _V.v238 = _V.v161(_V.v203, _V.v25)
                                        -- Block arg: v205 = v237 (captured)
                                        _V.v205 = _V.v237
                                        _next_block = 799
                                      else
                                        if _next_block == 165 then
                                          _V.v239 = _V.v205[2]
                                          _V.v240 = _V.v161(_V.v203, _V.v26)
                                          -- Block arg: v205 = v239 (captured)
                                          _V.v205 = _V.v239
                                          _next_block = 799
                                        else
                                          if _next_block == 166 then
                                            _V.v241 = _V.v205[2]
                                            _V.v242 = _V.v161(_V.v203, _V.v27)
                                            -- Block arg: v205 = v241 (captured)
                                            _V.v205 = _V.v241
                                            _next_block = 799
                                          else
                                            if _next_block == 799 then
                                              _V.v243 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                              if _V.v243 then
                                                _next_block = 151
                                              else
                                                _next_block = 150
                                              end
                                            else
                                              break
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v164 = caml_make_closure(1, function(v203)
        -- Hoisted variables (51 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v254 = nil
        _V.v203 = v203
        local _next_block = 167
        while true do
          if _next_block == 167 then
            _V.v204 = type(_V.v203) == "number" and _V.v203 % 1 == 0
            if _V.v204 then
              _next_block = 169
            else
              _next_block = 168
            end
          else
            if _next_block == 168 then
              _V.v205 = _V.v203[1] or 0
              if _V.v205 == 0 then
                _next_block = 170
              else
                if _V.v205 == 1 then
                  _next_block = 171
                else
                  if _V.v205 == 2 then
                    _next_block = 172
                  else
                    if _V.v205 == 3 then
                      _next_block = 173
                    else
                      if _V.v205 == 4 then
                        _next_block = 174
                      else
                        if _V.v205 == 5 then
                          _next_block = 175
                        else
                          if _V.v205 == 6 then
                            _next_block = 176
                          else
                            if _V.v205 == 7 then
                              _next_block = 177
                            else
                              if _V.v205 == 8 then
                                _next_block = 178
                              else
                                if _V.v205 == 9 then
                                  _next_block = 179
                                else
                                  if _V.v205 == 10 then
                                    _next_block = 180
                                  else
                                    if _V.v205 == 11 then
                                      _next_block = 181
                                    else
                                      if _V.v205 == 12 then
                                        _next_block = 182
                                      else
                                        if _V.v205 == 13 then
                                          _next_block = 183
                                        else
                                          if _V.v205 == 14 then
                                            _next_block = 184
                                          else
                                            _next_block = 170
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            else
              if _next_block == 169 then
                _V.v206 = 0
                return _V.v206
              else
                if _next_block == 170 then
                  _V.v207 = _V.v203[2]
                  _V.v208 = _V.v164(_V.v207)
                  _V.v209 = {0, _V.v208}
                  return _V.v209
                else
                  if _next_block == 171 then
                    _V.v210 = _V.v203[2]
                    _V.v211 = _V.v164(_V.v210)
                    _V.v212 = {1, _V.v211}
                    return _V.v212
                  else
                    if _next_block == 172 then
                      _V.v213 = _V.v203[2]
                      _V.v214 = _V.v164(_V.v213)
                      _V.v215 = {2, _V.v214}
                      return _V.v215
                    else
                      if _next_block == 173 then
                        _V.v216 = _V.v203[2]
                        _V.v217 = _V.v164(_V.v216)
                        _V.v218 = {3, _V.v217}
                        return _V.v218
                      else
                        if _next_block == 174 then
                          _V.v219 = _V.v203[2]
                          _V.v220 = _V.v164(_V.v219)
                          _V.v221 = {4, _V.v220}
                          return _V.v221
                        else
                          if _next_block == 175 then
                            _V.v222 = _V.v203[2]
                            _V.v223 = _V.v164(_V.v222)
                            _V.v224 = {5, _V.v223}
                            return _V.v224
                          else
                            if _next_block == 176 then
                              _V.v225 = _V.v203[2]
                              _V.v226 = _V.v164(_V.v225)
                              _V.v227 = {6, _V.v226}
                              return _V.v227
                            else
                              if _next_block == 177 then
                                _V.v228 = _V.v203[2]
                                _V.v229 = _V.v164(_V.v228)
                                _V.v230 = {7, _V.v229}
                                return _V.v230
                              else
                                if _next_block == 178 then
                                  _V.v231 = _V.v203[3]
                                  _V.v232 = _V.v203[2]
                                  _V.v233 = _V.v164(_V.v231)
                                  _V.v234 = {8, _V.v232, _V.v233}
                                  return _V.v234
                                else
                                  if _next_block == 179 then
                                    _V.v235 = _V.v203[4]
                                    _V.v236 = _V.v203[3]
                                    _V.v237 = _V.v203[2]
                                    _V.v238 = _V.v164(_V.v235)
                                    _V.v239 = {9, _V.v236, _V.v237, _V.v238}
                                    return _V.v239
                                  else
                                    if _next_block == 180 then
                                      _V.v240 = _V.v203[2]
                                      _V.v241 = _V.v164(_V.v240)
                                      _V.v242 = {10, _V.v241}
                                      return _V.v242
                                    else
                                      if _next_block == 181 then
                                        _V.v243 = _V.v203[2]
                                        _V.v244 = _V.v164(_V.v243)
                                        _V.v245 = {11, _V.v244}
                                        return _V.v245
                                      else
                                        if _next_block == 182 then
                                          _V.v246 = _V.v203[2]
                                          _V.v247 = _V.v164(_V.v246)
                                          _V.v248 = {12, _V.v247}
                                          return _V.v248
                                        else
                                          if _next_block == 183 then
                                            _V.v249 = _V.v203[2]
                                            _V.v250 = _V.v164(_V.v249)
                                            _V.v251 = {13, _V.v250}
                                            return _V.v251
                                          else
                                            if _next_block == 184 then
                                              _V.v252 = _V.v203[2]
                                              _V.v253 = _V.v164(_V.v252)
                                              _V.v254 = {14, _V.v253}
                                              return _V.v254
                                            else
                                              break
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v165 = caml_make_closure(1, function(v203)
        -- Hoisted variables (105 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v254 = nil
        _V.v255 = nil
        _V.v256 = nil
        _V.v257 = nil
        _V.v258 = nil
        _V.v259 = nil
        _V.v260 = nil
        _V.v261 = nil
        _V.v262 = nil
        _V.v263 = nil
        _V.v264 = nil
        _V.v265 = nil
        _V.v266 = nil
        _V.v267 = nil
        _V.v268 = nil
        _V.v269 = nil
        _V.v270 = nil
        _V.v271 = nil
        _V.v272 = nil
        _V.v273 = nil
        _V.v274 = nil
        _V.v275 = nil
        _V.v276 = nil
        _V.v277 = nil
        _V.v278 = nil
        _V.v279 = nil
        _V.v280 = nil
        _V.v281 = nil
        _V.v282 = nil
        _V.v283 = nil
        _V.v284 = nil
        _V.v285 = nil
        _V.v286 = nil
        _V.v287 = nil
        _V.v288 = nil
        _V.v289 = nil
        _V.v290 = nil
        _V.v291 = nil
        _V.v292 = nil
        _V.v293 = nil
        _V.v294 = nil
        _V.v295 = nil
        _V.v296 = nil
        _V.v297 = nil
        _V.v298 = nil
        _V.v299 = nil
        _V.v300 = nil
        _V.v301 = nil
        _V.v302 = nil
        _V.v303 = nil
        _V.v304 = nil
        _V.v305 = nil
        _V.v306 = nil
        _V.v307 = nil
        _V.v308 = nil
        _V.v203 = v203
        local _next_block = 225
        while true do
          if _next_block == 225 then
            _V.v204 = type(_V.v203) == "number" and _V.v203 % 1 == 0
            if _V.v204 then
              _next_block = 227
            else
              _next_block = 226
            end
          else
            if _next_block == 226 then
              _V.v205 = _V.v203[1] or 0
              if _V.v205 == 0 then
                _next_block = 228
              else
                if _V.v205 == 1 then
                  _next_block = 229
                else
                  if _V.v205 == 2 then
                    _next_block = 230
                  else
                    if _V.v205 == 3 then
                      _next_block = 231
                    else
                      if _V.v205 == 4 then
                        _next_block = 232
                      else
                        if _V.v205 == 5 then
                          _next_block = 233
                        else
                          if _V.v205 == 6 then
                            _next_block = 234
                          else
                            if _V.v205 == 7 then
                              _next_block = 235
                            else
                              if _V.v205 == 8 then
                                _next_block = 236
                              else
                                if _V.v205 == 9 then
                                  _next_block = 237
                                else
                                  if _V.v205 == 10 then
                                    _next_block = 238
                                  else
                                    if _V.v205 == 11 then
                                      _next_block = 239
                                    else
                                      if _V.v205 == 12 then
                                        _next_block = 240
                                      else
                                        if _V.v205 == 13 then
                                          _next_block = 241
                                        else
                                          if _V.v205 == 14 then
                                            _next_block = 242
                                          else
                                            _next_block = 228
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            else
              if _next_block == 227 then
                _V.v206 = caml_make_closure(1, function(v309)
                  _V.v309 = v309
                  local _next_block = 224
                  while true do
                    if _next_block == 224 then
                      return _V.dummy
                    else
                      break
                    end
                  end
                end)
                _V.v207 = caml_make_closure(1, function(v309)
                  _V.v309 = v309
                  local _next_block = 222
                  while true do
                    if _next_block == 222 then
                      return _V.dummy
                    else
                      break
                    end
                  end
                end)
                _V.v208 = {0, _V.dummy, _V.v207, _V.dummy, _V.v206}
                return _V.v208
              else
                if _next_block == 228 then
                  _V.v209 = _V.v203[2]
                  _V.v210 = _V.v165(_V.v209)
                  _V.v211 = _V.v210[5]
                  _V.v212 = _V.v210[3]
                  _V.v213 = caml_make_closure(1, function(v309)
                    -- Hoisted variables (2 total, using inherited _V table)
                    _V.v310 = nil
                    _V.v311 = nil
                    _V.v309 = v309
                    local _next_block = 220
                    while true do
                      if _next_block == 220 then
                        _V.v310 = 0
                        _V.v311 = _V.v212(_V.v310)
                        return _V.dummy
                      else
                        break
                      end
                    end
                  end)
                  _V.v214 = {0, _V.dummy, _V.v213, _V.dummy, _V.v211}
                  return _V.v214
                else
                  if _next_block == 229 then
                    _V.v215 = _V.v203[2]
                    _V.v216 = _V.v165(_V.v215)
                    _V.v217 = _V.v216[5]
                    _V.v218 = _V.v216[3]
                    _V.v219 = caml_make_closure(1, function(v309)
                      -- Hoisted variables (2 total, using inherited _V table)
                      _V.v310 = nil
                      _V.v311 = nil
                      _V.v309 = v309
                      local _next_block = 218
                      while true do
                        if _next_block == 218 then
                          _V.v310 = 0
                          _V.v311 = _V.v218(_V.v310)
                          return _V.dummy
                        else
                          break
                        end
                      end
                    end)
                    _V.v220 = {0, _V.dummy, _V.v219, _V.dummy, _V.v217}
                    return _V.v220
                  else
                    if _next_block == 230 then
                      _V.v221 = _V.v203[2]
                      _V.v222 = _V.v165(_V.v221)
                      _V.v223 = _V.v222[5]
                      _V.v224 = _V.v222[3]
                      _V.v225 = caml_make_closure(1, function(v309)
                        -- Hoisted variables (2 total, using inherited _V table)
                        _V.v310 = nil
                        _V.v311 = nil
                        _V.v309 = v309
                        local _next_block = 216
                        while true do
                          if _next_block == 216 then
                            _V.v310 = 0
                            _V.v311 = _V.v224(_V.v310)
                            return _V.dummy
                          else
                            break
                          end
                        end
                      end)
                      _V.v226 = {0, _V.dummy, _V.v225, _V.dummy, _V.v223}
                      return _V.v226
                    else
                      if _next_block == 231 then
                        _V.v227 = _V.v203[2]
                        _V.v228 = _V.v165(_V.v227)
                        _V.v229 = _V.v228[5]
                        _V.v230 = _V.v228[3]
                        _V.v231 = caml_make_closure(1, function(v309)
                          -- Hoisted variables (2 total, using inherited _V table)
                          _V.v310 = nil
                          _V.v311 = nil
                          _V.v309 = v309
                          local _next_block = 214
                          while true do
                            if _next_block == 214 then
                              _V.v310 = 0
                              _V.v311 = _V.v230(_V.v310)
                              return _V.dummy
                            else
                              break
                            end
                          end
                        end)
                        _V.v232 = {0, _V.dummy, _V.v231, _V.dummy, _V.v229}
                        return _V.v232
                      else
                        if _next_block == 232 then
                          _V.v233 = _V.v203[2]
                          _V.v234 = _V.v165(_V.v233)
                          _V.v235 = _V.v234[5]
                          _V.v236 = _V.v234[3]
                          _V.v237 = caml_make_closure(1, function(v309)
                            -- Hoisted variables (2 total, using inherited _V table)
                            _V.v310 = nil
                            _V.v311 = nil
                            _V.v309 = v309
                            local _next_block = 212
                            while true do
                              if _next_block == 212 then
                                _V.v310 = 0
                                _V.v311 = _V.v236(_V.v310)
                                return _V.dummy
                              else
                                break
                              end
                            end
                          end)
                          _V.v238 = {0, _V.dummy, _V.v237, _V.dummy, _V.v235}
                          return _V.v238
                        else
                          if _next_block == 233 then
                            _V.v239 = _V.v203[2]
                            _V.v240 = _V.v165(_V.v239)
                            _V.v241 = _V.v240[5]
                            _V.v242 = _V.v240[3]
                            _V.v243 = caml_make_closure(1, function(v309)
                              -- Hoisted variables (2 total, using inherited _V table)
                              _V.v310 = nil
                              _V.v311 = nil
                              _V.v309 = v309
                              local _next_block = 210
                              while true do
                                if _next_block == 210 then
                                  _V.v310 = 0
                                  _V.v311 = _V.v242(_V.v310)
                                  return _V.dummy
                                else
                                  break
                                end
                              end
                            end)
                            _V.v244 = {0, _V.dummy, _V.v243, _V.dummy, _V.v241}
                            return _V.v244
                          else
                            if _next_block == 234 then
                              _V.v245 = _V.v203[2]
                              _V.v246 = _V.v165(_V.v245)
                              _V.v247 = _V.v246[5]
                              _V.v248 = _V.v246[3]
                              _V.v249 = caml_make_closure(1, function(v309)
                                -- Hoisted variables (2 total, using inherited _V table)
                                _V.v310 = nil
                                _V.v311 = nil
                                _V.v309 = v309
                                local _next_block = 208
                                while true do
                                  if _next_block == 208 then
                                    _V.v310 = 0
                                    _V.v311 = _V.v248(_V.v310)
                                    return _V.dummy
                                  else
                                    break
                                  end
                                end
                              end)
                              _V.v250 = {0, _V.dummy, _V.v249, _V.dummy, _V.v247}
                              return _V.v250
                            else
                              if _next_block == 235 then
                                _V.v251 = _V.v203[2]
                                _V.v252 = _V.v165(_V.v251)
                                _V.v253 = _V.v252[5]
                                _V.v254 = _V.v252[3]
                                _V.v255 = caml_make_closure(1, function(v309)
                                  -- Hoisted variables (2 total, using inherited _V table)
                                  _V.v310 = nil
                                  _V.v311 = nil
                                  _V.v309 = v309
                                  local _next_block = 206
                                  while true do
                                    if _next_block == 206 then
                                      _V.v310 = 0
                                      _V.v311 = _V.v254(_V.v310)
                                      return _V.dummy
                                    else
                                      break
                                    end
                                  end
                                end)
                                _V.v256 = {0, _V.dummy, _V.v255, _V.dummy, _V.v253}
                                return _V.v256
                              else
                                if _next_block == 236 then
                                  _V.v257 = _V.v203[3]
                                  _V.v258 = _V.v165(_V.v257)
                                  _V.v259 = _V.v258[5]
                                  _V.v260 = _V.v258[3]
                                  _V.v261 = caml_make_closure(1, function(v309)
                                    -- Hoisted variables (2 total, using inherited _V table)
                                    _V.v310 = nil
                                    _V.v311 = nil
                                    _V.v309 = v309
                                    local _next_block = 204
                                    while true do
                                      if _next_block == 204 then
                                        _V.v310 = 0
                                        _V.v311 = _V.v260(_V.v310)
                                        return _V.dummy
                                      else
                                        break
                                      end
                                    end
                                  end)
                                  _V.v262 = {0, _V.dummy, _V.v261, _V.dummy, _V.v259}
                                  return _V.v262
                                else
                                  if _next_block == 237 then
                                    _V.v263 = _V.v203[4]
                                    _V.v264 = _V.v203[3]
                                    _V.v265 = _V.v203[2]
                                    _V.v266 = _V.v165(_V.v263)
                                    _V.v267 = _V.v266[5]
                                    _V.v268 = _V.v266[3]
                                    _V.v269 = _V.v164(_V.v265)
                                    _V.v270 = _V.v166(_V.v269, _V.v264)
                                    _V.v271 = _V.v165(_V.v270)
                                    _V.v272 = _V.v271[5]
                                    _V.v273 = _V.v271[3]
                                    _V.v274 = caml_make_closure(1, function(v309)
                                      -- Hoisted variables (4 total, using inherited _V table)
                                      _V.v310 = nil
                                      _V.v311 = nil
                                      _V.v312 = nil
                                      _V.v313 = nil
                                      _V.v309 = v309
                                      local _next_block = 202
                                      while true do
                                        if _next_block == 202 then
                                          _V.v310 = 0
                                          _V.v311 = _V.v272(_V.v310)
                                          _V.v312 = 0
                                          _V.v313 = _V.v267(_V.v312)
                                          return _V.dummy
                                        else
                                          break
                                        end
                                      end
                                    end)
                                    _V.v275 = caml_make_closure(1, function(v309)
                                      -- Hoisted variables (4 total, using inherited _V table)
                                      _V.v310 = nil
                                      _V.v311 = nil
                                      _V.v312 = nil
                                      _V.v313 = nil
                                      _V.v309 = v309
                                      local _next_block = 200
                                      while true do
                                        if _next_block == 200 then
                                          _V.v310 = 0
                                          _V.v311 = _V.v273(_V.v310)
                                          _V.v312 = 0
                                          _V.v313 = _V.v268(_V.v312)
                                          return _V.dummy
                                        else
                                          break
                                        end
                                      end
                                    end)
                                    _V.v276 = {0, _V.dummy, _V.v275, _V.dummy, _V.v274}
                                    return _V.v276
                                  else
                                    if _next_block == 238 then
                                      _V.v277 = _V.v203[2]
                                      _V.v278 = _V.v165(_V.v277)
                                      _V.v279 = _V.v278[5]
                                      _V.v280 = _V.v278[3]
                                      _V.v281 = caml_make_closure(1, function(v309)
                                        -- Hoisted variables (2 total, using inherited _V table)
                                        _V.v310 = nil
                                        _V.v311 = nil
                                        _V.v309 = v309
                                        local _next_block = 198
                                        while true do
                                          if _next_block == 198 then
                                            _V.v310 = 0
                                            _V.v311 = _V.v280(_V.v310)
                                            return _V.dummy
                                          else
                                            break
                                          end
                                        end
                                      end)
                                      _V.v282 = {0, _V.dummy, _V.v281, _V.dummy, _V.v279}
                                      return _V.v282
                                    else
                                      if _next_block == 239 then
                                        _V.v283 = _V.v203[2]
                                        _V.v284 = _V.v165(_V.v283)
                                        _V.v285 = _V.v284[5]
                                        _V.v286 = _V.v284[3]
                                        _V.v287 = caml_make_closure(1, function(v309)
                                          -- Hoisted variables (2 total, using inherited _V table)
                                          _V.v310 = nil
                                          _V.v311 = nil
                                          _V.v309 = v309
                                          local _next_block = 196
                                          while true do
                                            if _next_block == 196 then
                                              _V.v310 = 0
                                              _V.v311 = _V.v286(_V.v310)
                                              return _V.dummy
                                            else
                                              break
                                            end
                                          end
                                        end)
                                        _V.v288 = {0, _V.dummy, _V.v287, _V.dummy, _V.v285}
                                        return _V.v288
                                      else
                                        if _next_block == 240 then
                                          _V.v289 = _V.v203[2]
                                          _V.v290 = _V.v165(_V.v289)
                                          _V.v291 = _V.v290[5]
                                          _V.v292 = _V.v290[3]
                                          _V.v293 = caml_make_closure(1, function(v309)
                                            -- Hoisted variables (2 total, using inherited _V table)
                                            _V.v310 = nil
                                            _V.v311 = nil
                                            _V.v309 = v309
                                            local _next_block = 194
                                            while true do
                                              if _next_block == 194 then
                                                _V.v310 = 0
                                                _V.v311 = _V.v292(_V.v310)
                                                return _V.dummy
                                              else
                                                break
                                              end
                                            end
                                          end)
                                          _V.v294 = {0, _V.dummy, _V.v293, _V.dummy, _V.v291}
                                          return _V.v294
                                        else
                                          if _next_block == 241 then
                                            _V.v295 = _V.v203[2]
                                            _V.v296 = _V.v165(_V.v295)
                                            _V.v297 = _V.v296[5]
                                            _V.v298 = _V.v296[3]
                                            _V.v299 = caml_make_closure(1, function(v309)
                                              -- Hoisted variables (2 total, using inherited _V table)
                                              _V.v310 = nil
                                              _V.v311 = nil
                                              _V.v309 = v309
                                              local _next_block = 192
                                              while true do
                                                if _next_block == 192 then
                                                  _V.v310 = 0
                                                  _V.v311 = _V.v297(_V.v310)
                                                  return _V.dummy
                                                else
                                                  break
                                                end
                                              end
                                            end)
                                            _V.v300 = caml_make_closure(1, function(v309)
                                              -- Hoisted variables (2 total, using inherited _V table)
                                              _V.v310 = nil
                                              _V.v311 = nil
                                              _V.v309 = v309
                                              local _next_block = 190
                                              while true do
                                                if _next_block == 190 then
                                                  _V.v310 = 0
                                                  _V.v311 = _V.v298(_V.v310)
                                                  return _V.dummy
                                                else
                                                  break
                                                end
                                              end
                                            end)
                                            _V.v301 = {0, _V.dummy, _V.v300, _V.dummy, _V.v299}
                                            return _V.v301
                                          else
                                            if _next_block == 242 then
                                              _V.v302 = _V.v203[2]
                                              _V.v303 = _V.v165(_V.v302)
                                              _V.v304 = _V.v303[5]
                                              _V.v305 = _V.v303[3]
                                              _V.v306 = caml_make_closure(1, function(v309)
                                                -- Hoisted variables (2 total, using inherited _V table)
                                                _V.v310 = nil
                                                _V.v311 = nil
                                                _V.v309 = v309
                                                local _next_block = 188
                                                while true do
                                                  if _next_block == 188 then
                                                    _V.v310 = 0
                                                    _V.v311 = _V.v304(_V.v310)
                                                    return _V.dummy
                                                  else
                                                    break
                                                  end
                                                end
                                              end)
                                              _V.v307 = caml_make_closure(1, function(v309)
                                                -- Hoisted variables (2 total, using inherited _V table)
                                                _V.v310 = nil
                                                _V.v311 = nil
                                                _V.v309 = v309
                                                local _next_block = 186
                                                while true do
                                                  if _next_block == 186 then
                                                    _V.v310 = 0
                                                    _V.v311 = _V.v305(_V.v310)
                                                    return _V.dummy
                                                  else
                                                    break
                                                  end
                                                end
                                              end)
                                              _V.v308 = {0, _V.dummy, _V.v307, _V.dummy, _V.v306}
                                              return _V.v308
                                            else
                                              break
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v166 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (128 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v254 = nil
        _V.v255 = nil
        _V.v256 = nil
        _V.v257 = nil
        _V.v258 = nil
        _V.v259 = nil
        _V.v260 = nil
        _V.v261 = nil
        _V.v262 = nil
        _V.v263 = nil
        _V.v264 = nil
        _V.v265 = nil
        _V.v266 = nil
        _V.v267 = nil
        _V.v268 = nil
        _V.v269 = nil
        _V.v270 = nil
        _V.v271 = nil
        _V.v272 = nil
        _V.v273 = nil
        _V.v274 = nil
        _V.v275 = nil
        _V.v276 = nil
        _V.v277 = nil
        _V.v278 = nil
        _V.v279 = nil
        _V.v280 = nil
        _V.v281 = nil
        _V.v282 = nil
        _V.v283 = nil
        _V.v284 = nil
        _V.v285 = nil
        _V.v286 = nil
        _V.v287 = nil
        _V.v288 = nil
        _V.v289 = nil
        _V.v290 = nil
        _V.v291 = nil
        _V.v292 = nil
        _V.v293 = nil
        _V.v294 = nil
        _V.v295 = nil
        _V.v296 = nil
        _V.v297 = nil
        _V.v298 = nil
        _V.v299 = nil
        _V.v300 = nil
        _V.v301 = nil
        _V.v302 = nil
        _V.v303 = nil
        _V.v304 = nil
        _V.v305 = nil
        _V.v306 = nil
        _V.v307 = nil
        _V.v308 = nil
        _V.v309 = nil
        _V.v310 = nil
        _V.v311 = nil
        _V.v312 = nil
        _V.v313 = nil
        _V.v314 = nil
        _V.v315 = nil
        _V.v316 = nil
        _V.v317 = nil
        _V.v318 = nil
        _V.v319 = nil
        _V.v320 = nil
        _V.v321 = nil
        _V.v322 = nil
        _V.v323 = nil
        _V.v324 = nil
        _V.v325 = nil
        _V.v326 = nil
        _V.v327 = nil
        _V.v328 = nil
        _V.v329 = nil
        _V.v330 = nil
        _V.v331 = nil
        _V.v332 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 243
        while true do
          if _next_block == 243 then
            _V.v205 = type(_V.v203) == "number" and _V.v203 % 1 == 0
            if _V.v205 then
              _next_block = 245
            else
              _next_block = 244
            end
          else
            if _next_block == 244 then
              _V.v206 = _V.v203[1] or 0
              if _V.v206 == 0 then
                _next_block = 249
              else
                if _V.v206 == 1 then
                  _next_block = 252
                else
                  if _V.v206 == 2 then
                    _next_block = 255
                  else
                    if _V.v206 == 3 then
                      _next_block = 258
                    else
                      if _V.v206 == 4 then
                        _next_block = 261
                      else
                        if _V.v206 == 5 then
                          _next_block = 264
                        else
                          if _V.v206 == 6 then
                            _next_block = 267
                          else
                            if _V.v206 == 7 then
                              _next_block = 270
                            else
                              if _V.v206 == 8 then
                                _next_block = 273
                              else
                                if _V.v206 == 9 then
                                  _next_block = 276
                                else
                                  if _V.v206 == 10 then
                                    _next_block = 279
                                  else
                                    if _V.v206 == 11 then
                                      _next_block = 283
                                    else
                                      if _V.v206 == 12 then
                                        _next_block = 286
                                      else
                                        if _V.v206 == 13 then
                                          _next_block = 289
                                        else
                                          if _V.v206 == 14 then
                                            _next_block = 292
                                          else
                                            _next_block = 249
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            else
              if _next_block == 245 then
                _V.v207 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                if _V.v207 then
                  _next_block = 248
                else
                  _next_block = 246
                end
              else
                if _next_block == 246 then
                  _V.v208 = _V.v204[1] or 0
                  if _V.v208 == 0 then
                    _next_block = 247
                  else
                    if _V.v208 == 1 then
                      _next_block = 247
                    else
                      if _V.v208 == 2 then
                        _next_block = 247
                      else
                        if _V.v208 == 3 then
                          _next_block = 247
                        else
                          if _V.v208 == 4 then
                            _next_block = 247
                          else
                            if _V.v208 == 5 then
                              _next_block = 247
                            else
                              if _V.v208 == 6 then
                                _next_block = 247
                              else
                                if _V.v208 == 7 then
                                  _next_block = 247
                                else
                                  if _V.v208 == 8 then
                                    _next_block = 305
                                  else
                                    if _V.v208 == 9 then
                                      _next_block = 307
                                    else
                                      if _V.v208 == 10 then
                                        _next_block = 295
                                      else
                                        if _V.v208 == 11 then
                                          _next_block = 297
                                        else
                                          if _V.v208 == 12 then
                                            _next_block = 299
                                          else
                                            if _V.v208 == 13 then
                                              _next_block = 301
                                            else
                                              if _V.v208 == 14 then
                                                _next_block = 303
                                              else
                                                _next_block = 247
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                else
                  if _next_block == 247 then
                    _V.v209 = {0, _V.Assert_failure, _V.v28}
                    error(_V.v209)
                  else
                    if _next_block == 248 then
                      _V.v210 = 0
                      return _V.v210
                    else
                      if _next_block == 249 then
                        _V.v211 = _V.v203[2]
                        _V.v212 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                        if _V.v212 then
                          _next_block = 308
                        else
                          _next_block = 250
                        end
                      else
                        if _next_block == 250 then
                          _V.v213 = _V.v204[1] or 0
                          if _V.v213 == 0 then
                            _next_block = 251
                          else
                            if _V.v213 == 1 then
                              _next_block = 308
                            else
                              if _V.v213 == 2 then
                                _next_block = 308
                              else
                                if _V.v213 == 3 then
                                  _next_block = 308
                                else
                                  if _V.v213 == 4 then
                                    _next_block = 308
                                  else
                                    if _V.v213 == 5 then
                                      _next_block = 308
                                    else
                                      if _V.v213 == 6 then
                                        _next_block = 308
                                      else
                                        if _V.v213 == 7 then
                                          _next_block = 308
                                        else
                                          if _V.v213 == 8 then
                                            _next_block = 305
                                          else
                                            if _V.v213 == 9 then
                                              _next_block = 307
                                            else
                                              if _V.v213 == 10 then
                                                _next_block = 295
                                              else
                                                if _V.v213 == 11 then
                                                  _next_block = 297
                                                else
                                                  if _V.v213 == 12 then
                                                    _next_block = 299
                                                  else
                                                    if _V.v213 == 13 then
                                                      _next_block = 301
                                                    else
                                                      if _V.v213 == 14 then
                                                        _next_block = 303
                                                      else
                                                        _next_block = 251
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        else
                          if _next_block == 251 then
                            _V.v214 = _V.v204[2]
                            _V.v215 = _V.v166(_V.v211, _V.v214)
                            _V.v216 = {0, _V.v215}
                            return _V.v216
                          else
                            if _next_block == 252 then
                              _V.v217 = _V.v203[2]
                              _V.v218 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                              if _V.v218 then
                                _next_block = 308
                              else
                                _next_block = 253
                              end
                            else
                              if _next_block == 253 then
                                _V.v219 = _V.v204[1] or 0
                                if _V.v219 == 0 then
                                  _next_block = 308
                                else
                                  if _V.v219 == 1 then
                                    _next_block = 254
                                  else
                                    if _V.v219 == 2 then
                                      _next_block = 308
                                    else
                                      if _V.v219 == 3 then
                                        _next_block = 308
                                      else
                                        if _V.v219 == 4 then
                                          _next_block = 308
                                        else
                                          if _V.v219 == 5 then
                                            _next_block = 308
                                          else
                                            if _V.v219 == 6 then
                                              _next_block = 308
                                            else
                                              if _V.v219 == 7 then
                                                _next_block = 308
                                              else
                                                if _V.v219 == 8 then
                                                  _next_block = 305
                                                else
                                                  if _V.v219 == 9 then
                                                    _next_block = 307
                                                  else
                                                    if _V.v219 == 10 then
                                                      _next_block = 295
                                                    else
                                                      if _V.v219 == 11 then
                                                        _next_block = 297
                                                      else
                                                        if _V.v219 == 12 then
                                                          _next_block = 299
                                                        else
                                                          if _V.v219 == 13 then
                                                            _next_block = 301
                                                          else
                                                            if _V.v219 == 14 then
                                                              _next_block = 303
                                                            else
                                                              _next_block = 308
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              else
                                if _next_block == 254 then
                                  _V.v220 = _V.v204[2]
                                  _V.v221 = _V.v166(_V.v217, _V.v220)
                                  _V.v222 = {1, _V.v221}
                                  return _V.v222
                                else
                                  if _next_block == 255 then
                                    _V.v223 = _V.v203[2]
                                    _V.v224 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                    if _V.v224 then
                                      _next_block = 308
                                    else
                                      _next_block = 256
                                    end
                                  else
                                    if _next_block == 256 then
                                      _V.v225 = _V.v204[1] or 0
                                      if _V.v225 == 0 then
                                        _next_block = 308
                                      else
                                        if _V.v225 == 1 then
                                          _next_block = 308
                                        else
                                          if _V.v225 == 2 then
                                            _next_block = 257
                                          else
                                            if _V.v225 == 3 then
                                              _next_block = 308
                                            else
                                              if _V.v225 == 4 then
                                                _next_block = 308
                                              else
                                                if _V.v225 == 5 then
                                                  _next_block = 308
                                                else
                                                  if _V.v225 == 6 then
                                                    _next_block = 308
                                                  else
                                                    if _V.v225 == 7 then
                                                      _next_block = 308
                                                    else
                                                      if _V.v225 == 8 then
                                                        _next_block = 305
                                                      else
                                                        if _V.v225 == 9 then
                                                          _next_block = 307
                                                        else
                                                          if _V.v225 == 10 then
                                                            _next_block = 295
                                                          else
                                                            if _V.v225 == 11 then
                                                              _next_block = 297
                                                            else
                                                              if _V.v225 == 12 then
                                                                _next_block = 299
                                                              else
                                                                if _V.v225 == 13 then
                                                                  _next_block = 301
                                                                else
                                                                  if _V.v225 == 14 then
                                                                    _next_block = 303
                                                                  else
                                                                    _next_block = 308
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    else
                                      if _next_block == 257 then
                                        _V.v226 = _V.v204[2]
                                        _V.v227 = _V.v166(_V.v223, _V.v226)
                                        _V.v228 = {2, _V.v227}
                                        return _V.v228
                                      else
                                        if _next_block == 258 then
                                          _V.v229 = _V.v203[2]
                                          _V.v230 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                          if _V.v230 then
                                            _next_block = 308
                                          else
                                            _next_block = 259
                                          end
                                        else
                                          if _next_block == 259 then
                                            _V.v231 = _V.v204[1] or 0
                                            if _V.v231 == 0 then
                                              _next_block = 308
                                            else
                                              if _V.v231 == 1 then
                                                _next_block = 308
                                              else
                                                if _V.v231 == 2 then
                                                  _next_block = 308
                                                else
                                                  if _V.v231 == 3 then
                                                    _next_block = 260
                                                  else
                                                    if _V.v231 == 4 then
                                                      _next_block = 308
                                                    else
                                                      if _V.v231 == 5 then
                                                        _next_block = 308
                                                      else
                                                        if _V.v231 == 6 then
                                                          _next_block = 308
                                                        else
                                                          if _V.v231 == 7 then
                                                            _next_block = 308
                                                          else
                                                            if _V.v231 == 8 then
                                                              _next_block = 305
                                                            else
                                                              if _V.v231 == 9 then
                                                                _next_block = 307
                                                              else
                                                                if _V.v231 == 10 then
                                                                  _next_block = 295
                                                                else
                                                                  if _V.v231 == 11 then
                                                                    _next_block = 297
                                                                  else
                                                                    if _V.v231 == 12 then
                                                                      _next_block = 299
                                                                    else
                                                                      if _V.v231 == 13 then
                                                                        _next_block = 301
                                                                      else
                                                                        if _V.v231 == 14 then
                                                                          _next_block = 303
                                                                        else
                                                                          _next_block = 308
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          else
                                            if _next_block == 260 then
                                              _V.v232 = _V.v204[2]
                                              _V.v233 = _V.v166(_V.v229, _V.v232)
                                              _V.v234 = {3, _V.v233}
                                              return _V.v234
                                            else
                                              if _next_block == 261 then
                                                _V.v235 = _V.v203[2]
                                                _V.v236 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                if _V.v236 then
                                                  _next_block = 308
                                                else
                                                  _next_block = 262
                                                end
                                              else
                                                if _next_block == 262 then
                                                  _V.v237 = _V.v204[1] or 0
                                                  if _V.v237 == 0 then
                                                    _next_block = 308
                                                  else
                                                    if _V.v237 == 1 then
                                                      _next_block = 308
                                                    else
                                                      if _V.v237 == 2 then
                                                        _next_block = 308
                                                      else
                                                        if _V.v237 == 3 then
                                                          _next_block = 308
                                                        else
                                                          if _V.v237 == 4 then
                                                            _next_block = 263
                                                          else
                                                            if _V.v237 == 5 then
                                                              _next_block = 308
                                                            else
                                                              if _V.v237 == 6 then
                                                                _next_block = 308
                                                              else
                                                                if _V.v237 == 7 then
                                                                  _next_block = 308
                                                                else
                                                                  if _V.v237 == 8 then
                                                                    _next_block = 305
                                                                  else
                                                                    if _V.v237 == 9 then
                                                                      _next_block = 307
                                                                    else
                                                                      if _V.v237 == 10 then
                                                                        _next_block = 295
                                                                      else
                                                                        if _V.v237 == 11 then
                                                                          _next_block = 297
                                                                        else
                                                                          if _V.v237 == 12 then
                                                                            _next_block = 299
                                                                          else
                                                                            if _V.v237 == 13 then
                                                                              _next_block = 301
                                                                            else
                                                                              if _V.v237 == 14 then
                                                                                _next_block = 303
                                                                              else
                                                                                _next_block = 308
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                else
                                                  if _next_block == 263 then
                                                    _V.v238 = _V.v204[2]
                                                    _V.v239 = _V.v166(_V.v235, _V.v238)
                                                    _V.v240 = {4, _V.v239}
                                                    return _V.v240
                                                  else
                                                    if _next_block == 264 then
                                                      _V.v241 = _V.v203[2]
                                                      _V.v242 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                      if _V.v242 then
                                                        _next_block = 308
                                                      else
                                                        _next_block = 265
                                                      end
                                                    else
                                                      if _next_block == 265 then
                                                        _V.v243 = _V.v204[1] or 0
                                                        if _V.v243 == 0 then
                                                          _next_block = 308
                                                        else
                                                          if _V.v243 == 1 then
                                                            _next_block = 308
                                                          else
                                                            if _V.v243 == 2 then
                                                              _next_block = 308
                                                            else
                                                              if _V.v243 == 3 then
                                                                _next_block = 308
                                                              else
                                                                if _V.v243 == 4 then
                                                                  _next_block = 308
                                                                else
                                                                  if _V.v243 == 5 then
                                                                    _next_block = 266
                                                                  else
                                                                    if _V.v243 == 6 then
                                                                      _next_block = 308
                                                                    else
                                                                      if _V.v243 == 7 then
                                                                        _next_block = 308
                                                                      else
                                                                        if _V.v243 == 8 then
                                                                          _next_block = 305
                                                                        else
                                                                          if _V.v243 == 9 then
                                                                            _next_block = 307
                                                                          else
                                                                            if _V.v243 == 10 then
                                                                              _next_block = 295
                                                                            else
                                                                              if _V.v243 == 11 then
                                                                                _next_block = 297
                                                                              else
                                                                                if _V.v243 == 12 then
                                                                                  _next_block = 299
                                                                                else
                                                                                  if _V.v243 == 13 then
                                                                                    _next_block = 301
                                                                                  else
                                                                                    if _V.v243 == 14 then
                                                                                      _next_block = 303
                                                                                    else
                                                                                      _next_block = 308
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      else
                                                        if _next_block == 266 then
                                                          _V.v244 = _V.v204[2]
                                                          _V.v245 = _V.v166(_V.v241, _V.v244)
                                                          _V.v246 = {5, _V.v245}
                                                          return _V.v246
                                                        else
                                                          if _next_block == 267 then
                                                            _V.v247 = _V.v203[2]
                                                            _V.v248 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                            if _V.v248 then
                                                              _next_block = 308
                                                            else
                                                              _next_block = 268
                                                            end
                                                          else
                                                            if _next_block == 268 then
                                                              _V.v249 = _V.v204[1] or 0
                                                              if _V.v249 == 0 then
                                                                _next_block = 308
                                                              else
                                                                if _V.v249 == 1 then
                                                                  _next_block = 308
                                                                else
                                                                  if _V.v249 == 2 then
                                                                    _next_block = 308
                                                                  else
                                                                    if _V.v249 == 3 then
                                                                      _next_block = 308
                                                                    else
                                                                      if _V.v249 == 4 then
                                                                        _next_block = 308
                                                                      else
                                                                        if _V.v249 == 5 then
                                                                          _next_block = 308
                                                                        else
                                                                          if _V.v249 == 6 then
                                                                            _next_block = 269
                                                                          else
                                                                            if _V.v249 == 7 then
                                                                              _next_block = 308
                                                                            else
                                                                              if _V.v249 == 8 then
                                                                                _next_block = 305
                                                                              else
                                                                                if _V.v249 == 9 then
                                                                                  _next_block = 307
                                                                                else
                                                                                  if _V.v249 == 10 then
                                                                                    _next_block = 295
                                                                                  else
                                                                                    if _V.v249 == 11 then
                                                                                      _next_block = 297
                                                                                    else
                                                                                      if _V.v249 == 12 then
                                                                                        _next_block = 299
                                                                                      else
                                                                                        if _V.v249 == 13 then
                                                                                          _next_block = 301
                                                                                        else
                                                                                          if _V.v249 == 14 then
                                                                                            _next_block = 303
                                                                                          else
                                                                                            _next_block = 308
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            else
                                                              if _next_block == 269 then
                                                                _V.v250 = _V.v204[2]
                                                                _V.v251 = _V.v166(_V.v247, _V.v250)
                                                                _V.v252 = {6, _V.v251}
                                                                return _V.v252
                                                              else
                                                                if _next_block == 270 then
                                                                  _V.v253 = _V.v203[2]
                                                                  _V.v254 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                  if _V.v254 then
                                                                    _next_block = 308
                                                                  else
                                                                    _next_block = 271
                                                                  end
                                                                else
                                                                  if _next_block == 271 then
                                                                    _V.v255 = _V.v204[1] or 0
                                                                    if _V.v255 == 0 then
                                                                      _next_block = 308
                                                                    else
                                                                      if _V.v255 == 1 then
                                                                        _next_block = 308
                                                                      else
                                                                        if _V.v255 == 2 then
                                                                          _next_block = 308
                                                                        else
                                                                          if _V.v255 == 3 then
                                                                            _next_block = 308
                                                                          else
                                                                            if _V.v255 == 4 then
                                                                              _next_block = 308
                                                                            else
                                                                              if _V.v255 == 5 then
                                                                                _next_block = 308
                                                                              else
                                                                                if _V.v255 == 6 then
                                                                                  _next_block = 308
                                                                                else
                                                                                  if _V.v255 == 7 then
                                                                                    _next_block = 272
                                                                                  else
                                                                                    if _V.v255 == 8 then
                                                                                      _next_block = 305
                                                                                    else
                                                                                      if _V.v255 == 9 then
                                                                                        _next_block = 307
                                                                                      else
                                                                                        if _V.v255 == 10 then
                                                                                          _next_block = 295
                                                                                        else
                                                                                          if _V.v255 == 11 then
                                                                                            _next_block = 297
                                                                                          else
                                                                                            if _V.v255 == 12 then
                                                                                              _next_block = 299
                                                                                            else
                                                                                              if _V.v255 == 13 then
                                                                                                _next_block = 301
                                                                                              else
                                                                                                if _V.v255 == 14 then
                                                                                                  _next_block = 303
                                                                                                else
                                                                                                  _next_block = 308
                                                                                                end
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  else
                                                                    if _next_block == 272 then
                                                                      _V.v256 = _V.v204[2]
                                                                      _V.v257 = _V.v166(_V.v253, _V.v256)
                                                                      _V.v258 = {7, _V.v257}
                                                                      return _V.v258
                                                                    else
                                                                      if _next_block == 273 then
                                                                        _V.v259 = _V.v203[3]
                                                                        _V.v260 = _V.v203[2]
                                                                        _V.v261 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                        if _V.v261 then
                                                                          _next_block = 304
                                                                        else
                                                                          _next_block = 274
                                                                        end
                                                                      else
                                                                        if _next_block == 274 then
                                                                          _V.v262 = _V.v204[1] or 0
                                                                          if _V.v262 == 0 then
                                                                            _next_block = 304
                                                                          else
                                                                            if _V.v262 == 1 then
                                                                              _next_block = 304
                                                                            else
                                                                              if _V.v262 == 2 then
                                                                                _next_block = 304
                                                                              else
                                                                                if _V.v262 == 3 then
                                                                                  _next_block = 304
                                                                                else
                                                                                  if _V.v262 == 4 then
                                                                                    _next_block = 304
                                                                                  else
                                                                                    if _V.v262 == 5 then
                                                                                      _next_block = 304
                                                                                    else
                                                                                      if _V.v262 == 6 then
                                                                                        _next_block = 304
                                                                                      else
                                                                                        if _V.v262 == 7 then
                                                                                          _next_block = 304
                                                                                        else
                                                                                          if _V.v262 == 8 then
                                                                                            _next_block = 275
                                                                                          else
                                                                                            if _V.v262 == 9 then
                                                                                              _next_block = 304
                                                                                            else
                                                                                              if _V.v262 == 10 then
                                                                                                _next_block = 295
                                                                                              else
                                                                                                if _V.v262 == 11 then
                                                                                                  _next_block = 297
                                                                                                else
                                                                                                  if _V.v262 == 12 then
                                                                                                    _next_block = 299
                                                                                                  else
                                                                                                    if _V.v262 == 13 then
                                                                                                      _next_block = 301
                                                                                                    else
                                                                                                      if _V.v262 == 14 then
                                                                                                        _next_block = 303
                                                                                                      else
                                                                                                        _next_block = 304
                                                                                                      end
                                                                                                    end
                                                                                                  end
                                                                                                end
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        else
                                                                          if _next_block == 275 then
                                                                            _V.v263 = _V.v204[3]
                                                                            _V.v264 = _V.v204[2]
                                                                            _V.v265 = _V.v166(_V.v259, _V.v263)
                                                                            _V.v266 = _V.v166(_V.v260, _V.v264)
                                                                            _V.v267 = {8, _V.v266, _V.v265}
                                                                            return _V.v267
                                                                          else
                                                                            if _next_block == 276 then
                                                                              _V.v268 = _V.v203[4]
                                                                              _V.v269 = _V.v203[3]
                                                                              _V.v270 = _V.v203[2]
                                                                              _V.v271 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                              if _V.v271 then
                                                                                _next_block = 306
                                                                              else
                                                                                _next_block = 277
                                                                              end
                                                                            else
                                                                              if _next_block == 277 then
                                                                                _V.v272 = _V.v204[1] or 0
                                                                                if _V.v272 == 0 then
                                                                                  _next_block = 306
                                                                                else
                                                                                  if _V.v272 == 1 then
                                                                                    _next_block = 306
                                                                                  else
                                                                                    if _V.v272 == 2 then
                                                                                      _next_block = 306
                                                                                    else
                                                                                      if _V.v272 == 3 then
                                                                                        _next_block = 306
                                                                                      else
                                                                                        if _V.v272 == 4 then
                                                                                          _next_block = 306
                                                                                        else
                                                                                          if _V.v272 == 5 then
                                                                                            _next_block = 306
                                                                                          else
                                                                                            if _V.v272 == 6 then
                                                                                              _next_block = 306
                                                                                            else
                                                                                              if _V.v272 == 7 then
                                                                                                _next_block = 306
                                                                                              else
                                                                                                if _V.v272 == 8 then
                                                                                                  _next_block = 305
                                                                                                else
                                                                                                  if _V.v272 == 9 then
                                                                                                    _next_block = 278
                                                                                                  else
                                                                                                    if _V.v272 == 10 then
                                                                                                      _next_block = 295
                                                                                                    else
                                                                                                      if _V.v272 == 11 then
                                                                                                        _next_block = 297
                                                                                                      else
                                                                                                        if _V.v272 == 12 then
                                                                                                          _next_block = 299
                                                                                                        else
                                                                                                          if _V.v272 == 13 then
                                                                                                            _next_block = 301
                                                                                                          else
                                                                                                            if _V.v272 == 14 then
                                                                                                              _next_block = 303
                                                                                                            else
                                                                                                              _next_block = 306
                                                                                                            end
                                                                                                          end
                                                                                                        end
                                                                                                      end
                                                                                                    end
                                                                                                  end
                                                                                                end
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              else
                                                                                if _next_block == 278 then
                                                                                  _V.v273 = _V.v204[4]
                                                                                  _V.v274 = _V.v204[3]
                                                                                  _V.v275 = _V.v204[2]
                                                                                  _V.v276 = _V.v164(_V.v269)
                                                                                  _V.v277 = _V.v166(_V.v276, _V.v275)
                                                                                  _V.v278 = _V.v165(_V.v277)
                                                                                  _V.v279 = _V.v278[5]
                                                                                  _V.v280 = _V.v278[3]
                                                                                  _V.v281 = 0
                                                                                  _V.v282 = _V.v280(_V.v281)
                                                                                  _V.v283 = 0
                                                                                  _V.v284 = _V.v279(_V.v283)
                                                                                  _V.v285 = _V.v166(_V.v268, _V.v273)
                                                                                  _V.v286 = {9, _V.v270, _V.v274, _V.v285}
                                                                                  return _V.v286
                                                                                else
                                                                                  if _next_block == 279 then
                                                                                    _V.v287 = _V.v203[2]
                                                                                    _V.v288 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                    if _V.v288 then
                                                                                      _next_block = 282
                                                                                    else
                                                                                      _next_block = 280
                                                                                    end
                                                                                  else
                                                                                    if _next_block == 280 then
                                                                                      _V.v289 = _V.v204[1] or 0
                                                                                      _V.v290 = 10 == _V.v289
                                                                                      if _V.v290 then
                                                                                        _next_block = 281
                                                                                      else
                                                                                        _next_block = 282
                                                                                      end
                                                                                    else
                                                                                      if _next_block == 281 then
                                                                                        _V.v291 = _V.v204[2]
                                                                                        _V.v292 = _V.v166(_V.v287, _V.v291)
                                                                                        _V.v293 = {10, _V.v292}
                                                                                        return _V.v293
                                                                                      else
                                                                                        if _next_block == 282 then
                                                                                          _V.v294 = {0, _V.Assert_failure, _V.v29}
                                                                                          error(_V.v294)
                                                                                        else
                                                                                          if _next_block == 283 then
                                                                                            _V.v295 = _V.v203[2]
                                                                                            _V.v296 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                            if _V.v296 then
                                                                                              _next_block = 296
                                                                                            else
                                                                                              _next_block = 284
                                                                                            end
                                                                                          else
                                                                                            if _next_block == 284 then
                                                                                              _V.v297 = _V.v204[1] or 0
                                                                                              if _V.v297 == 0 then
                                                                                                _next_block = 296
                                                                                              else
                                                                                                if _V.v297 == 1 then
                                                                                                  _next_block = 296
                                                                                                else
                                                                                                  if _V.v297 == 2 then
                                                                                                    _next_block = 296
                                                                                                  else
                                                                                                    if _V.v297 == 3 then
                                                                                                      _next_block = 296
                                                                                                    else
                                                                                                      if _V.v297 == 4 then
                                                                                                        _next_block = 296
                                                                                                      else
                                                                                                        if _V.v297 == 5 then
                                                                                                          _next_block = 296
                                                                                                        else
                                                                                                          if _V.v297 == 6 then
                                                                                                            _next_block = 296
                                                                                                          else
                                                                                                            if _V.v297 == 7 then
                                                                                                              _next_block = 296
                                                                                                            else
                                                                                                              if _V.v297 == 8 then
                                                                                                                _next_block = 296
                                                                                                              else
                                                                                                                if _V.v297 == 9 then
                                                                                                                  _next_block = 296
                                                                                                                else
                                                                                                                  if _V.v297 == 10 then
                                                                                                                    _next_block = 295
                                                                                                                  else
                                                                                                                    if _V.v297 == 11 then
                                                                                                                      _next_block = 285
                                                                                                                    else
                                                                                                                      if _V.v297 == 12 then
                                                                                                                        _next_block = 296
                                                                                                                      else
                                                                                                                        if _V.v297 == 13 then
                                                                                                                          _next_block = 296
                                                                                                                        else
                                                                                                                          if _V.v297 == 14 then
                                                                                                                            _next_block = 296
                                                                                                                          else
                                                                                                                            _next_block = 296
                                                                                                                          end
                                                                                                                        end
                                                                                                                      end
                                                                                                                    end
                                                                                                                  end
                                                                                                                end
                                                                                                              end
                                                                                                            end
                                                                                                          end
                                                                                                        end
                                                                                                      end
                                                                                                    end
                                                                                                  end
                                                                                                end
                                                                                              end
                                                                                            else
                                                                                              if _next_block == 285 then
                                                                                                _V.v298 = _V.v204[2]
                                                                                                _V.v299 = _V.v166(_V.v295, _V.v298)
                                                                                                _V.v300 = {11, _V.v299}
                                                                                                return _V.v300
                                                                                              else
                                                                                                if _next_block == 286 then
                                                                                                  _V.v301 = _V.v203[2]
                                                                                                  _V.v302 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                  if _V.v302 then
                                                                                                    _next_block = 298
                                                                                                  else
                                                                                                    _next_block = 287
                                                                                                  end
                                                                                                else
                                                                                                  if _next_block == 287 then
                                                                                                    _V.v303 = _V.v204[1] or 0
                                                                                                    if _V.v303 == 0 then
                                                                                                      _next_block = 298
                                                                                                    else
                                                                                                      if _V.v303 == 1 then
                                                                                                        _next_block = 298
                                                                                                      else
                                                                                                        if _V.v303 == 2 then
                                                                                                          _next_block = 298
                                                                                                        else
                                                                                                          if _V.v303 == 3 then
                                                                                                            _next_block = 298
                                                                                                          else
                                                                                                            if _V.v303 == 4 then
                                                                                                              _next_block = 298
                                                                                                            else
                                                                                                              if _V.v303 == 5 then
                                                                                                                _next_block = 298
                                                                                                              else
                                                                                                                if _V.v303 == 6 then
                                                                                                                  _next_block = 298
                                                                                                                else
                                                                                                                  if _V.v303 == 7 then
                                                                                                                    _next_block = 298
                                                                                                                  else
                                                                                                                    if _V.v303 == 8 then
                                                                                                                      _next_block = 298
                                                                                                                    else
                                                                                                                      if _V.v303 == 9 then
                                                                                                                        _next_block = 298
                                                                                                                      else
                                                                                                                        if _V.v303 == 10 then
                                                                                                                          _next_block = 295
                                                                                                                        else
                                                                                                                          if _V.v303 == 11 then
                                                                                                                            _next_block = 297
                                                                                                                          else
                                                                                                                            if _V.v303 == 12 then
                                                                                                                              _next_block = 288
                                                                                                                            else
                                                                                                                              if _V.v303 == 13 then
                                                                                                                                _next_block = 298
                                                                                                                              else
                                                                                                                                if _V.v303 == 14 then
                                                                                                                                  _next_block = 298
                                                                                                                                else
                                                                                                                                  _next_block = 298
                                                                                                                                end
                                                                                                                              end
                                                                                                                            end
                                                                                                                          end
                                                                                                                        end
                                                                                                                      end
                                                                                                                    end
                                                                                                                  end
                                                                                                                end
                                                                                                              end
                                                                                                            end
                                                                                                          end
                                                                                                        end
                                                                                                      end
                                                                                                    end
                                                                                                  else
                                                                                                    if _next_block == 288 then
                                                                                                      _V.v304 = _V.v204[2]
                                                                                                      _V.v305 = _V.v166(_V.v301, _V.v304)
                                                                                                      _V.v306 = {12, _V.v305}
                                                                                                      return _V.v306
                                                                                                    else
                                                                                                      if _next_block == 289 then
                                                                                                        _V.v307 = _V.v203[2]
                                                                                                        _V.v308 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                        if _V.v308 then
                                                                                                          _next_block = 300
                                                                                                        else
                                                                                                          _next_block = 290
                                                                                                        end
                                                                                                      else
                                                                                                        if _next_block == 290 then
                                                                                                          _V.v309 = _V.v204[1] or 0
                                                                                                          if _V.v309 == 0 then
                                                                                                            _next_block = 300
                                                                                                          else
                                                                                                            if _V.v309 == 1 then
                                                                                                              _next_block = 300
                                                                                                            else
                                                                                                              if _V.v309 == 2 then
                                                                                                                _next_block = 300
                                                                                                              else
                                                                                                                if _V.v309 == 3 then
                                                                                                                  _next_block = 300
                                                                                                                else
                                                                                                                  if _V.v309 == 4 then
                                                                                                                    _next_block = 300
                                                                                                                  else
                                                                                                                    if _V.v309 == 5 then
                                                                                                                      _next_block = 300
                                                                                                                    else
                                                                                                                      if _V.v309 == 6 then
                                                                                                                        _next_block = 300
                                                                                                                      else
                                                                                                                        if _V.v309 == 7 then
                                                                                                                          _next_block = 300
                                                                                                                        else
                                                                                                                          if _V.v309 == 8 then
                                                                                                                            _next_block = 300
                                                                                                                          else
                                                                                                                            if _V.v309 == 9 then
                                                                                                                              _next_block = 300
                                                                                                                            else
                                                                                                                              if _V.v309 == 10 then
                                                                                                                                _next_block = 295
                                                                                                                              else
                                                                                                                                if _V.v309 == 11 then
                                                                                                                                  _next_block = 297
                                                                                                                                else
                                                                                                                                  if _V.v309 == 12 then
                                                                                                                                    _next_block = 299
                                                                                                                                  else
                                                                                                                                    if _V.v309 == 13 then
                                                                                                                                      _next_block = 291
                                                                                                                                    else
                                                                                                                                      if _V.v309 == 14 then
                                                                                                                                        _next_block = 300
                                                                                                                                      else
                                                                                                                                        _next_block = 300
                                                                                                                                      end
                                                                                                                                    end
                                                                                                                                  end
                                                                                                                                end
                                                                                                                              end
                                                                                                                            end
                                                                                                                          end
                                                                                                                        end
                                                                                                                      end
                                                                                                                    end
                                                                                                                  end
                                                                                                                end
                                                                                                              end
                                                                                                            end
                                                                                                          end
                                                                                                        else
                                                                                                          if _next_block == 291 then
                                                                                                            _V.v310 = _V.v204[2]
                                                                                                            _V.v311 = _V.v166(_V.v307, _V.v310)
                                                                                                            _V.v312 = {13, _V.v311}
                                                                                                            return _V.v312
                                                                                                          else
                                                                                                            if _next_block == 292 then
                                                                                                              _V.v313 = _V.v203[2]
                                                                                                              _V.v314 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                              if _V.v314 then
                                                                                                                _next_block = 302
                                                                                                              else
                                                                                                                _next_block = 293
                                                                                                              end
                                                                                                            else
                                                                                                              if _next_block == 293 then
                                                                                                                _V.v315 = _V.v204[1] or 0
                                                                                                                if _V.v315 == 0 then
                                                                                                                  _next_block = 302
                                                                                                                else
                                                                                                                  if _V.v315 == 1 then
                                                                                                                    _next_block = 302
                                                                                                                  else
                                                                                                                    if _V.v315 == 2 then
                                                                                                                      _next_block = 302
                                                                                                                    else
                                                                                                                      if _V.v315 == 3 then
                                                                                                                        _next_block = 302
                                                                                                                      else
                                                                                                                        if _V.v315 == 4 then
                                                                                                                          _next_block = 302
                                                                                                                        else
                                                                                                                          if _V.v315 == 5 then
                                                                                                                            _next_block = 302
                                                                                                                          else
                                                                                                                            if _V.v315 == 6 then
                                                                                                                              _next_block = 302
                                                                                                                            else
                                                                                                                              if _V.v315 == 7 then
                                                                                                                                _next_block = 302
                                                                                                                              else
                                                                                                                                if _V.v315 == 8 then
                                                                                                                                  _next_block = 302
                                                                                                                                else
                                                                                                                                  if _V.v315 == 9 then
                                                                                                                                    _next_block = 302
                                                                                                                                  else
                                                                                                                                    if _V.v315 == 10 then
                                                                                                                                      _next_block = 295
                                                                                                                                    else
                                                                                                                                      if _V.v315 == 11 then
                                                                                                                                        _next_block = 297
                                                                                                                                      else
                                                                                                                                        if _V.v315 == 12 then
                                                                                                                                          _next_block = 299
                                                                                                                                        else
                                                                                                                                          if _V.v315 == 13 then
                                                                                                                                            _next_block = 301
                                                                                                                                          else
                                                                                                                                            if _V.v315 == 14 then
                                                                                                                                              _next_block = 294
                                                                                                                                            else
                                                                                                                                              _next_block = 302
                                                                                                                                            end
                                                                                                                                          end
                                                                                                                                        end
                                                                                                                                      end
                                                                                                                                    end
                                                                                                                                  end
                                                                                                                                end
                                                                                                                              end
                                                                                                                            end
                                                                                                                          end
                                                                                                                        end
                                                                                                                      end
                                                                                                                    end
                                                                                                                  end
                                                                                                                end
                                                                                                              else
                                                                                                                if _next_block == 294 then
                                                                                                                  _V.v316 = _V.v204[2]
                                                                                                                  _V.v317 = _V.v166(_V.v313, _V.v316)
                                                                                                                  _V.v318 = {14, _V.v317}
                                                                                                                  return _V.v318
                                                                                                                else
                                                                                                                  if _next_block == 295 then
                                                                                                                    _V.v319 = {0, _V.Assert_failure, _V.v30}
                                                                                                                    error(_V.v319)
                                                                                                                  else
                                                                                                                    if _next_block == 296 then
                                                                                                                      _V.v320 = {0, _V.Assert_failure, _V.v31}
                                                                                                                      error(_V.v320)
                                                                                                                    else
                                                                                                                      if _next_block == 297 then
                                                                                                                        _V.v321 = {0, _V.Assert_failure, _V.v32}
                                                                                                                        error(_V.v321)
                                                                                                                      else
                                                                                                                        if _next_block == 298 then
                                                                                                                          _V.v322 = {0, _V.Assert_failure, _V.v33}
                                                                                                                          error(_V.v322)
                                                                                                                        else
                                                                                                                          if _next_block == 299 then
                                                                                                                            _V.v323 = {0, _V.Assert_failure, _V.v34}
                                                                                                                            error(_V.v323)
                                                                                                                          else
                                                                                                                            if _next_block == 300 then
                                                                                                                              _V.v324 = {0, _V.Assert_failure, _V.v35}
                                                                                                                              error(_V.v324)
                                                                                                                            else
                                                                                                                              if _next_block == 301 then
                                                                                                                                _V.v325 = {0, _V.Assert_failure, _V.v36}
                                                                                                                                error(_V.v325)
                                                                                                                              else
                                                                                                                                if _next_block == 302 then
                                                                                                                                  _V.v326 = {0, _V.Assert_failure, _V.v37}
                                                                                                                                  error(_V.v326)
                                                                                                                                else
                                                                                                                                  if _next_block == 303 then
                                                                                                                                    _V.v327 = {0, _V.Assert_failure, _V.v38}
                                                                                                                                    error(_V.v327)
                                                                                                                                  else
                                                                                                                                    if _next_block == 304 then
                                                                                                                                      _V.v328 = {0, _V.Assert_failure, _V.v39}
                                                                                                                                      error(_V.v328)
                                                                                                                                    else
                                                                                                                                      if _next_block == 305 then
                                                                                                                                        _V.v329 = {0, _V.Assert_failure, _V.v40}
                                                                                                                                        error(_V.v329)
                                                                                                                                      else
                                                                                                                                        if _next_block == 306 then
                                                                                                                                          _V.v330 = {0, _V.Assert_failure, _V.v41}
                                                                                                                                          error(_V.v330)
                                                                                                                                        else
                                                                                                                                          if _next_block == 307 then
                                                                                                                                            _V.v331 = {0, _V.Assert_failure, _V.v42}
                                                                                                                                            error(_V.v331)
                                                                                                                                          else
                                                                                                                                            if _next_block == 308 then
                                                                                                                                              _V.v332 = {0, _V.Assert_failure, _V.v43}
                                                                                                                                              error(_V.v332)
                                                                                                                                            else
                                                                                                                                              break
                                                                                                                                            end
                                                                                                                                          end
                                                                                                                                        end
                                                                                                                                      end
                                                                                                                                    end
                                                                                                                                  end
                                                                                                                                end
                                                                                                                              end
                                                                                                                            end
                                                                                                                          end
                                                                                                                        end
                                                                                                                      end
                                                                                                                    end
                                                                                                                  end
                                                                                                                end
                                                                                                              end
                                                                                                            end
                                                                                                          end
                                                                                                        end
                                                                                                      end
                                                                                                    end
                                                                                                  end
                                                                                                end
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v167 = caml_fresh_oo_id(0)
      _V.v168 = {248, _V.v117, _V.v167}
      _V.v169 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (16 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 749
        while true do
          if _next_block == 749 then
            _V.v205 = type(_V.v203) == "number" and _V.v203 % 1 == 0
            if _V.v205 then
              _next_block = 751
            else
              _next_block = 750
            end
          else
            if _next_block == 750 then
              _V.v206 = _V.v203[1] or 0
              _V.v207 = 0 == _V.v206
              if _V.v207 then
                _next_block = 752
              else
                _next_block = 753
              end
            else
              if _next_block == 751 then
                _V.v208 = 0
                _V.v209 = {0, _V.v208, _V.v204}
                return _V.v209
              else
                if _next_block == 752 then
                  _V.v210 = _V.v203[3]
                  _V.v211 = _V.v203[2]
                  _V.v212 = {0, _V.v211, _V.v210}
                  _V.v213 = {0, _V.v212, _V.v204}
                  return _V.v213
                else
                  if _next_block == 753 then
                    _V.v214 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                    if _V.v214 then
                      _next_block = 756
                    else
                      _next_block = 754
                    end
                  else
                    if _next_block == 754 then
                      _V.v215 = _V.v204[1] or 0
                      _V.v216 = 2 == _V.v215
                      if _V.v216 then
                        _next_block = 755
                      else
                        _next_block = 756
                      end
                    else
                      if _next_block == 755 then
                        _V.v217 = _V.v204[2]
                        _V.v218 = _V.v203[2]
                        _V.v219 = {1, _V.v218}
                        _V.v220 = {0, _V.v219, _V.v217}
                        return _V.v220
                      else
                        if _next_block == 756 then
                          error(_V.v168)
                        else
                          break
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v170 = caml_make_closure(3, function(v203, v204, v205)
        -- Hoisted variables (19 total, using inherited _V table)
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        local _next_block = 741
        while true do
          if _next_block == 741 then
            _V.v206 = _V.v169(_V.v203, _V.v205)
            _V.v207 = type(_V.v204) == "number" and _V.v204 % 1 == 0
            if _V.v207 then
              _next_block = 742
            else
              _next_block = 747
            end
          else
            if _next_block == 742 then
              if _V.v204 then
                _next_block = 743
              else
                _next_block = 746
              end
            else
              if _next_block == 743 then
                _V.v208 = _V.v206[3]
                _V.v209 = type(_V.v208) == "number" and _V.v208 % 1 == 0
                if _V.v209 then
                  _next_block = 748
                else
                  _next_block = 744
                end
              else
                if _next_block == 744 then
                  _V.v210 = _V.v208[1] or 0
                  _V.v211 = 2 == _V.v210
                  if _V.v211 then
                    _next_block = 745
                  else
                    _next_block = 748
                  end
                else
                  if _next_block == 745 then
                    _V.v212 = _V.v208[2]
                    _V.v213 = _V.v206[2]
                    _V.v214 = 1
                    _V.v215 = {0, _V.v213, _V.v214, _V.v212}
                    return _V.v215
                  else
                    if _next_block == 746 then
                      _V.v216 = _V.v206[3]
                      _V.v217 = _V.v206[2]
                      _V.v218 = 0
                      _V.v219 = {0, _V.v217, _V.v218, _V.v216}
                      return _V.v219
                    else
                      if _next_block == 747 then
                        _V.v220 = _V.v206[3]
                        _V.v221 = _V.v206[2]
                        _V.v222 = _V.v204[2]
                        _V.v223 = {0, _V.v222}
                        _V.v224 = {0, _V.v221, _V.v223, _V.v220}
                        return _V.v224
                      else
                        if _next_block == 748 then
                          error(_V.v168)
                        else
                          break
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v171 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (327 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v254 = nil
        _V.v255 = nil
        _V.v256 = nil
        _V.v257 = nil
        _V.v258 = nil
        _V.v259 = nil
        _V.v260 = nil
        _V.v261 = nil
        _V.v262 = nil
        _V.v263 = nil
        _V.v264 = nil
        _V.v265 = nil
        _V.v266 = nil
        _V.v267 = nil
        _V.v268 = nil
        _V.v269 = nil
        _V.v270 = nil
        _V.v271 = nil
        _V.v272 = nil
        _V.v273 = nil
        _V.v274 = nil
        _V.v275 = nil
        _V.v276 = nil
        _V.v277 = nil
        _V.v278 = nil
        _V.v279 = nil
        _V.v280 = nil
        _V.v281 = nil
        _V.v282 = nil
        _V.v283 = nil
        _V.v284 = nil
        _V.v285 = nil
        _V.v286 = nil
        _V.v287 = nil
        _V.v288 = nil
        _V.v289 = nil
        _V.v290 = nil
        _V.v291 = nil
        _V.v292 = nil
        _V.v293 = nil
        _V.v294 = nil
        _V.v295 = nil
        _V.v296 = nil
        _V.v297 = nil
        _V.v298 = nil
        _V.v299 = nil
        _V.v300 = nil
        _V.v301 = nil
        _V.v302 = nil
        _V.v303 = nil
        _V.v304 = nil
        _V.v305 = nil
        _V.v306 = nil
        _V.v307 = nil
        _V.v308 = nil
        _V.v309 = nil
        _V.v310 = nil
        _V.v311 = nil
        _V.v312 = nil
        _V.v313 = nil
        _V.v314 = nil
        _V.v315 = nil
        _V.v316 = nil
        _V.v317 = nil
        _V.v318 = nil
        _V.v319 = nil
        _V.v320 = nil
        _V.v321 = nil
        _V.v322 = nil
        _V.v323 = nil
        _V.v324 = nil
        _V.v325 = nil
        _V.v326 = nil
        _V.v327 = nil
        _V.v328 = nil
        _V.v329 = nil
        _V.v330 = nil
        _V.v331 = nil
        _V.v332 = nil
        _V.v333 = nil
        _V.v334 = nil
        _V.v335 = nil
        _V.v336 = nil
        _V.v337 = nil
        _V.v338 = nil
        _V.v339 = nil
        _V.v340 = nil
        _V.v341 = nil
        _V.v342 = nil
        _V.v343 = nil
        _V.v344 = nil
        _V.v345 = nil
        _V.v346 = nil
        _V.v347 = nil
        _V.v348 = nil
        _V.v349 = nil
        _V.v350 = nil
        _V.v351 = nil
        _V.v352 = nil
        _V.v353 = nil
        _V.v354 = nil
        _V.v355 = nil
        _V.v356 = nil
        _V.v357 = nil
        _V.v358 = nil
        _V.v359 = nil
        _V.v360 = nil
        _V.v361 = nil
        _V.v362 = nil
        _V.v363 = nil
        _V.v364 = nil
        _V.v365 = nil
        _V.v366 = nil
        _V.v367 = nil
        _V.v368 = nil
        _V.v369 = nil
        _V.v370 = nil
        _V.v371 = nil
        _V.v372 = nil
        _V.v373 = nil
        _V.v374 = nil
        _V.v375 = nil
        _V.v376 = nil
        _V.v377 = nil
        _V.v378 = nil
        _V.v379 = nil
        _V.v380 = nil
        _V.v381 = nil
        _V.v382 = nil
        _V.v383 = nil
        _V.v384 = nil
        _V.v385 = nil
        _V.v386 = nil
        _V.v387 = nil
        _V.v388 = nil
        _V.v389 = nil
        _V.v390 = nil
        _V.v391 = nil
        _V.v392 = nil
        _V.v393 = nil
        _V.v394 = nil
        _V.v395 = nil
        _V.v396 = nil
        _V.v397 = nil
        _V.v398 = nil
        _V.v399 = nil
        _V.v400 = nil
        _V.v401 = nil
        _V.v402 = nil
        _V.v403 = nil
        _V.v404 = nil
        _V.v405 = nil
        _V.v406 = nil
        _V.v407 = nil
        _V.v408 = nil
        _V.v409 = nil
        _V.v410 = nil
        _V.v411 = nil
        _V.v412 = nil
        _V.v413 = nil
        _V.v414 = nil
        _V.v415 = nil
        _V.v416 = nil
        _V.v417 = nil
        _V.v418 = nil
        _V.v419 = nil
        _V.v420 = nil
        _V.v421 = nil
        _V.v422 = nil
        _V.v423 = nil
        _V.v424 = nil
        _V.v425 = nil
        _V.v426 = nil
        _V.v427 = nil
        _V.v428 = nil
        _V.v429 = nil
        _V.v430 = nil
        _V.v431 = nil
        _V.v432 = nil
        _V.v433 = nil
        _V.v434 = nil
        _V.v435 = nil
        _V.v436 = nil
        _V.v437 = nil
        _V.v438 = nil
        _V.v439 = nil
        _V.v440 = nil
        _V.v441 = nil
        _V.v442 = nil
        _V.v443 = nil
        _V.v444 = nil
        _V.v445 = nil
        _V.v446 = nil
        _V.v447 = nil
        _V.v448 = nil
        _V.v449 = nil
        _V.v450 = nil
        _V.v451 = nil
        _V.v452 = nil
        _V.v453 = nil
        _V.v454 = nil
        _V.v455 = nil
        _V.v456 = nil
        _V.v457 = nil
        _V.v458 = nil
        _V.v459 = nil
        _V.v460 = nil
        _V.v461 = nil
        _V.v462 = nil
        _V.v463 = nil
        _V.v464 = nil
        _V.v465 = nil
        _V.v466 = nil
        _V.v467 = nil
        _V.v468 = nil
        _V.v469 = nil
        _V.v470 = nil
        _V.v471 = nil
        _V.v472 = nil
        _V.v473 = nil
        _V.v474 = nil
        _V.v475 = nil
        _V.v476 = nil
        _V.v477 = nil
        _V.v478 = nil
        _V.v479 = nil
        _V.v480 = nil
        _V.v481 = nil
        _V.v482 = nil
        _V.v483 = nil
        _V.v484 = nil
        _V.v485 = nil
        _V.v486 = nil
        _V.v487 = nil
        _V.v488 = nil
        _V.v489 = nil
        _V.v490 = nil
        _V.v491 = nil
        _V.v492 = nil
        _V.v493 = nil
        _V.v494 = nil
        _V.v495 = nil
        _V.v496 = nil
        _V.v497 = nil
        _V.v498 = nil
        _V.v499 = nil
        _V.v500 = nil
        _V.v501 = nil
        _V.v502 = nil
        _V.v503 = nil
        _V.v504 = nil
        _V.v505 = nil
        _V.v506 = nil
        _V.v507 = nil
        _V.v508 = nil
        _V.v509 = nil
        _V.v510 = nil
        _V.v511 = nil
        _V.v512 = nil
        _V.v513 = nil
        _V.v514 = nil
        _V.v515 = nil
        _V.v516 = nil
        _V.v517 = nil
        _V.v518 = nil
        _V.v519 = nil
        _V.v520 = nil
        _V.v521 = nil
        _V.v522 = nil
        _V.v523 = nil
        _V.v524 = nil
        _V.v525 = nil
        _V.v526 = nil
        _V.v527 = nil
        _V.v528 = nil
        _V.v529 = nil
        _V.v530 = nil
        _V.v531 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 311
        while true do
          if _next_block == 311 then
            _V.v205 = type(_V.v203) == "number" and _V.v203 % 1 == 0
            if _V.v205 then
              _next_block = 313
            else
              _next_block = 312
            end
          else
            if _next_block == 312 then
              _V.v206 = _V.v203[1] or 0
              if _V.v206 == 0 then
                _next_block = 314
              else
                if _V.v206 == 1 then
                  _next_block = 317
                else
                  if _V.v206 == 2 then
                    _next_block = 320
                  else
                    if _V.v206 == 3 then
                      _next_block = 324
                    else
                      if _V.v206 == 4 then
                        _next_block = 328
                      else
                        if _V.v206 == 5 then
                          _next_block = 332
                        else
                          if _V.v206 == 6 then
                            _next_block = 336
                          else
                            if _V.v206 == 7 then
                              _next_block = 340
                            else
                              if _V.v206 == 8 then
                                _next_block = 344
                              else
                                if _V.v206 == 9 then
                                  _next_block = 348
                                else
                                  if _V.v206 == 10 then
                                    _next_block = 352
                                  else
                                    if _V.v206 == 11 then
                                      _next_block = 353
                                    else
                                      if _V.v206 == 12 then
                                        _next_block = 354
                                      else
                                        if _V.v206 == 13 then
                                          _next_block = 355
                                        else
                                          if _V.v206 == 14 then
                                            _next_block = 360
                                          else
                                            if _V.v206 == 15 then
                                              _next_block = 365
                                            else
                                              if _V.v206 == 16 then
                                                _next_block = 368
                                              else
                                                if _V.v206 == 17 then
                                                  _next_block = 371
                                                else
                                                  if _V.v206 == 18 then
                                                    _next_block = 372
                                                  else
                                                    if _V.v206 == 19 then
                                                      _next_block = 373
                                                    else
                                                      if _V.v206 == 20 then
                                                        _next_block = 376
                                                      else
                                                        if _V.v206 == 21 then
                                                          _next_block = 379
                                                        else
                                                          if _V.v206 == 22 then
                                                            _next_block = 383
                                                          else
                                                            if _V.v206 == 23 then
                                                              _next_block = 382
                                                            else
                                                              if _V.v206 == 24 then
                                                                _next_block = 383
                                                              else
                                                                _next_block = 314
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            else
              if _next_block == 313 then
                _V.v207 = 0
                _V.v208 = {0, _V.v207, _V.v204}
                return _V.v208
              else
                if _next_block == 314 then
                  _V.v209 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                  if _V.v209 then
                    _next_block = 383
                  else
                    _next_block = 315
                  end
                else
                  if _next_block == 315 then
                    _V.v210 = _V.v204[1] or 0
                    _V.v211 = 0 == _V.v210
                    if _V.v211 then
                      _next_block = 316
                    else
                      _next_block = 383
                    end
                  else
                    if _next_block == 316 then
                      _V.v212 = _V.v204[2]
                      _V.v213 = _V.v203[2]
                      _V.v214 = _V.v171(_V.v213, _V.v212)
                      _V.v215 = _V.v214[3]
                      _V.v216 = _V.v214[2]
                      _V.v217 = {0, _V.v216}
                      _V.v218 = {0, _V.v217, _V.v215}
                      return _V.v218
                    else
                      if _next_block == 317 then
                        _V.v219 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                        if _V.v219 then
                          _next_block = 383
                        else
                          _next_block = 318
                        end
                      else
                        if _next_block == 318 then
                          _V.v220 = _V.v204[1] or 0
                          _V.v221 = 0 == _V.v220
                          if _V.v221 then
                            _next_block = 319
                          else
                            _next_block = 383
                          end
                        else
                          if _next_block == 319 then
                            _V.v222 = _V.v204[2]
                            _V.v223 = _V.v203[2]
                            _V.v224 = _V.v171(_V.v223, _V.v222)
                            _V.v225 = _V.v224[3]
                            _V.v226 = _V.v224[2]
                            _V.v227 = {1, _V.v226}
                            _V.v228 = {0, _V.v227, _V.v225}
                            return _V.v228
                          else
                            if _next_block == 320 then
                              _V.v229 = _V.v203[3]
                              _V.v230 = _V.v203[2]
                              _V.v231 = _V.v169(_V.v230, _V.v204)
                              _V.v232 = _V.v231[2]
                              _V.v233 = _V.v231[3]
                              _V.v234 = type(_V.v233) == "number" and _V.v233 % 1 == 0
                              if _V.v234 then
                                _next_block = 323
                              else
                                _next_block = 321
                              end
                            else
                              if _next_block == 321 then
                                _V.v235 = _V.v233[1] or 0
                                _V.v236 = 1 == _V.v235
                                if _V.v236 then
                                  _next_block = 322
                                else
                                  _next_block = 323
                                end
                              else
                                if _next_block == 322 then
                                  _V.v237 = _V.v233[2]
                                  _V.v238 = _V.v171(_V.v229, _V.v237)
                                  _V.v239 = _V.v238[3]
                                  _V.v240 = _V.v238[2]
                                  _V.v241 = {2, _V.v232, _V.v240}
                                  _V.v242 = {0, _V.v241, _V.v239}
                                  return _V.v242
                                else
                                  if _next_block == 323 then
                                    error(_V.v168)
                                  else
                                    if _next_block == 324 then
                                      _V.v243 = _V.v203[3]
                                      _V.v244 = _V.v203[2]
                                      _V.v245 = _V.v169(_V.v244, _V.v204)
                                      _V.v246 = _V.v245[2]
                                      _V.v247 = _V.v245[3]
                                      _V.v248 = type(_V.v247) == "number" and _V.v247 % 1 == 0
                                      if _V.v248 then
                                        _next_block = 327
                                      else
                                        _next_block = 325
                                      end
                                    else
                                      if _next_block == 325 then
                                        _V.v249 = _V.v247[1] or 0
                                        _V.v250 = 1 == _V.v249
                                        if _V.v250 then
                                          _next_block = 326
                                        else
                                          _next_block = 327
                                        end
                                      else
                                        if _next_block == 326 then
                                          _V.v251 = _V.v247[2]
                                          _V.v252 = _V.v171(_V.v243, _V.v251)
                                          _V.v253 = _V.v252[3]
                                          _V.v254 = _V.v252[2]
                                          _V.v255 = {3, _V.v246, _V.v254}
                                          _V.v256 = {0, _V.v255, _V.v253}
                                          return _V.v256
                                        else
                                          if _next_block == 327 then
                                            error(_V.v168)
                                          else
                                            if _next_block == 328 then
                                              _V.v257 = _V.v203[5]
                                              _V.v258 = _V.v203[4]
                                              _V.v259 = _V.v203[3]
                                              _V.v260 = _V.v203[2]
                                              _V.v261 = _V.v170(_V.v259, _V.v258, _V.v204)
                                              _V.v262 = _V.v261[2]
                                              _V.v263 = _V.v261[4]
                                              _V.v264 = type(_V.v263) == "number" and _V.v263 % 1 == 0
                                              if _V.v264 then
                                                _next_block = 331
                                              else
                                                _next_block = 329
                                              end
                                            else
                                              if _next_block == 329 then
                                                _V.v265 = _V.v263[1] or 0
                                                _V.v266 = 2 == _V.v265
                                                if _V.v266 then
                                                  _next_block = 330
                                                else
                                                  _next_block = 331
                                                end
                                              else
                                                if _next_block == 330 then
                                                  _V.v267 = _V.v263[2]
                                                  _V.v268 = _V.v261[3]
                                                  _V.v269 = _V.v171(_V.v257, _V.v267)
                                                  _V.v270 = _V.v269[3]
                                                  _V.v271 = _V.v269[2]
                                                  _V.v272 = {4, _V.v260, _V.v262, _V.v268, _V.v271}
                                                  _V.v273 = {0, _V.v272, _V.v270}
                                                  return _V.v273
                                                else
                                                  if _next_block == 331 then
                                                    error(_V.v168)
                                                  else
                                                    if _next_block == 332 then
                                                      _V.v274 = _V.v203[5]
                                                      _V.v275 = _V.v203[4]
                                                      _V.v276 = _V.v203[3]
                                                      _V.v277 = _V.v203[2]
                                                      _V.v278 = _V.v170(_V.v276, _V.v275, _V.v204)
                                                      _V.v279 = _V.v278[2]
                                                      _V.v280 = _V.v278[4]
                                                      _V.v281 = type(_V.v280) == "number" and _V.v280 % 1 == 0
                                                      if _V.v281 then
                                                        _next_block = 335
                                                      else
                                                        _next_block = 333
                                                      end
                                                    else
                                                      if _next_block == 333 then
                                                        _V.v282 = _V.v280[1] or 0
                                                        _V.v283 = 3 == _V.v282
                                                        if _V.v283 then
                                                          _next_block = 334
                                                        else
                                                          _next_block = 335
                                                        end
                                                      else
                                                        if _next_block == 334 then
                                                          _V.v284 = _V.v280[2]
                                                          _V.v285 = _V.v278[3]
                                                          _V.v286 = _V.v171(_V.v274, _V.v284)
                                                          _V.v287 = _V.v286[3]
                                                          _V.v288 = _V.v286[2]
                                                          _V.v289 = {5, _V.v277, _V.v279, _V.v285, _V.v288}
                                                          _V.v290 = {0, _V.v289, _V.v287}
                                                          return _V.v290
                                                        else
                                                          if _next_block == 335 then
                                                            error(_V.v168)
                                                          else
                                                            if _next_block == 336 then
                                                              _V.v291 = _V.v203[5]
                                                              _V.v292 = _V.v203[4]
                                                              _V.v293 = _V.v203[3]
                                                              _V.v294 = _V.v203[2]
                                                              _V.v295 = _V.v170(_V.v293, _V.v292, _V.v204)
                                                              _V.v296 = _V.v295[2]
                                                              _V.v297 = _V.v295[4]
                                                              _V.v298 = type(_V.v297) == "number" and _V.v297 % 1 == 0
                                                              if _V.v298 then
                                                                _next_block = 339
                                                              else
                                                                _next_block = 337
                                                              end
                                                            else
                                                              if _next_block == 337 then
                                                                _V.v299 = _V.v297[1] or 0
                                                                _V.v300 = 4 == _V.v299
                                                                if _V.v300 then
                                                                  _next_block = 338
                                                                else
                                                                  _next_block = 339
                                                                end
                                                              else
                                                                if _next_block == 338 then
                                                                  _V.v301 = _V.v297[2]
                                                                  _V.v302 = _V.v295[3]
                                                                  _V.v303 = _V.v171(_V.v291, _V.v301)
                                                                  _V.v304 = _V.v303[3]
                                                                  _V.v305 = _V.v303[2]
                                                                  _V.v306 = {6, _V.v294, _V.v296, _V.v302, _V.v305}
                                                                  _V.v307 = {0, _V.v306, _V.v304}
                                                                  return _V.v307
                                                                else
                                                                  if _next_block == 339 then
                                                                    error(_V.v168)
                                                                  else
                                                                    if _next_block == 340 then
                                                                      _V.v308 = _V.v203[5]
                                                                      _V.v309 = _V.v203[4]
                                                                      _V.v310 = _V.v203[3]
                                                                      _V.v311 = _V.v203[2]
                                                                      _V.v312 = _V.v170(_V.v310, _V.v309, _V.v204)
                                                                      _V.v313 = _V.v312[2]
                                                                      _V.v314 = _V.v312[4]
                                                                      _V.v315 = type(_V.v314) == "number" and _V.v314 % 1 == 0
                                                                      if _V.v315 then
                                                                        _next_block = 343
                                                                      else
                                                                        _next_block = 341
                                                                      end
                                                                    else
                                                                      if _next_block == 341 then
                                                                        _V.v316 = _V.v314[1] or 0
                                                                        _V.v317 = 5 == _V.v316
                                                                        if _V.v317 then
                                                                          _next_block = 342
                                                                        else
                                                                          _next_block = 343
                                                                        end
                                                                      else
                                                                        if _next_block == 342 then
                                                                          _V.v318 = _V.v314[2]
                                                                          _V.v319 = _V.v312[3]
                                                                          _V.v320 = _V.v171(_V.v308, _V.v318)
                                                                          _V.v321 = _V.v320[3]
                                                                          _V.v322 = _V.v320[2]
                                                                          _V.v323 = {7, _V.v311, _V.v313, _V.v319, _V.v322}
                                                                          _V.v324 = {0, _V.v323, _V.v321}
                                                                          return _V.v324
                                                                        else
                                                                          if _next_block == 343 then
                                                                            error(_V.v168)
                                                                          else
                                                                            if _next_block == 344 then
                                                                              _V.v325 = _V.v203[5]
                                                                              _V.v326 = _V.v203[4]
                                                                              _V.v327 = _V.v203[3]
                                                                              _V.v328 = _V.v203[2]
                                                                              _V.v329 = _V.v170(_V.v327, _V.v326, _V.v204)
                                                                              _V.v330 = _V.v329[2]
                                                                              _V.v331 = _V.v329[4]
                                                                              _V.v332 = type(_V.v331) == "number" and _V.v331 % 1 == 0
                                                                              if _V.v332 then
                                                                                _next_block = 347
                                                                              else
                                                                                _next_block = 345
                                                                              end
                                                                            else
                                                                              if _next_block == 345 then
                                                                                _V.v333 = _V.v331[1] or 0
                                                                                _V.v334 = 6 == _V.v333
                                                                                if _V.v334 then
                                                                                  _next_block = 346
                                                                                else
                                                                                  _next_block = 347
                                                                                end
                                                                              else
                                                                                if _next_block == 346 then
                                                                                  _V.v335 = _V.v331[2]
                                                                                  _V.v336 = _V.v329[3]
                                                                                  _V.v337 = _V.v171(_V.v325, _V.v335)
                                                                                  _V.v338 = _V.v337[3]
                                                                                  _V.v339 = _V.v337[2]
                                                                                  _V.v340 = {8, _V.v328, _V.v330, _V.v336, _V.v339}
                                                                                  _V.v341 = {0, _V.v340, _V.v338}
                                                                                  return _V.v341
                                                                                else
                                                                                  if _next_block == 347 then
                                                                                    error(_V.v168)
                                                                                  else
                                                                                    if _next_block == 348 then
                                                                                      _V.v342 = _V.v203[3]
                                                                                      _V.v343 = _V.v203[2]
                                                                                      _V.v344 = _V.v169(_V.v343, _V.v204)
                                                                                      _V.v345 = _V.v344[2]
                                                                                      _V.v346 = _V.v344[3]
                                                                                      _V.v347 = type(_V.v346) == "number" and _V.v346 % 1 == 0
                                                                                      if _V.v347 then
                                                                                        _next_block = 351
                                                                                      else
                                                                                        _next_block = 349
                                                                                      end
                                                                                    else
                                                                                      if _next_block == 349 then
                                                                                        _V.v348 = _V.v346[1] or 0
                                                                                        _V.v349 = 7 == _V.v348
                                                                                        if _V.v349 then
                                                                                          _next_block = 350
                                                                                        else
                                                                                          _next_block = 351
                                                                                        end
                                                                                      else
                                                                                        if _next_block == 350 then
                                                                                          _V.v350 = _V.v346[2]
                                                                                          _V.v351 = _V.v171(_V.v342, _V.v350)
                                                                                          _V.v352 = _V.v351[3]
                                                                                          _V.v353 = _V.v351[2]
                                                                                          _V.v354 = {9, _V.v345, _V.v353}
                                                                                          _V.v355 = {0, _V.v354, _V.v352}
                                                                                          return _V.v355
                                                                                        else
                                                                                          if _next_block == 351 then
                                                                                            error(_V.v168)
                                                                                          else
                                                                                            if _next_block == 352 then
                                                                                              _V.v356 = _V.v203[2]
                                                                                              _V.v357 = _V.v171(_V.v356, _V.v204)
                                                                                              _V.v358 = _V.v357[3]
                                                                                              _V.v359 = _V.v357[2]
                                                                                              _V.v360 = {10, _V.v359}
                                                                                              _V.v361 = {0, _V.v360, _V.v358}
                                                                                              return _V.v361
                                                                                            else
                                                                                              if _next_block == 353 then
                                                                                                _V.v362 = _V.v203[3]
                                                                                                _V.v363 = _V.v203[2]
                                                                                                _V.v364 = _V.v171(_V.v362, _V.v204)
                                                                                                _V.v365 = _V.v364[3]
                                                                                                _V.v366 = _V.v364[2]
                                                                                                _V.v367 = {11, _V.v363, _V.v366}
                                                                                                _V.v368 = {0, _V.v367, _V.v365}
                                                                                                return _V.v368
                                                                                              else
                                                                                                if _next_block == 354 then
                                                                                                  _V.v369 = _V.v203[3]
                                                                                                  _V.v370 = _V.v203[2]
                                                                                                  _V.v371 = _V.v171(_V.v369, _V.v204)
                                                                                                  _V.v372 = _V.v371[3]
                                                                                                  _V.v373 = _V.v371[2]
                                                                                                  _V.v374 = {12, _V.v370, _V.v373}
                                                                                                  _V.v375 = {0, _V.v374, _V.v372}
                                                                                                  return _V.v375
                                                                                                else
                                                                                                  if _next_block == 355 then
                                                                                                    _V.v376 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                    if _V.v376 then
                                                                                                      _next_block = 383
                                                                                                    else
                                                                                                      _next_block = 356
                                                                                                    end
                                                                                                  else
                                                                                                    if _next_block == 356 then
                                                                                                      _V.v377 = _V.v204[1] or 0
                                                                                                      _V.v378 = 8 == _V.v377
                                                                                                      if _V.v378 then
                                                                                                        _next_block = 357
                                                                                                      else
                                                                                                        _next_block = 383
                                                                                                      end
                                                                                                    else
                                                                                                      if _next_block == 357 then
                                                                                                        _V.v379 = _V.v204[3]
                                                                                                        _V.v380 = _V.v204[2]
                                                                                                        _V.v381 = _V.v203[4]
                                                                                                        _V.v382 = _V.v203[3]
                                                                                                        _V.v383 = _V.v203[2]
                                                                                                        _V.v384 = {0, _V.v380}
                                                                                                        _V.v385 = {0, _V.v382}
                                                                                                        _V.v386 = caml_notequal(_V.v385, _V.v384)
                                                                                                        if _V.v386 then
                                                                                                          _next_block = 358
                                                                                                        else
                                                                                                          _next_block = 359
                                                                                                        end
                                                                                                      else
                                                                                                        if _next_block == 358 then
                                                                                                          error(_V.v168)
                                                                                                        else
                                                                                                          if _next_block == 359 then
                                                                                                            _V.v387 = _V.v171(_V.v381, _V.v379)
                                                                                                            _V.v388 = _V.v387[3]
                                                                                                            _V.v389 = _V.v387[2]
                                                                                                            _V.v390 = {13, _V.v383, _V.v380, _V.v389}
                                                                                                            _V.v391 = {0, _V.v390, _V.v388}
                                                                                                            return _V.v391
                                                                                                          else
                                                                                                            if _next_block == 360 then
                                                                                                              _V.v392 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                              if _V.v392 then
                                                                                                                _next_block = 383
                                                                                                              else
                                                                                                                _next_block = 361
                                                                                                              end
                                                                                                            else
                                                                                                              if _next_block == 361 then
                                                                                                                _V.v393 = _V.v204[1] or 0
                                                                                                                _V.v394 = 9 == _V.v393
                                                                                                                if _V.v394 then
                                                                                                                  _next_block = 362
                                                                                                                else
                                                                                                                  _next_block = 383
                                                                                                                end
                                                                                                              else
                                                                                                                if _next_block == 362 then
                                                                                                                  _V.v395 = _V.v204[4]
                                                                                                                  _V.v396 = _V.v204[2]
                                                                                                                  _V.v397 = _V.v203[4]
                                                                                                                  _V.v398 = _V.v203[3]
                                                                                                                  _V.v399 = _V.v203[2]
                                                                                                                  _V.v400 = _V.v131(_V.v396)
                                                                                                                  _V.v401 = {0, _V.v400}
                                                                                                                  _V.v402 = _V.v131(_V.v398)
                                                                                                                  _V.v403 = {0, _V.v402}
                                                                                                                  _V.v404 = caml_notequal(_V.v403, _V.v401)
                                                                                                                  if _V.v404 then
                                                                                                                    _next_block = 363
                                                                                                                  else
                                                                                                                    _next_block = 364
                                                                                                                  end
                                                                                                                else
                                                                                                                  if _next_block == 363 then
                                                                                                                    error(_V.v168)
                                                                                                                  else
                                                                                                                    if _next_block == 364 then
                                                                                                                      _V.v405 = _V.v131(_V.v395)
                                                                                                                      _V.v406 = _V.v171(_V.v397, _V.v405)
                                                                                                                      _V.v407 = _V.v406[3]
                                                                                                                      _V.v408 = _V.v406[2]
                                                                                                                      _V.v409 = {14, _V.v399, _V.v396, _V.v408}
                                                                                                                      _V.v410 = {0, _V.v409, _V.v407}
                                                                                                                      return _V.v410
                                                                                                                    else
                                                                                                                      if _next_block == 365 then
                                                                                                                        _V.v411 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                                        if _V.v411 then
                                                                                                                          _next_block = 383
                                                                                                                        else
                                                                                                                          _next_block = 366
                                                                                                                        end
                                                                                                                      else
                                                                                                                        if _next_block == 366 then
                                                                                                                          _V.v412 = _V.v204[1] or 0
                                                                                                                          _V.v413 = 10 == _V.v412
                                                                                                                          if _V.v413 then
                                                                                                                            _next_block = 367
                                                                                                                          else
                                                                                                                            _next_block = 383
                                                                                                                          end
                                                                                                                        else
                                                                                                                          if _next_block == 367 then
                                                                                                                            _V.v414 = _V.v204[2]
                                                                                                                            _V.v415 = _V.v203[2]
                                                                                                                            _V.v416 = _V.v171(_V.v415, _V.v414)
                                                                                                                            _V.v417 = _V.v416[3]
                                                                                                                            _V.v418 = _V.v416[2]
                                                                                                                            _V.v419 = {15, _V.v418}
                                                                                                                            _V.v420 = {0, _V.v419, _V.v417}
                                                                                                                            return _V.v420
                                                                                                                          else
                                                                                                                            if _next_block == 368 then
                                                                                                                              _V.v421 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                                              if _V.v421 then
                                                                                                                                _next_block = 383
                                                                                                                              else
                                                                                                                                _next_block = 369
                                                                                                                              end
                                                                                                                            else
                                                                                                                              if _next_block == 369 then
                                                                                                                                _V.v422 = _V.v204[1] or 0
                                                                                                                                _V.v423 = 11 == _V.v422
                                                                                                                                if _V.v423 then
                                                                                                                                  _next_block = 370
                                                                                                                                else
                                                                                                                                  _next_block = 383
                                                                                                                                end
                                                                                                                              else
                                                                                                                                if _next_block == 370 then
                                                                                                                                  _V.v424 = _V.v204[2]
                                                                                                                                  _V.v425 = _V.v203[2]
                                                                                                                                  _V.v426 = _V.v171(_V.v425, _V.v424)
                                                                                                                                  _V.v427 = _V.v426[3]
                                                                                                                                  _V.v428 = _V.v426[2]
                                                                                                                                  _V.v429 = {16, _V.v428}
                                                                                                                                  _V.v430 = {0, _V.v429, _V.v427}
                                                                                                                                  return _V.v430
                                                                                                                                else
                                                                                                                                  if _next_block == 371 then
                                                                                                                                    _V.v431 = _V.v203[3]
                                                                                                                                    _V.v432 = _V.v203[2]
                                                                                                                                    _V.v433 = _V.v171(_V.v431, _V.v204)
                                                                                                                                    _V.v434 = _V.v433[3]
                                                                                                                                    _V.v435 = _V.v433[2]
                                                                                                                                    _V.v436 = {17, _V.v432, _V.v435}
                                                                                                                                    _V.v437 = {0, _V.v436, _V.v434}
                                                                                                                                    return _V.v437
                                                                                                                                  else
                                                                                                                                    if _next_block == 372 then
                                                                                                                                      _V.v438 = _V.v203[3]
                                                                                                                                      _V.v439 = _V.v203[2]
                                                                                                                                      _V.v440 = _V.v439[1] or 0
                                                                                                                                      _V.v441 = 0 == _V.v440
                                                                                                                                      if _V.v441 then
                                                                                                                                        _next_block = 384
                                                                                                                                      else
                                                                                                                                        _next_block = 385
                                                                                                                                      end
                                                                                                                                    else
                                                                                                                                      if _next_block == 373 then
                                                                                                                                        _V.v442 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                                                        if _V.v442 then
                                                                                                                                          _next_block = 383
                                                                                                                                        else
                                                                                                                                          _next_block = 374
                                                                                                                                        end
                                                                                                                                      else
                                                                                                                                        if _next_block == 374 then
                                                                                                                                          _V.v443 = _V.v204[1] or 0
                                                                                                                                          _V.v444 = 13 == _V.v443
                                                                                                                                          if _V.v444 then
                                                                                                                                            _next_block = 375
                                                                                                                                          else
                                                                                                                                            _next_block = 383
                                                                                                                                          end
                                                                                                                                        else
                                                                                                                                          if _next_block == 375 then
                                                                                                                                            _V.v445 = _V.v204[2]
                                                                                                                                            _V.v446 = _V.v203[2]
                                                                                                                                            _V.v447 = _V.v171(_V.v446, _V.v445)
                                                                                                                                            _V.v448 = _V.v447[3]
                                                                                                                                            _V.v449 = _V.v447[2]
                                                                                                                                            _V.v450 = {19, _V.v449}
                                                                                                                                            _V.v451 = {0, _V.v450, _V.v448}
                                                                                                                                            return _V.v451
                                                                                                                                          else
                                                                                                                                            if _next_block == 376 then
                                                                                                                                              _V.v452 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                                                              if _V.v452 then
                                                                                                                                                _next_block = 383
                                                                                                                                              else
                                                                                                                                                _next_block = 377
                                                                                                                                              end
                                                                                                                                            else
                                                                                                                                              if _next_block == 377 then
                                                                                                                                                _V.v453 = _V.v204[1] or 0
                                                                                                                                                _V.v454 = 1 == _V.v453
                                                                                                                                                if _V.v454 then
                                                                                                                                                  _next_block = 378
                                                                                                                                                else
                                                                                                                                                  _next_block = 383
                                                                                                                                                end
                                                                                                                                              else
                                                                                                                                                if _next_block == 378 then
                                                                                                                                                  _V.v455 = _V.v204[2]
                                                                                                                                                  _V.v456 = _V.v203[4]
                                                                                                                                                  _V.v457 = _V.v203[3]
                                                                                                                                                  _V.v458 = _V.v203[2]
                                                                                                                                                  _V.v459 = _V.v171(_V.v456, _V.v455)
                                                                                                                                                  _V.v460 = _V.v459[3]
                                                                                                                                                  _V.v461 = _V.v459[2]
                                                                                                                                                  _V.v462 = {20, _V.v458, _V.v457, _V.v461}
                                                                                                                                                  _V.v463 = {0, _V.v462, _V.v460}
                                                                                                                                                  return _V.v463
                                                                                                                                                else
                                                                                                                                                  if _next_block == 379 then
                                                                                                                                                    _V.v464 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                                                                    if _V.v464 then
                                                                                                                                                      _next_block = 383
                                                                                                                                                    else
                                                                                                                                                      _next_block = 380
                                                                                                                                                    end
                                                                                                                                                  else
                                                                                                                                                    if _next_block == 380 then
                                                                                                                                                      _V.v465 = _V.v204[1] or 0
                                                                                                                                                      _V.v466 = 2 == _V.v465
                                                                                                                                                      if _V.v466 then
                                                                                                                                                        _next_block = 381
                                                                                                                                                      else
                                                                                                                                                        _next_block = 383
                                                                                                                                                      end
                                                                                                                                                    else
                                                                                                                                                      if _next_block == 381 then
                                                                                                                                                        _V.v467 = _V.v204[2]
                                                                                                                                                        _V.v468 = _V.v203[3]
                                                                                                                                                        _V.v469 = _V.v203[2]
                                                                                                                                                        _V.v470 = _V.v171(_V.v468, _V.v467)
                                                                                                                                                        _V.v471 = _V.v470[3]
                                                                                                                                                        _V.v472 = _V.v470[2]
                                                                                                                                                        _V.v473 = {21, _V.v469, _V.v472}
                                                                                                                                                        _V.v474 = {0, _V.v473, _V.v471}
                                                                                                                                                        return _V.v474
                                                                                                                                                      else
                                                                                                                                                        if _next_block == 382 then
                                                                                                                                                          _V.v475 = _V.v203[3]
                                                                                                                                                          _V.v476 = _V.v203[2]
                                                                                                                                                          _V.v477 = type(_V.v476) == "number" and _V.v476 % 1 == 0
                                                                                                                                                          if _V.v477 then
                                                                                                                                                            _next_block = 386
                                                                                                                                                          else
                                                                                                                                                            _next_block = 387
                                                                                                                                                          end
                                                                                                                                                        else
                                                                                                                                                          if _next_block == 383 then
                                                                                                                                                            error(_V.v168)
                                                                                                                                                          else
                                                                                                                                                            if _next_block == 384 then
                                                                                                                                                              _V.v478 = _V.v439[2]
                                                                                                                                                              _V.v479 = _V.v478[3]
                                                                                                                                                              _V.v480 = _V.v478[2]
                                                                                                                                                              _V.v481 = _V.v171(_V.v480, _V.v204)
                                                                                                                                                              _V.v482 = _V.v481[3]
                                                                                                                                                              _V.v483 = _V.v481[2]
                                                                                                                                                              _V.v484 = _V.v171(_V.v438, _V.v482)
                                                                                                                                                              _V.v485 = _V.v484[3]
                                                                                                                                                              _V.v486 = _V.v484[2]
                                                                                                                                                              _V.v487 = {0, _V.v483, _V.v479}
                                                                                                                                                              _V.v488 = {0, _V.v487}
                                                                                                                                                              _V.v489 = {18, _V.v488, _V.v486}
                                                                                                                                                              _V.v490 = {0, _V.v489, _V.v485}
                                                                                                                                                              return _V.v490
                                                                                                                                                            else
                                                                                                                                                              if _next_block == 385 then
                                                                                                                                                                _V.v491 = _V.v439[2]
                                                                                                                                                                _V.v492 = _V.v491[3]
                                                                                                                                                                _V.v493 = _V.v491[2]
                                                                                                                                                                _V.v494 = _V.v171(_V.v493, _V.v204)
                                                                                                                                                                _V.v495 = _V.v494[3]
                                                                                                                                                                _V.v496 = _V.v494[2]
                                                                                                                                                                _V.v497 = _V.v171(_V.v438, _V.v495)
                                                                                                                                                                _V.v498 = _V.v497[3]
                                                                                                                                                                _V.v499 = _V.v497[2]
                                                                                                                                                                _V.v500 = {0, _V.v496, _V.v492}
                                                                                                                                                                _V.v501 = {1, _V.v500}
                                                                                                                                                                _V.v502 = {18, _V.v501, _V.v499}
                                                                                                                                                                _V.v503 = {0, _V.v502, _V.v498}
                                                                                                                                                                return _V.v503
                                                                                                                                                              else
                                                                                                                                                                if _next_block == 386 then
                                                                                                                                                                  _V.v504 = 2 == _V.v476
                                                                                                                                                                  if _V.v504 then
                                                                                                                                                                    _next_block = 389
                                                                                                                                                                  else
                                                                                                                                                                    _next_block = 388
                                                                                                                                                                  end
                                                                                                                                                                else
                                                                                                                                                                  if _next_block == 387 then
                                                                                                                                                                    _V.v505 = _V.v476[1] or 0
                                                                                                                                                                    if _V.v505 == 0 then
                                                                                                                                                                      _next_block = 393
                                                                                                                                                                    else
                                                                                                                                                                      if _V.v505 == 1 then
                                                                                                                                                                        _next_block = 393
                                                                                                                                                                      else
                                                                                                                                                                        if _V.v505 == 2 then
                                                                                                                                                                          _next_block = 393
                                                                                                                                                                        else
                                                                                                                                                                          if _V.v505 == 3 then
                                                                                                                                                                            _next_block = 393
                                                                                                                                                                          else
                                                                                                                                                                            if _V.v505 == 4 then
                                                                                                                                                                              _next_block = 393
                                                                                                                                                                            else
                                                                                                                                                                              if _V.v505 == 5 then
                                                                                                                                                                                _next_block = 393
                                                                                                                                                                              else
                                                                                                                                                                                if _V.v505 == 6 then
                                                                                                                                                                                  _next_block = 393
                                                                                                                                                                                else
                                                                                                                                                                                  if _V.v505 == 7 then
                                                                                                                                                                                    _next_block = 393
                                                                                                                                                                                  else
                                                                                                                                                                                    if _V.v505 == 8 then
                                                                                                                                                                                      _next_block = 394
                                                                                                                                                                                    else
                                                                                                                                                                                      if _V.v505 == 9 then
                                                                                                                                                                                        _next_block = 395
                                                                                                                                                                                      else
                                                                                                                                                                                        if _V.v505 == 10 then
                                                                                                                                                                                          _next_block = 393
                                                                                                                                                                                        else
                                                                                                                                                                                          if _V.v505 == 11 then
                                                                                                                                                                                            _next_block = 393
                                                                                                                                                                                          else
                                                                                                                                                                                            _next_block = 393
                                                                                                                                                                                          end
                                                                                                                                                                                        end
                                                                                                                                                                                      end
                                                                                                                                                                                    end
                                                                                                                                                                                  end
                                                                                                                                                                                end
                                                                                                                                                                              end
                                                                                                                                                                            end
                                                                                                                                                                          end
                                                                                                                                                                        end
                                                                                                                                                                      end
                                                                                                                                                                    end
                                                                                                                                                                  else
                                                                                                                                                                    if _next_block == 388 then
                                                                                                                                                                      _V.v506 = _V.v172(_V.v476, _V.v475, _V.v204)
                                                                                                                                                                      return _V.v506
                                                                                                                                                                    else
                                                                                                                                                                      if _next_block == 389 then
                                                                                                                                                                        _V.v507 = type(_V.v204) == "number" and _V.v204 % 1 == 0
                                                                                                                                                                        if _V.v507 then
                                                                                                                                                                          _next_block = 392
                                                                                                                                                                        else
                                                                                                                                                                          _next_block = 390
                                                                                                                                                                        end
                                                                                                                                                                      else
                                                                                                                                                                        if _next_block == 390 then
                                                                                                                                                                          _V.v508 = _V.v204[1] or 0
                                                                                                                                                                          _V.v509 = 14 == _V.v508
                                                                                                                                                                          if _V.v509 then
                                                                                                                                                                            _next_block = 391
                                                                                                                                                                          else
                                                                                                                                                                            _next_block = 392
                                                                                                                                                                          end
                                                                                                                                                                        else
                                                                                                                                                                          if _next_block == 391 then
                                                                                                                                                                            _V.v510 = _V.v204[2]
                                                                                                                                                                            _V.v511 = _V.v171(_V.v475, _V.v510)
                                                                                                                                                                            _V.v512 = _V.v511[3]
                                                                                                                                                                            _V.v513 = _V.v511[2]
                                                                                                                                                                            _V.v514 = 2
                                                                                                                                                                            _V.v515 = {23, _V.v514, _V.v513}
                                                                                                                                                                            _V.v516 = {0, _V.v515, _V.v512}
                                                                                                                                                                            return _V.v516
                                                                                                                                                                          else
                                                                                                                                                                            if _next_block == 392 then
                                                                                                                                                                              error(_V.v168)
                                                                                                                                                                            else
                                                                                                                                                                              if _next_block == 393 then
                                                                                                                                                                                _V.v517 = _V.v172(_V.v476, _V.v475, _V.v204)
                                                                                                                                                                                return _V.v517
                                                                                                                                                                              else
                                                                                                                                                                                if _next_block == 394 then
                                                                                                                                                                                  _V.v518 = _V.v476[3]
                                                                                                                                                                                  _V.v519 = _V.v476[2]
                                                                                                                                                                                  _V.v520 = {8, _V.v519, _V.v518}
                                                                                                                                                                                  _V.v521 = _V.v172(_V.v520, _V.v475, _V.v204)
                                                                                                                                                                                  return _V.v521
                                                                                                                                                                                else
                                                                                                                                                                                  if _next_block == 395 then
                                                                                                                                                                                    _V.v522 = _V.v476[3]
                                                                                                                                                                                    _V.v523 = _V.v476[2]
                                                                                                                                                                                    _V.v524 = _V.v173(_V.v522, _V.v475, _V.v204)
                                                                                                                                                                                    _V.v525 = _V.v524[3]
                                                                                                                                                                                    _V.v526 = _V.v525[3]
                                                                                                                                                                                    _V.v527 = _V.v525[2]
                                                                                                                                                                                    _V.v528 = _V.v524[2]
                                                                                                                                                                                    _V.v529 = {9, _V.v523, _V.v528}
                                                                                                                                                                                    _V.v530 = {23, _V.v529, _V.v527}
                                                                                                                                                                                    _V.v531 = {0, _V.v530, _V.v526}
                                                                                                                                                                                    return _V.v531
                                                                                                                                                                                  else
                                                                                                                                                                                    break
                                                                                                                                                                                  end
                                                                                                                                                                                end
                                                                                                                                                                              end
                                                                                                                                                                            end
                                                                                                                                                                          end
                                                                                                                                                                        end
                                                                                                                                                                      end
                                                                                                                                                                    end
                                                                                                                                                                  end
                                                                                                                                                                end
                                                                                                                                                              end
                                                                                                                                                            end
                                                                                                                                                          end
                                                                                                                                                        end
                                                                                                                                                      end
                                                                                                                                                    end
                                                                                                                                                  end
                                                                                                                                                end
                                                                                                                                              end
                                                                                                                                            end
                                                                                                                                          end
                                                                                                                                        end
                                                                                                                                      end
                                                                                                                                    end
                                                                                                                                  end
                                                                                                                                end
                                                                                                                              end
                                                                                                                            end
                                                                                                                          end
                                                                                                                        end
                                                                                                                      end
                                                                                                                    end
                                                                                                                  end
                                                                                                                end
                                                                                                              end
                                                                                                            end
                                                                                                          end
                                                                                                        end
                                                                                                      end
                                                                                                    end
                                                                                                  end
                                                                                                end
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v172 = caml_make_closure(3, function(v203, v204, v205)
        -- Hoisted variables (5 total, using inherited _V table)
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        local _next_block = 396
        while true do
          if _next_block == 396 then
            _V.v206 = _V.v171(_V.v204, _V.v205)
            _V.v207 = _V.v206[3]
            _V.v208 = _V.v206[2]
            _V.v209 = {23, _V.v203, _V.v208}
            _V.v210 = {0, _V.v209, _V.v207}
            return _V.v210
          else
            break
          end
        end
      end)
      _V.v173 = caml_make_closure(3, function(v203, v204, v205)
        -- Hoisted variables (175 total, using inherited _V table)
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v254 = nil
        _V.v255 = nil
        _V.v256 = nil
        _V.v257 = nil
        _V.v258 = nil
        _V.v259 = nil
        _V.v260 = nil
        _V.v261 = nil
        _V.v262 = nil
        _V.v263 = nil
        _V.v264 = nil
        _V.v265 = nil
        _V.v266 = nil
        _V.v267 = nil
        _V.v268 = nil
        _V.v269 = nil
        _V.v270 = nil
        _V.v271 = nil
        _V.v272 = nil
        _V.v273 = nil
        _V.v274 = nil
        _V.v275 = nil
        _V.v276 = nil
        _V.v277 = nil
        _V.v278 = nil
        _V.v279 = nil
        _V.v280 = nil
        _V.v281 = nil
        _V.v282 = nil
        _V.v283 = nil
        _V.v284 = nil
        _V.v285 = nil
        _V.v286 = nil
        _V.v287 = nil
        _V.v288 = nil
        _V.v289 = nil
        _V.v290 = nil
        _V.v291 = nil
        _V.v292 = nil
        _V.v293 = nil
        _V.v294 = nil
        _V.v295 = nil
        _V.v296 = nil
        _V.v297 = nil
        _V.v298 = nil
        _V.v299 = nil
        _V.v300 = nil
        _V.v301 = nil
        _V.v302 = nil
        _V.v303 = nil
        _V.v304 = nil
        _V.v305 = nil
        _V.v306 = nil
        _V.v307 = nil
        _V.v308 = nil
        _V.v309 = nil
        _V.v310 = nil
        _V.v311 = nil
        _V.v312 = nil
        _V.v313 = nil
        _V.v314 = nil
        _V.v315 = nil
        _V.v316 = nil
        _V.v317 = nil
        _V.v318 = nil
        _V.v319 = nil
        _V.v320 = nil
        _V.v321 = nil
        _V.v322 = nil
        _V.v323 = nil
        _V.v324 = nil
        _V.v325 = nil
        _V.v326 = nil
        _V.v327 = nil
        _V.v328 = nil
        _V.v329 = nil
        _V.v330 = nil
        _V.v331 = nil
        _V.v332 = nil
        _V.v333 = nil
        _V.v334 = nil
        _V.v335 = nil
        _V.v336 = nil
        _V.v337 = nil
        _V.v338 = nil
        _V.v339 = nil
        _V.v340 = nil
        _V.v341 = nil
        _V.v342 = nil
        _V.v343 = nil
        _V.v344 = nil
        _V.v345 = nil
        _V.v346 = nil
        _V.v347 = nil
        _V.v348 = nil
        _V.v349 = nil
        _V.v350 = nil
        _V.v351 = nil
        _V.v352 = nil
        _V.v353 = nil
        _V.v354 = nil
        _V.v355 = nil
        _V.v356 = nil
        _V.v357 = nil
        _V.v358 = nil
        _V.v359 = nil
        _V.v360 = nil
        _V.v361 = nil
        _V.v362 = nil
        _V.v363 = nil
        _V.v364 = nil
        _V.v365 = nil
        _V.v366 = nil
        _V.v367 = nil
        _V.v368 = nil
        _V.v369 = nil
        _V.v370 = nil
        _V.v371 = nil
        _V.v372 = nil
        _V.v373 = nil
        _V.v374 = nil
        _V.v375 = nil
        _V.v376 = nil
        _V.v377 = nil
        _V.v378 = nil
        _V.v379 = nil
        _V.v380 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        local _next_block = 397
        while true do
          if _next_block == 397 then
            _V.v206 = type(_V.v203) == "number" and _V.v203 % 1 == 0
            if _V.v206 then
              _next_block = 399
            else
              _next_block = 398
            end
          else
            if _next_block == 398 then
              _V.v207 = _V.v203[1] or 0
              if _V.v207 == 0 then
                _next_block = 400
              else
                if _V.v207 == 1 then
                  _next_block = 403
                else
                  if _V.v207 == 2 then
                    _next_block = 406
                  else
                    if _V.v207 == 3 then
                      _next_block = 409
                    else
                      if _V.v207 == 4 then
                        _next_block = 412
                      else
                        if _V.v207 == 5 then
                          _next_block = 415
                        else
                          if _V.v207 == 6 then
                            _next_block = 418
                          else
                            if _V.v207 == 7 then
                              _next_block = 421
                            else
                              if _V.v207 == 8 then
                                _next_block = 424
                              else
                                if _V.v207 == 9 then
                                  _next_block = 429
                                else
                                  if _V.v207 == 10 then
                                    _next_block = 436
                                  else
                                    if _V.v207 == 11 then
                                      _next_block = 439
                                    else
                                      if _V.v207 == 12 then
                                        _next_block = 448
                                      else
                                        if _V.v207 == 13 then
                                          _next_block = 442
                                        else
                                          if _V.v207 == 14 then
                                            _next_block = 445
                                          else
                                            _next_block = 400
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            else
              if _next_block == 399 then
                _V.v208 = _V.v171(_V.v204, _V.v205)
                _V.v209 = 0
                _V.v210 = {0, _V.v209, _V.v208}
                return _V.v210
              else
                if _next_block == 400 then
                  _V.v211 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                  if _V.v211 then
                    _next_block = 448
                  else
                    _next_block = 401
                  end
                else
                  if _next_block == 401 then
                    _V.v212 = _V.v205[1] or 0
                    _V.v213 = 0 == _V.v212
                    if _V.v213 then
                      _next_block = 402
                    else
                      _next_block = 448
                    end
                  else
                    if _next_block == 402 then
                      _V.v214 = _V.v205[2]
                      _V.v215 = _V.v203[2]
                      _V.v216 = _V.v173(_V.v215, _V.v204, _V.v214)
                      _V.v217 = _V.v216[3]
                      _V.v218 = _V.v216[2]
                      _V.v219 = {0, _V.v218}
                      _V.v220 = {0, _V.v219, _V.v217}
                      return _V.v220
                    else
                      if _next_block == 403 then
                        _V.v221 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                        if _V.v221 then
                          _next_block = 448
                        else
                          _next_block = 404
                        end
                      else
                        if _next_block == 404 then
                          _V.v222 = _V.v205[1] or 0
                          _V.v223 = 1 == _V.v222
                          if _V.v223 then
                            _next_block = 405
                          else
                            _next_block = 448
                          end
                        else
                          if _next_block == 405 then
                            _V.v224 = _V.v205[2]
                            _V.v225 = _V.v203[2]
                            _V.v226 = _V.v173(_V.v225, _V.v204, _V.v224)
                            _V.v227 = _V.v226[3]
                            _V.v228 = _V.v226[2]
                            _V.v229 = {1, _V.v228}
                            _V.v230 = {0, _V.v229, _V.v227}
                            return _V.v230
                          else
                            if _next_block == 406 then
                              _V.v231 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                              if _V.v231 then
                                _next_block = 448
                              else
                                _next_block = 407
                              end
                            else
                              if _next_block == 407 then
                                _V.v232 = _V.v205[1] or 0
                                _V.v233 = 2 == _V.v232
                                if _V.v233 then
                                  _next_block = 408
                                else
                                  _next_block = 448
                                end
                              else
                                if _next_block == 408 then
                                  _V.v234 = _V.v205[2]
                                  _V.v235 = _V.v203[2]
                                  _V.v236 = _V.v173(_V.v235, _V.v204, _V.v234)
                                  _V.v237 = _V.v236[3]
                                  _V.v238 = _V.v236[2]
                                  _V.v239 = {2, _V.v238}
                                  _V.v240 = {0, _V.v239, _V.v237}
                                  return _V.v240
                                else
                                  if _next_block == 409 then
                                    _V.v241 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                    if _V.v241 then
                                      _next_block = 448
                                    else
                                      _next_block = 410
                                    end
                                  else
                                    if _next_block == 410 then
                                      _V.v242 = _V.v205[1] or 0
                                      _V.v243 = 3 == _V.v242
                                      if _V.v243 then
                                        _next_block = 411
                                      else
                                        _next_block = 448
                                      end
                                    else
                                      if _next_block == 411 then
                                        _V.v244 = _V.v205[2]
                                        _V.v245 = _V.v203[2]
                                        _V.v246 = _V.v173(_V.v245, _V.v204, _V.v244)
                                        _V.v247 = _V.v246[3]
                                        _V.v248 = _V.v246[2]
                                        _V.v249 = {3, _V.v248}
                                        _V.v250 = {0, _V.v249, _V.v247}
                                        return _V.v250
                                      else
                                        if _next_block == 412 then
                                          _V.v251 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                          if _V.v251 then
                                            _next_block = 448
                                          else
                                            _next_block = 413
                                          end
                                        else
                                          if _next_block == 413 then
                                            _V.v252 = _V.v205[1] or 0
                                            _V.v253 = 4 == _V.v252
                                            if _V.v253 then
                                              _next_block = 414
                                            else
                                              _next_block = 448
                                            end
                                          else
                                            if _next_block == 414 then
                                              _V.v254 = _V.v205[2]
                                              _V.v255 = _V.v203[2]
                                              _V.v256 = _V.v173(_V.v255, _V.v204, _V.v254)
                                              _V.v257 = _V.v256[3]
                                              _V.v258 = _V.v256[2]
                                              _V.v259 = {4, _V.v258}
                                              _V.v260 = {0, _V.v259, _V.v257}
                                              return _V.v260
                                            else
                                              if _next_block == 415 then
                                                _V.v261 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                                if _V.v261 then
                                                  _next_block = 448
                                                else
                                                  _next_block = 416
                                                end
                                              else
                                                if _next_block == 416 then
                                                  _V.v262 = _V.v205[1] or 0
                                                  _V.v263 = 5 == _V.v262
                                                  if _V.v263 then
                                                    _next_block = 417
                                                  else
                                                    _next_block = 448
                                                  end
                                                else
                                                  if _next_block == 417 then
                                                    _V.v264 = _V.v205[2]
                                                    _V.v265 = _V.v203[2]
                                                    _V.v266 = _V.v173(_V.v265, _V.v204, _V.v264)
                                                    _V.v267 = _V.v266[3]
                                                    _V.v268 = _V.v266[2]
                                                    _V.v269 = {5, _V.v268}
                                                    _V.v270 = {0, _V.v269, _V.v267}
                                                    return _V.v270
                                                  else
                                                    if _next_block == 418 then
                                                      _V.v271 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                                      if _V.v271 then
                                                        _next_block = 448
                                                      else
                                                        _next_block = 419
                                                      end
                                                    else
                                                      if _next_block == 419 then
                                                        _V.v272 = _V.v205[1] or 0
                                                        _V.v273 = 6 == _V.v272
                                                        if _V.v273 then
                                                          _next_block = 420
                                                        else
                                                          _next_block = 448
                                                        end
                                                      else
                                                        if _next_block == 420 then
                                                          _V.v274 = _V.v205[2]
                                                          _V.v275 = _V.v203[2]
                                                          _V.v276 = _V.v173(_V.v275, _V.v204, _V.v274)
                                                          _V.v277 = _V.v276[3]
                                                          _V.v278 = _V.v276[2]
                                                          _V.v279 = {6, _V.v278}
                                                          _V.v280 = {0, _V.v279, _V.v277}
                                                          return _V.v280
                                                        else
                                                          if _next_block == 421 then
                                                            _V.v281 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                                            if _V.v281 then
                                                              _next_block = 448
                                                            else
                                                              _next_block = 422
                                                            end
                                                          else
                                                            if _next_block == 422 then
                                                              _V.v282 = _V.v205[1] or 0
                                                              _V.v283 = 7 == _V.v282
                                                              if _V.v283 then
                                                                _next_block = 423
                                                              else
                                                                _next_block = 448
                                                              end
                                                            else
                                                              if _next_block == 423 then
                                                                _V.v284 = _V.v205[2]
                                                                _V.v285 = _V.v203[2]
                                                                _V.v286 = _V.v173(_V.v285, _V.v204, _V.v284)
                                                                _V.v287 = _V.v286[3]
                                                                _V.v288 = _V.v286[2]
                                                                _V.v289 = {7, _V.v288}
                                                                _V.v290 = {0, _V.v289, _V.v287}
                                                                return _V.v290
                                                              else
                                                                if _next_block == 424 then
                                                                  _V.v291 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                                                  if _V.v291 then
                                                                    _next_block = 448
                                                                  else
                                                                    _next_block = 425
                                                                  end
                                                                else
                                                                  if _next_block == 425 then
                                                                    _V.v292 = _V.v205[1] or 0
                                                                    _V.v293 = 8 == _V.v292
                                                                    if _V.v293 then
                                                                      _next_block = 426
                                                                    else
                                                                      _next_block = 448
                                                                    end
                                                                  else
                                                                    if _next_block == 426 then
                                                                      _V.v294 = _V.v205[3]
                                                                      _V.v295 = _V.v205[2]
                                                                      _V.v296 = _V.v203[3]
                                                                      _V.v297 = _V.v203[2]
                                                                      _V.v298 = {0, _V.v295}
                                                                      _V.v299 = {0, _V.v297}
                                                                      _V.v300 = caml_notequal(_V.v299, _V.v298)
                                                                      if _V.v300 then
                                                                        _next_block = 427
                                                                      else
                                                                        _next_block = 428
                                                                      end
                                                                    else
                                                                      if _next_block == 427 then
                                                                        error(_V.v168)
                                                                      else
                                                                        if _next_block == 428 then
                                                                          _V.v301 = _V.v173(_V.v296, _V.v204, _V.v294)
                                                                          _V.v302 = _V.v301[3]
                                                                          _V.v303 = _V.v301[2]
                                                                          _V.v304 = {8, _V.v295, _V.v303}
                                                                          _V.v305 = {0, _V.v304, _V.v302}
                                                                          return _V.v305
                                                                        else
                                                                          if _next_block == 429 then
                                                                            _V.v306 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                                                            if _V.v306 then
                                                                              _next_block = 448
                                                                            else
                                                                              _next_block = 430
                                                                            end
                                                                          else
                                                                            if _next_block == 430 then
                                                                              _V.v307 = _V.v205[1] or 0
                                                                              _V.v308 = 9 == _V.v307
                                                                              if _V.v308 then
                                                                                _next_block = 431
                                                                              else
                                                                                _next_block = 448
                                                                              end
                                                                            else
                                                                              if _next_block == 431 then
                                                                                _V.v309 = _V.v205[4]
                                                                                _V.v310 = _V.v205[3]
                                                                                _V.v311 = _V.v205[2]
                                                                                _V.v312 = _V.v203[4]
                                                                                _V.v313 = _V.v203[3]
                                                                                _V.v314 = _V.v203[2]
                                                                                _V.v315 = _V.v131(_V.v311)
                                                                                _V.v316 = {0, _V.v315}
                                                                                _V.v317 = _V.v131(_V.v314)
                                                                                _V.v318 = {0, _V.v317}
                                                                                _V.v319 = caml_notequal(_V.v318, _V.v316)
                                                                                if _V.v319 then
                                                                                  _next_block = 432
                                                                                else
                                                                                  _next_block = 433
                                                                                end
                                                                              else
                                                                                if _next_block == 432 then
                                                                                  error(_V.v168)
                                                                                else
                                                                                  if _next_block == 433 then
                                                                                    _V.v320 = _V.v131(_V.v310)
                                                                                    _V.v321 = {0, _V.v320}
                                                                                    _V.v322 = _V.v131(_V.v313)
                                                                                    _V.v323 = {0, _V.v322}
                                                                                    _V.v324 = caml_notequal(_V.v323, _V.v321)
                                                                                    if _V.v324 then
                                                                                      _next_block = 434
                                                                                    else
                                                                                      _next_block = 435
                                                                                    end
                                                                                  else
                                                                                    if _next_block == 434 then
                                                                                      error(_V.v168)
                                                                                    else
                                                                                      if _next_block == 435 then
                                                                                        _V.v325 = _V.v164(_V.v311)
                                                                                        _V.v326 = _V.v166(_V.v325, _V.v310)
                                                                                        _V.v327 = _V.v165(_V.v326)
                                                                                        _V.v328 = _V.v327[5]
                                                                                        _V.v329 = _V.v327[3]
                                                                                        _V.v330 = 0
                                                                                        _V.v331 = _V.v329(_V.v330)
                                                                                        _V.v332 = 0
                                                                                        _V.v333 = _V.v328(_V.v332)
                                                                                        _V.v334 = _V.v131(_V.v312)
                                                                                        _V.v335 = _V.v173(_V.v334, _V.v204, _V.v309)
                                                                                        _V.v336 = _V.v335[3]
                                                                                        _V.v337 = _V.v335[2]
                                                                                        _V.v338 = _V.v164(_V.v337)
                                                                                        _V.v339 = {9, _V.v311, _V.v310, _V.v338}
                                                                                        _V.v340 = {0, _V.v339, _V.v336}
                                                                                        return _V.v340
                                                                                      else
                                                                                        if _next_block == 436 then
                                                                                          _V.v341 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                                                                          if _V.v341 then
                                                                                            _next_block = 448
                                                                                          else
                                                                                            _next_block = 437
                                                                                          end
                                                                                        else
                                                                                          if _next_block == 437 then
                                                                                            _V.v342 = _V.v205[1] or 0
                                                                                            _V.v343 = 10 == _V.v342
                                                                                            if _V.v343 then
                                                                                              _next_block = 438
                                                                                            else
                                                                                              _next_block = 448
                                                                                            end
                                                                                          else
                                                                                            if _next_block == 438 then
                                                                                              _V.v344 = _V.v205[2]
                                                                                              _V.v345 = _V.v203[2]
                                                                                              _V.v346 = _V.v173(_V.v345, _V.v204, _V.v344)
                                                                                              _V.v347 = _V.v346[3]
                                                                                              _V.v348 = _V.v346[2]
                                                                                              _V.v349 = {10, _V.v348}
                                                                                              _V.v350 = {0, _V.v349, _V.v347}
                                                                                              return _V.v350
                                                                                            else
                                                                                              if _next_block == 439 then
                                                                                                _V.v351 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                                                                                if _V.v351 then
                                                                                                  _next_block = 448
                                                                                                else
                                                                                                  _next_block = 440
                                                                                                end
                                                                                              else
                                                                                                if _next_block == 440 then
                                                                                                  _V.v352 = _V.v205[1] or 0
                                                                                                  _V.v353 = 11 == _V.v352
                                                                                                  if _V.v353 then
                                                                                                    _next_block = 441
                                                                                                  else
                                                                                                    _next_block = 448
                                                                                                  end
                                                                                                else
                                                                                                  if _next_block == 441 then
                                                                                                    _V.v354 = _V.v205[2]
                                                                                                    _V.v355 = _V.v203[2]
                                                                                                    _V.v356 = _V.v173(_V.v355, _V.v204, _V.v354)
                                                                                                    _V.v357 = _V.v356[3]
                                                                                                    _V.v358 = _V.v356[2]
                                                                                                    _V.v359 = {11, _V.v358}
                                                                                                    _V.v360 = {0, _V.v359, _V.v357}
                                                                                                    return _V.v360
                                                                                                  else
                                                                                                    if _next_block == 442 then
                                                                                                      _V.v361 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                                                                                      if _V.v361 then
                                                                                                        _next_block = 448
                                                                                                      else
                                                                                                        _next_block = 443
                                                                                                      end
                                                                                                    else
                                                                                                      if _next_block == 443 then
                                                                                                        _V.v362 = _V.v205[1] or 0
                                                                                                        _V.v363 = 13 == _V.v362
                                                                                                        if _V.v363 then
                                                                                                          _next_block = 444
                                                                                                        else
                                                                                                          _next_block = 448
                                                                                                        end
                                                                                                      else
                                                                                                        if _next_block == 444 then
                                                                                                          _V.v364 = _V.v205[2]
                                                                                                          _V.v365 = _V.v203[2]
                                                                                                          _V.v366 = _V.v173(_V.v365, _V.v204, _V.v364)
                                                                                                          _V.v367 = _V.v366[3]
                                                                                                          _V.v368 = _V.v366[2]
                                                                                                          _V.v369 = {13, _V.v368}
                                                                                                          _V.v370 = {0, _V.v369, _V.v367}
                                                                                                          return _V.v370
                                                                                                        else
                                                                                                          if _next_block == 445 then
                                                                                                            _V.v371 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                                                                                            if _V.v371 then
                                                                                                              _next_block = 448
                                                                                                            else
                                                                                                              _next_block = 446
                                                                                                            end
                                                                                                          else
                                                                                                            if _next_block == 446 then
                                                                                                              _V.v372 = _V.v205[1] or 0
                                                                                                              _V.v373 = 14 == _V.v372
                                                                                                              if _V.v373 then
                                                                                                                _next_block = 447
                                                                                                              else
                                                                                                                _next_block = 448
                                                                                                              end
                                                                                                            else
                                                                                                              if _next_block == 447 then
                                                                                                                _V.v374 = _V.v205[2]
                                                                                                                _V.v375 = _V.v203[2]
                                                                                                                _V.v376 = _V.v173(_V.v375, _V.v204, _V.v374)
                                                                                                                _V.v377 = _V.v376[3]
                                                                                                                _V.v378 = _V.v376[2]
                                                                                                                _V.v379 = {14, _V.v378}
                                                                                                                _V.v380 = {0, _V.v379, _V.v377}
                                                                                                                return _V.v380
                                                                                                              else
                                                                                                                if _next_block == 448 then
                                                                                                                  error(_V.v168)
                                                                                                                else
                                                                                                                  break
                                                                                                                end
                                                                                                              end
                                                                                                            end
                                                                                                          end
                                                                                                        end
                                                                                                      end
                                                                                                    end
                                                                                                  end
                                                                                                end
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v174 = caml_make_closure(3, function(v203, v204, v205)
        -- Hoisted variables (47 total, using inherited _V table)
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        local _next_block = 719
        while true do
          if _next_block == 719 then
            _V.v206 = caml_ml_string_length(_V.v205)
            _V.v207 = 0 <= _V.v204
            if _V.v207 then
              -- Block arg: v253 = v203 (captured)
              _V.v253 = _V.v203
              _next_block = 721
            else
              _next_block = 720
            end
          else
            if _next_block == 720 then
              _V.v208 = 0
              -- Block arg: v253 = v208 (captured)
              _V.v253 = _V.v208
              _next_block = 721
            else
              if _next_block == 721 then
                _V.v209 = _V.v136(_V.v204)
                _V.v210 = _V.v209 <= _V.v206
                if _V.v210 then
                  _next_block = 722
                else
                  _next_block = 723
                end
              else
                if _next_block == 722 then
                  return _V.v205
                else
                  if _next_block == 723 then
                    _V.v211 = 2 == _V.v253
                    if _V.v211 then
                      _next_block = 724
                    else
                      _next_block = 725
                    end
                  else
                    if _next_block == 724 then
                      _V.v212 = 48
                      -- Block arg: v254 = v212 (captured)
                      _V.v254 = _V.v212
                      _next_block = 726
                    else
                      if _next_block == 725 then
                        _V.v213 = 32
                        -- Block arg: v254 = v213 (captured)
                        _V.v254 = _V.v213
                        _next_block = 726
                      else
                        if _next_block == 726 then
                          _V.v214 = _V.v154(_V.v209, _V.v254)
                          if _V.v253 == 0 then
                            _next_block = 727
                          else
                            if _V.v253 == 1 then
                              _next_block = 728
                            else
                              if _V.v253 == 2 then
                                _next_block = 729
                              else
                                _next_block = 727
                              end
                            end
                          end
                        else
                          if _next_block == 727 then
                            _V.v215 = 0
                            _V.v216 = 0
                            _V.v217 = _V.v156(_V.v205, _V.v216, _V.v214, _V.v215, _V.v206)
                            _next_block = 740
                          else
                            if _next_block == 728 then
                              _V.v218 = _V.v209 - _V.v206
                              _V.v219 = 0
                              _V.v220 = _V.v156(_V.v205, _V.v219, _V.v214, _V.v218, _V.v206)
                              _next_block = 740
                            else
                              if _next_block == 729 then
                                _V.v221 = 0 < _V.v206
                                if _V.v221 then
                                  _next_block = 730
                                else
                                  _next_block = 734
                                end
                              else
                                if _next_block == 730 then
                                  _V.v222 = caml_string_get(_V.v205, 0)
                                  _V.v223 = 43 == _V.v222
                                  if _V.v223 then
                                    _next_block = 733
                                  else
                                    _next_block = 731
                                  end
                                else
                                  if _next_block == 731 then
                                    _V.v224 = caml_string_get(_V.v205, 0)
                                    _V.v225 = 45 == _V.v224
                                    if _V.v225 then
                                      _next_block = 733
                                    else
                                      _next_block = 732
                                    end
                                  else
                                    if _next_block == 732 then
                                      _V.v226 = caml_string_get(_V.v205, 0)
                                      _V.v227 = 32 == _V.v226
                                      if _V.v227 then
                                        _next_block = 733
                                      else
                                        _next_block = 734
                                      end
                                    else
                                      if _next_block == 733 then
                                        _V.v228 = caml_string_get(_V.v205, 0)
                                        _V.v229 = caml_bytes_set(_V.v214, 0, _V.v228)
                                        _V.v230 = _V.v206 + -1
                                        _V.v231 = _V.v209 - _V.v206
                                        _V.v232 = _V.v231 + 1
                                        _V.v233 = 1
                                        _V.v234 = _V.v156(_V.v205, _V.v233, _V.v214, _V.v232, _V.v230)
                                        _next_block = 740
                                      else
                                        if _next_block == 734 then
                                          _V.v235 = 1 < _V.v206
                                          if _V.v235 then
                                            _next_block = 735
                                          else
                                            _next_block = 739
                                          end
                                        else
                                          if _next_block == 735 then
                                            _V.v236 = caml_string_get(_V.v205, 0)
                                            _V.v237 = 48 == _V.v236
                                            if _V.v237 then
                                              _next_block = 736
                                            else
                                              _next_block = 739
                                            end
                                          else
                                            if _next_block == 736 then
                                              _V.v238 = caml_string_get(_V.v205, 1)
                                              _V.v239 = 120 == _V.v238
                                              if _V.v239 then
                                                _next_block = 738
                                              else
                                                _next_block = 737
                                              end
                                            else
                                              if _next_block == 737 then
                                                _V.v240 = caml_string_get(_V.v205, 1)
                                                _V.v241 = 88 == _V.v240
                                                if _V.v241 then
                                                  _next_block = 738
                                                else
                                                  _next_block = 739
                                                end
                                              else
                                                if _next_block == 738 then
                                                  _V.v242 = caml_string_get(_V.v205, 1)
                                                  _V.v243 = caml_bytes_set(_V.v214, 1, _V.v242)
                                                  _V.v244 = _V.v206 + -2
                                                  _V.v245 = _V.v209 - _V.v206
                                                  _V.v246 = _V.v245 + 2
                                                  _V.v247 = 2
                                                  _V.v248 = _V.v156(_V.v205, _V.v247, _V.v214, _V.v246, _V.v244)
                                                  _next_block = 740
                                                else
                                                  if _next_block == 739 then
                                                    _V.v249 = _V.v209 - _V.v206
                                                    _V.v250 = 0
                                                    _V.v251 = _V.v156(_V.v205, _V.v250, _V.v214, _V.v249, _V.v206)
                                                    _next_block = 740
                                                  else
                                                    if _next_block == 740 then
                                                      _V.v252 = caml_string_of_bytes(_V.v214)
                                                      return _V.v252
                                                    else
                                                      break
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v175 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (48 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 702
        while true do
          if _next_block == 702 then
            _V.v205 = _V.v136(_V.v203)
            _V.v206 = caml_ml_string_length(_V.v204)
            _V.v207 = caml_string_get(_V.v204, 0)
            _V.v208 = 58 <= _V.v207
            if _V.v208 then
              _next_block = 703
            else
              _next_block = 706
            end
          else
            if _next_block == 703 then
              _V.v209 = 71 <= _V.v207
              if _V.v209 then
                _next_block = 704
              else
                _next_block = 705
              end
            else
              if _next_block == 704 then
                _V.v210 = _V.v207 + -97
                _V.v211 = 5 < _V.v210
                if _V.v211 then
                  _next_block = 718
                else
                  _next_block = 716
                end
              else
                if _next_block == 705 then
                  _V.v212 = 65 <= _V.v207
                  if _V.v212 then
                    _next_block = 716
                  else
                    _next_block = 718
                  end
                else
                  if _next_block == 706 then
                    _V.v213 = 32 == _V.v207
                    if _V.v213 then
                      _next_block = 714
                    else
                      _next_block = 707
                    end
                  else
                    if _next_block == 707 then
                      _V.v214 = 43 <= _V.v207
                      if _V.v214 then
                        _next_block = 708
                      else
                        _next_block = 718
                      end
                    else
                      if _next_block == 708 then
                        _V.v215 = _V.v207 + -43
                        if _V.v215 == 0 then
                          _next_block = 714
                        else
                          if _V.v215 == 1 then
                            _next_block = 718
                          else
                            if _V.v215 == 2 then
                              _next_block = 714
                            else
                              if _V.v215 == 3 then
                                _next_block = 718
                              else
                                if _V.v215 == 4 then
                                  _next_block = 718
                                else
                                  if _V.v215 == 5 then
                                    _next_block = 709
                                  else
                                    if _V.v215 == 6 then
                                      _next_block = 716
                                    else
                                      if _V.v215 == 7 then
                                        _next_block = 716
                                      else
                                        if _V.v215 == 8 then
                                          _next_block = 716
                                        else
                                          if _V.v215 == 9 then
                                            _next_block = 716
                                          else
                                            if _V.v215 == 10 then
                                              _next_block = 716
                                            else
                                              if _V.v215 == 11 then
                                                _next_block = 716
                                              else
                                                if _V.v215 == 12 then
                                                  _next_block = 716
                                                else
                                                  if _V.v215 == 13 then
                                                    _next_block = 716
                                                  else
                                                    if _V.v215 == 14 then
                                                      _next_block = 716
                                                    else
                                                      _next_block = 714
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      else
                        if _next_block == 709 then
                          _V.v216 = _V.v205 + 2
                          _V.v217 = _V.v206 < _V.v216
                          if _V.v217 then
                            _next_block = 710
                          else
                            _next_block = 716
                          end
                        else
                          if _next_block == 710 then
                            _V.v218 = 1 < _V.v206
                            if _V.v218 then
                              _next_block = 711
                            else
                              _next_block = 716
                            end
                          else
                            if _next_block == 711 then
                              _V.v219 = caml_string_get(_V.v204, 1)
                              _V.v220 = 120 == _V.v219
                              if _V.v220 then
                                _next_block = 713
                              else
                                _next_block = 712
                              end
                            else
                              if _next_block == 712 then
                                _V.v221 = caml_string_get(_V.v204, 1)
                                _V.v222 = 88 == _V.v221
                                if _V.v222 then
                                  _next_block = 713
                                else
                                  _next_block = 716
                                end
                              else
                                if _next_block == 713 then
                                  _V.v223 = 48
                                  _V.v224 = _V.v205 + 2
                                  _V.v225 = _V.v154(_V.v224, _V.v223)
                                  _V.v226 = caml_string_get(_V.v204, 1)
                                  _V.v227 = caml_bytes_set(_V.v225, 1, _V.v226)
                                  _V.v228 = _V.v206 + -2
                                  _V.v229 = _V.v205 - _V.v206
                                  _V.v230 = _V.v229 + 4
                                  _V.v231 = 2
                                  _V.v232 = _V.v156(_V.v204, _V.v231, _V.v225, _V.v230, _V.v228)
                                  _V.v233 = caml_string_of_bytes(_V.v225)
                                  return _V.v233
                                else
                                  if _next_block == 714 then
                                    _V.v234 = _V.v205 + 1
                                    _V.v235 = _V.v206 < _V.v234
                                    if _V.v235 then
                                      _next_block = 715
                                    else
                                      _next_block = 718
                                    end
                                  else
                                    if _next_block == 715 then
                                      _V.v236 = 48
                                      _V.v237 = _V.v205 + 1
                                      _V.v238 = _V.v154(_V.v237, _V.v236)
                                      _V.v239 = caml_bytes_set(_V.v238, 0, _V.v207)
                                      _V.v240 = _V.v206 + -1
                                      _V.v241 = _V.v205 - _V.v206
                                      _V.v242 = _V.v241 + 2
                                      _V.v243 = 1
                                      _V.v244 = _V.v156(_V.v204, _V.v243, _V.v238, _V.v242, _V.v240)
                                      _V.v245 = caml_string_of_bytes(_V.v238)
                                      return _V.v245
                                    else
                                      if _next_block == 716 then
                                        _V.v246 = _V.v206 < _V.v205
                                        if _V.v246 then
                                          _next_block = 717
                                        else
                                          _next_block = 718
                                        end
                                      else
                                        if _next_block == 717 then
                                          _V.v247 = 48
                                          _V.v248 = _V.v154(_V.v205, _V.v247)
                                          _V.v249 = _V.v205 - _V.v206
                                          _V.v250 = 0
                                          _V.v251 = _V.v156(_V.v204, _V.v250, _V.v248, _V.v249, _V.v206)
                                          _V.v252 = caml_string_of_bytes(_V.v248)
                                          return _V.v252
                                        else
                                          if _next_block == 718 then
                                            return _V.v204
                                          else
                                            break
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v176 = caml_make_closure(1, function(v203)
        -- Hoisted variables (81 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v254 = nil
        _V.v255 = nil
        _V.v256 = nil
        _V.v257 = nil
        _V.v258 = nil
        _V.v259 = nil
        _V.v260 = nil
        _V.v261 = nil
        _V.v262 = nil
        _V.v263 = nil
        _V.v264 = nil
        _V.v265 = nil
        _V.v266 = nil
        _V.v267 = nil
        _V.v268 = nil
        _V.v269 = nil
        _V.v270 = nil
        _V.v271 = nil
        _V.v272 = nil
        _V.v273 = nil
        _V.v274 = nil
        _V.v275 = nil
        _V.v276 = nil
        _V.v277 = nil
        _V.v278 = nil
        _V.v279 = nil
        _V.v280 = nil
        _V.v281 = nil
        _V.v282 = nil
        _V.v283 = nil
        _V.v284 = nil
        _V.v203 = v203
        local _next_block = 102
        while true do
          if _next_block == 102 then
            _V.v204 = caml_bytes_unsafe_get(_V.v268, _V.v282)
            _V.v205 = 32 <= _V.v204
            if _V.v205 then
              _next_block = 103
            else
              _next_block = 106
            end
          else
            if _next_block == 103 then
              _V.v206 = _V.v204 + -34
              _V.v207 = 58 < _V.v206
              if _V.v207 then
                _next_block = 105
              else
                _next_block = 104
              end
            else
              if _next_block == 104 then
                _V.v208 = _V.v206 + -1
                _V.v209 = 56 < _V.v208
                if _V.v209 then
                  _next_block = 110
                else
                  _next_block = 111
                end
              else
                if _next_block == 105 then
                  _V.v210 = 93 <= _V.v206
                  if _V.v210 then
                    _next_block = 109
                  else
                    _next_block = 111
                  end
                else
                  if _next_block == 106 then
                    _V.v211 = 11 <= _V.v204
                    if _V.v211 then
                      _next_block = 107
                    else
                      _next_block = 108
                    end
                  else
                    if _next_block == 107 then
                      _V.v212 = 13 == _V.v204
                      if _V.v212 then
                        _next_block = 110
                      else
                        _next_block = 109
                      end
                    else
                      if _next_block == 108 then
                        _V.v213 = 8 <= _V.v204
                        if _V.v213 then
                          _next_block = 110
                        else
                          _next_block = 109
                        end
                      else
                        if _next_block == 109 then
                          _V.v214 = 4
                          -- Block arg: v285 = v214 (captured)
                          _V.v285 = _V.v214
                          _next_block = 112
                        else
                          if _next_block == 110 then
                            _V.v215 = 2
                            -- Block arg: v285 = v215 (captured)
                            _V.v285 = _V.v215
                            _next_block = 112
                          else
                            if _next_block == 111 then
                              _V.v216 = 1
                              -- Block arg: v285 = v216 (captured)
                              _V.v285 = _V.v216
                              _next_block = 112
                            else
                              if _next_block == 112 then
                                _V.v217 = _V.v281 + _V.v285
                                _V.v218 = _V.v282 + 1
                                _V.v219 = _V.v272 ~= _V.v282
                                if _V.v219 then
                                  -- Block arg: v281 = v217 (captured)
                                  _V.v281 = _V.v217
                                  -- Block arg: v282 = v218 (captured)
                                  _V.v282 = _V.v218
                                  _next_block = 102
                                else
                                  -- Block arg: v286 = v217 (captured)
                                  _V.v286 = _V.v217
                                  _next_block = 113
                                end
                              else
                                if _next_block == 113 then
                                  _V.v220 = caml_ml_bytes_length(_V.v268)
                                  _V.v221 = _V.v286 == _V.v220
                                  if _V.v221 then
                                    -- Block arg: v287 = v268 (captured)
                                    _V.v287 = _V.v268
                                    _next_block = 806
                                  else
                                    _next_block = 115
                                  end
                                else
                                  if _next_block == 115 then
                                    _V.v222 = caml_create_bytes(_V.v286)
                                    _V.v223 = 0
                                    _V.v224 = 0
                                    _V.v225 = caml_ml_bytes_length(_V.v268)
                                    _V.v226 = _V.v225 + -1
                                    _V.v227 = _V.v226 < 0
                                    if _V.v227 then
                                      -- Block arg: v287 = v222 (captured)
                                      _V.v287 = _V.v222
                                      _next_block = 806
                                    else
                                      -- Block arg: v283 = v223 (captured)
                                      _V.v283 = _V.v223
                                      -- Block arg: v284 = v224 (captured)
                                      _V.v284 = _V.v224
                                      _next_block = 116
                                    end
                                  else
                                    if _next_block == 116 then
                                      _V.v228 = caml_bytes_unsafe_get(_V.v268, _V.v284)
                                      _V.v229 = 35 <= _V.v228
                                      if _V.v229 then
                                        _next_block = 117
                                      else
                                        _next_block = 119
                                      end
                                    else
                                      if _next_block == 117 then
                                        _V.v230 = 92 == _V.v228
                                        if _V.v230 then
                                          _next_block = 128
                                        else
                                          _next_block = 118
                                        end
                                      else
                                        if _next_block == 118 then
                                          _V.v231 = 127 <= _V.v228
                                          if _V.v231 then
                                            _next_block = 127
                                          else
                                            _next_block = 129
                                          end
                                        else
                                          if _next_block == 119 then
                                            _V.v232 = 32 <= _V.v228
                                            if _V.v232 then
                                              _next_block = 120
                                            else
                                              _next_block = 121
                                            end
                                          else
                                            if _next_block == 120 then
                                              _V.v233 = 34 <= _V.v228
                                              if _V.v233 then
                                                _next_block = 128
                                              else
                                                _next_block = 129
                                              end
                                            else
                                              if _next_block == 121 then
                                                _V.v234 = 14 <= _V.v228
                                                if _V.v234 then
                                                  _next_block = 127
                                                else
                                                  _next_block = 122
                                                end
                                              else
                                                if _next_block == 122 then
                                                  if _V.v228 == 0 then
                                                    _next_block = 127
                                                  else
                                                    if _V.v228 == 1 then
                                                      _next_block = 127
                                                    else
                                                      if _V.v228 == 2 then
                                                        _next_block = 127
                                                      else
                                                        if _V.v228 == 3 then
                                                          _next_block = 127
                                                        else
                                                          if _V.v228 == 4 then
                                                            _next_block = 127
                                                          else
                                                            if _V.v228 == 5 then
                                                              _next_block = 127
                                                            else
                                                              if _V.v228 == 6 then
                                                                _next_block = 127
                                                              else
                                                                if _V.v228 == 7 then
                                                                  _next_block = 127
                                                                else
                                                                  if _V.v228 == 8 then
                                                                    _next_block = 123
                                                                  else
                                                                    if _V.v228 == 9 then
                                                                      _next_block = 124
                                                                    else
                                                                      if _V.v228 == 10 then
                                                                        _next_block = 125
                                                                      else
                                                                        if _V.v228 == 11 then
                                                                          _next_block = 127
                                                                        else
                                                                          if _V.v228 == 12 then
                                                                            _next_block = 127
                                                                          else
                                                                            if _V.v228 == 13 then
                                                                              _next_block = 126
                                                                            else
                                                                              _next_block = 127
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                else
                                                  if _next_block == 123 then
                                                    _V.v235 = caml_bytes_unsafe_set(_V.v222, _V.v283, 92)
                                                    _V.v236 = _V.v283 + 1
                                                    _V.v237 = caml_bytes_unsafe_set(_V.v222, _V.v236, 98)
                                                    -- Block arg: v288 = v236 (captured)
                                                    _V.v288 = _V.v236
                                                    _next_block = 130
                                                  else
                                                    if _next_block == 124 then
                                                      _V.v238 = caml_bytes_unsafe_set(_V.v222, _V.v283, 92)
                                                      _V.v239 = _V.v283 + 1
                                                      _V.v240 = caml_bytes_unsafe_set(_V.v222, _V.v239, 116)
                                                      -- Block arg: v288 = v239 (captured)
                                                      _V.v288 = _V.v239
                                                      _next_block = 130
                                                    else
                                                      if _next_block == 125 then
                                                        _V.v241 = caml_bytes_unsafe_set(_V.v222, _V.v283, 92)
                                                        _V.v242 = _V.v283 + 1
                                                        _V.v243 = caml_bytes_unsafe_set(_V.v222, _V.v242, 110)
                                                        -- Block arg: v288 = v242 (captured)
                                                        _V.v288 = _V.v242
                                                        _next_block = 130
                                                      else
                                                        if _next_block == 126 then
                                                          _V.v244 = caml_bytes_unsafe_set(_V.v222, _V.v283, 92)
                                                          _V.v245 = _V.v283 + 1
                                                          _V.v246 = caml_bytes_unsafe_set(_V.v222, _V.v245, 114)
                                                          -- Block arg: v288 = v245 (captured)
                                                          _V.v288 = _V.v245
                                                          _next_block = 130
                                                        else
                                                          if _next_block == 127 then
                                                            _V.v247 = caml_bytes_unsafe_set(_V.v222, _V.v283, 92)
                                                            _V.v248 = _V.v283 + 1
                                                            _V.v249 = caml_direct_int_div(_V.v228, 100)
                                                            _V.v250 = 48 + _V.v249
                                                            _V.v251 = caml_bytes_unsafe_set(_V.v222, _V.v248, _V.v250)
                                                            _V.v252 = _V.v248 + 1
                                                            _V.v253 = caml_direct_int_div(_V.v228, 10)
                                                            _V.v254 = caml_direct_int_mod(_V.v253, 10)
                                                            _V.v255 = 48 + _V.v254
                                                            _V.v256 = caml_bytes_unsafe_set(_V.v222, _V.v252, _V.v255)
                                                            _V.v257 = _V.v252 + 1
                                                            _V.v258 = caml_direct_int_mod(_V.v228, 10)
                                                            _V.v259 = 48 + _V.v258
                                                            _V.v260 = caml_bytes_unsafe_set(_V.v222, _V.v257, _V.v259)
                                                            -- Block arg: v288 = v257 (captured)
                                                            _V.v288 = _V.v257
                                                            _next_block = 130
                                                          else
                                                            if _next_block == 128 then
                                                              _V.v261 = caml_bytes_unsafe_set(_V.v222, _V.v283, 92)
                                                              _V.v262 = _V.v283 + 1
                                                              _V.v263 = caml_bytes_unsafe_set(_V.v222, _V.v262, _V.v228)
                                                              -- Block arg: v288 = v262 (captured)
                                                              _V.v288 = _V.v262
                                                              _next_block = 130
                                                            else
                                                              if _next_block == 129 then
                                                                _V.v264 = caml_bytes_unsafe_set(_V.v222, _V.v283, _V.v228)
                                                                -- Block arg: v288 = v283 (captured)
                                                                _V.v288 = _V.v283
                                                                _next_block = 130
                                                              else
                                                                if _next_block == 130 then
                                                                  _V.v265 = _V.v288 + 1
                                                                  _V.v266 = _V.v284 + 1
                                                                  _V.v267 = _V.v226 ~= _V.v284
                                                                  if _V.v267 then
                                                                    -- Block arg: v283 = v265 (captured)
                                                                    _V.v283 = _V.v265
                                                                    -- Block arg: v284 = v266 (captured)
                                                                    _V.v284 = _V.v266
                                                                    _next_block = 116
                                                                  else
                                                                    -- Block arg: v287 = v222 (captured)
                                                                    _V.v287 = _V.v222
                                                                    _next_block = 806
                                                                  end
                                                                else
                                                                  if _next_block == 701 then
                                                                    _V.v268 = caml_bytes_of_string(_V.v203)
                                                                    _V.v269 = 0
                                                                    _V.v270 = 0
                                                                    _V.v271 = caml_ml_bytes_length(_V.v268)
                                                                    _V.v272 = _V.v271 + -1
                                                                    _V.v273 = _V.v272 < 0
                                                                    if _V.v273 then
                                                                      -- Block arg: v286 = v269 (captured)
                                                                      _V.v286 = _V.v269
                                                                      _next_block = 113
                                                                    else
                                                                      -- Block arg: v281 = v269 (captured)
                                                                      _V.v281 = _V.v269
                                                                      -- Block arg: v282 = v270 (captured)
                                                                      _V.v282 = _V.v270
                                                                      _next_block = 102
                                                                    end
                                                                  else
                                                                    if _next_block == 806 then
                                                                      _V.v274 = caml_string_of_bytes(_V.v287)
                                                                      _V.v275 = caml_ml_string_length(_V.v274)
                                                                      _V.v276 = 34
                                                                      _V.v277 = _V.v275 + 2
                                                                      _V.v278 = _V.v154(_V.v277, _V.v276)
                                                                      _V.v279 = caml_blit_string(_V.v274, 0, _V.v278, 1, _V.v275)
                                                                      _V.v280 = caml_string_of_bytes(_V.v278)
                                                                      return _V.v280
                                                                    else
                                                                      break
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v177 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (30 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 648
        while true do
          if _next_block == 648 then
            _V.v205 = _V.v136(_V.v204)
            _V.v206 = _V.v56[2]
            _V.v207 = _V.v203[3]
            if _V.v207 == 0 then
              _next_block = 776
            else
              if _V.v207 == 1 then
                _next_block = 777
              else
                if _V.v207 == 2 then
                  _next_block = 778
                else
                  if _V.v207 == 3 then
                    _next_block = 779
                  else
                    if _V.v207 == 4 then
                      _next_block = 780
                    else
                      if _V.v207 == 5 then
                        -- Block arg: v235 = v206 (captured)
                        _V.v235 = _V.v206
                        _next_block = 815
                      else
                        if _V.v207 == 6 then
                          _next_block = 782
                        else
                          if _V.v207 == 7 then
                            _next_block = 783
                          else
                            if _V.v207 == 8 then
                              _next_block = 784
                            else
                              _next_block = 776
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          else
            if _next_block == 768 then
              _V.v208 = 43
              _V.v209 = _V.v160(_V.v231, _V.v208)
              _next_block = 770
            else
              if _next_block == 769 then
                _V.v210 = 32
                _V.v211 = _V.v160(_V.v231, _V.v210)
                _next_block = 770
              else
                if _next_block == 770 then
                  _V.v212 = _V.v203[3]
                  _V.v213 = 8 <= _V.v212
                  if _V.v213 then
                    _next_block = 771
                  else
                    _next_block = 814
                  end
                else
                  if _next_block == 771 then
                    _V.v214 = 35
                    _V.v215 = _V.v160(_V.v231, _V.v214)
                    _next_block = 814
                  else
                    if _next_block == 776 then
                      _V.v216 = 102
                      -- Block arg: v235 = v216 (captured)
                      _V.v235 = _V.v216
                      _next_block = 815
                    else
                      if _next_block == 777 then
                        _V.v217 = 101
                        -- Block arg: v235 = v217 (captured)
                        _V.v235 = _V.v217
                        _next_block = 815
                      else
                        if _next_block == 778 then
                          _V.v218 = 69
                          -- Block arg: v235 = v218 (captured)
                          _V.v235 = _V.v218
                          _next_block = 815
                        else
                          if _next_block == 779 then
                            _V.v219 = 103
                            -- Block arg: v235 = v219 (captured)
                            _V.v235 = _V.v219
                            _next_block = 815
                          else
                            if _next_block == 780 then
                              _V.v220 = 71
                              -- Block arg: v235 = v220 (captured)
                              _V.v235 = _V.v220
                              _next_block = 815
                            else
                              if _next_block == 782 then
                                _V.v221 = 104
                                -- Block arg: v235 = v221 (captured)
                                _V.v235 = _V.v221
                                _next_block = 815
                              else
                                if _next_block == 783 then
                                  _V.v222 = 72
                                  -- Block arg: v235 = v222 (captured)
                                  _V.v235 = _V.v222
                                  _next_block = 815
                                else
                                  if _next_block == 784 then
                                    _V.v223 = 70
                                    -- Block arg: v235 = v223 (captured)
                                    _V.v235 = _V.v223
                                    _next_block = 815
                                  else
                                    if _next_block == 814 then
                                      _V.v224 = 46
                                      _V.v225 = _V.v160(_V.v231, _V.v224)
                                      _V.v226 = caml_caml_format_int_special(_V.v205)
                                      _V.v227 = _V.v161(_V.v231, _V.v226)
                                      _V.v228 = _V.v160(_V.v231, _V.v235)
                                      _V.v229 = _V.v162(_V.v231)
                                      return _V.v229
                                    else
                                      if _next_block == 815 then
                                        _V.v230 = 16
                                        _V.v231 = _V.v158(_V.v230)
                                        _V.v232 = 37
                                        _V.v233 = _V.v160(_V.v231, _V.v232)
                                        _V.v234 = _V.v203[2]
                                        if _V.v234 == 0 then
                                          _next_block = 770
                                        else
                                          if _V.v234 == 1 then
                                            _next_block = 768
                                          else
                                            if _V.v234 == 2 then
                                              _next_block = 769
                                            else
                                              _next_block = 770
                                            end
                                          end
                                        end
                                      else
                                        break
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v178 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (44 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 634
        while true do
          if _next_block == 634 then
            _V.v205 = 13 <= _V.v203
            if _V.v205 then
              _next_block = 635
            else
              _next_block = 647
            end
          else
            if _next_block == 635 then
              _V.v206 = 0
              _V.v207 = 0
              _V.v208 = caml_ml_string_length(_V.v204)
              _V.v209 = _V.v208 + -1
              _V.v210 = _V.v209 < 0
              if _V.v210 then
                -- Block arg: v249 = v206 (captured)
                _V.v249 = _V.v206
                _next_block = 639
              else
                -- Block arg: v245 = v206 (captured)
                _V.v245 = _V.v206
                -- Block arg: v246 = v207 (captured)
                _V.v246 = _V.v207
                _next_block = 636
              end
            else
              if _next_block == 636 then
                _V.v211 = caml_string_unsafe_get(_V.v204, _V.v246)
                _V.v212 = _V.v211 + -48
                _V.v213 = 9 < _V.v212
                if _V.v213 then
                  -- Block arg: v250 = v245 (captured)
                  _V.v250 = _V.v245
                  _next_block = 638
                else
                  _next_block = 637
                end
              else
                if _next_block == 637 then
                  _V.v214 = _V.v245 + 1
                  -- Block arg: v250 = v214 (captured)
                  _V.v250 = _V.v214
                  _next_block = 638
                else
                  if _next_block == 638 then
                    _V.v215 = _V.v246 + 1
                    _V.v216 = _V.v209 ~= _V.v246
                    if _V.v216 then
                      -- Block arg: v245 = v250 (captured)
                      _V.v245 = _V.v250
                      -- Block arg: v246 = v215 (captured)
                      _V.v246 = _V.v215
                      _next_block = 636
                    else
                      -- Block arg: v249 = v250 (captured)
                      _V.v249 = _V.v250
                      _next_block = 639
                    end
                  else
                    if _next_block == 639 then
                      _V.v217 = _V.v249 + -1
                      _V.v218 = caml_direct_int_div(_V.v217, 3)
                      _V.v219 = caml_ml_string_length(_V.v204)
                      _V.v220 = _V.v219 + _V.v218
                      _V.v221 = caml_create_bytes(_V.v220)
                      _V.v222 = 0
                      _V.v223 = {0, _V.v222}
                      _V.v224 = caml_make_closure(1, function(v251)
                        -- Hoisted variables (2 total, using inherited _V table)
                        _V.v252 = nil
                        _V.v253 = nil
                        _V.v251 = v251
                        local _next_block = 633
                        while true do
                          if _next_block == 633 then
                            _V.v252 = _V.v223[2]
                            _V.v253 = caml_bytes_set(_V.v221, _V.v252, _V.v251)
                            _V.v223[1] = _V.v223[1] + 1
                            return _V.dummy
                          else
                            break
                          end
                        end
                      end)
                      _V.v225 = _V.v249 + -1
                      _V.v226 = caml_direct_int_mod(_V.v225, 3)
                      _V.v227 = _V.v226 + 1
                      _V.v228 = 0
                      _V.v229 = caml_ml_string_length(_V.v204)
                      _V.v230 = _V.v229 + -1
                      _V.v231 = _V.v230 < 0
                      if _V.v231 then
                        _next_block = 646
                      else
                        -- Block arg: v247 = v227 (captured)
                        _V.v247 = _V.v227
                        -- Block arg: v248 = v228 (captured)
                        _V.v248 = _V.v228
                        _next_block = 640
                      end
                    else
                      if _next_block == 640 then
                        _V.v232 = caml_string_unsafe_get(_V.v204, _V.v248)
                        _V.v233 = _V.v232 + -48
                        _V.v234 = 9 < _V.v233
                        if _V.v234 then
                          _next_block = 641
                        else
                          _next_block = 642
                        end
                      else
                        if _next_block == 641 then
                          _V.v235 = _V.v224(_V.v232)
                          -- Block arg: v251 = v247 (captured)
                          _V.v251 = _V.v247
                          _next_block = 645
                        else
                          if _next_block == 642 then
                            _V.v236 = 0 == _V.v247
                            if _V.v236 then
                              _next_block = 643
                            else
                              -- Block arg: v252 = v247 (captured)
                              _V.v252 = _V.v247
                              _next_block = 644
                            end
                          else
                            if _next_block == 643 then
                              _V.v237 = 95
                              _V.v238 = _V.v224(_V.v237)
                              _V.v239 = 3
                              -- Block arg: v252 = v239 (captured)
                              _V.v252 = _V.v239
                              _next_block = 644
                            else
                              if _next_block == 644 then
                                _V.v240 = _V.v252 + -1
                                _V.v241 = _V.v224(_V.v232)
                                -- Block arg: v251 = v240 (captured)
                                _V.v251 = _V.v240
                                _next_block = 645
                              else
                                if _next_block == 645 then
                                  _V.v242 = _V.v248 + 1
                                  _V.v243 = _V.v230 ~= _V.v248
                                  if _V.v243 then
                                    -- Block arg: v247 = v251 (captured)
                                    _V.v247 = _V.v251
                                    -- Block arg: v248 = v242 (captured)
                                    _V.v248 = _V.v242
                                    _next_block = 640
                                  else
                                    _next_block = 646
                                  end
                                else
                                  if _next_block == 646 then
                                    _V.v244 = caml_string_of_bytes(_V.v221)
                                    return _V.v244
                                  else
                                    if _next_block == 647 then
                                      return _V.v204
                                    else
                                      break
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v179 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (2 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 632
        while true do
          if _next_block == 632 then
            if _V.v203 == 0 then
              -- Block arg: v207 = v106 (captured)
              _V.v207 = _V.v106
              _next_block = 802
            else
              if _V.v203 == 1 then
                -- Block arg: v207 = v96 (captured)
                _V.v207 = _V.v96
                _next_block = 802
              else
                if _V.v203 == 2 then
                  -- Block arg: v207 = v97 (captured)
                  _V.v207 = _V.v97
                  _next_block = 802
                else
                  if _V.v203 == 3 then
                    -- Block arg: v207 = v107 (captured)
                    _V.v207 = _V.v107
                    _next_block = 802
                  else
                    if _V.v203 == 4 then
                      -- Block arg: v207 = v98 (captured)
                      _V.v207 = _V.v98
                      _next_block = 802
                    else
                      if _V.v203 == 5 then
                        -- Block arg: v207 = v99 (captured)
                        _V.v207 = _V.v99
                        _next_block = 802
                      else
                        if _V.v203 == 6 then
                          -- Block arg: v207 = v100 (captured)
                          _V.v207 = _V.v100
                          _next_block = 802
                        else
                          if _V.v203 == 7 then
                            -- Block arg: v207 = v101 (captured)
                            _V.v207 = _V.v101
                            _next_block = 802
                          else
                            if _V.v203 == 8 then
                              -- Block arg: v207 = v102 (captured)
                              _V.v207 = _V.v102
                              _next_block = 802
                            else
                              if _V.v203 == 9 then
                                -- Block arg: v207 = v103 (captured)
                                _V.v207 = _V.v103
                                _next_block = 802
                              else
                                if _V.v203 == 10 then
                                  -- Block arg: v207 = v104 (captured)
                                  _V.v207 = _V.v104
                                  _next_block = 802
                                else
                                  if _V.v203 == 11 then
                                    -- Block arg: v207 = v105 (captured)
                                    _V.v207 = _V.v105
                                    _next_block = 802
                                  else
                                    if _V.v203 == 12 then
                                      -- Block arg: v207 = v108 (captured)
                                      _V.v207 = _V.v108
                                      _next_block = 802
                                    else
                                      if _V.v203 == 13 then
                                        -- Block arg: v207 = v106 (captured)
                                        _V.v207 = _V.v106
                                        _next_block = 802
                                      else
                                        if _V.v203 == 14 then
                                          -- Block arg: v207 = v107 (captured)
                                          _V.v207 = _V.v107
                                          _next_block = 802
                                        else
                                          if _V.v203 == 15 then
                                            -- Block arg: v207 = v108 (captured)
                                            _V.v207 = _V.v108
                                            _next_block = 802
                                          else
                                            -- Block arg: v207 = v106 (captured)
                                            _V.v207 = _V.v106
                                            _next_block = 802
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          else
            if _next_block == 802 then
              _V.v205 = caml_format_int(_V.v207, _V.v204)
              _V.v206 = _V.v178(_V.v203, _V.v205)
              return _V.v206
            else
              break
            end
          end
        end
      end)
      _V.v180 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (2 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 631
        while true do
          if _next_block == 631 then
            if _V.v203 == 0 then
              -- Block arg: v207 = v80 (captured)
              _V.v207 = _V.v80
              _next_block = 803
            else
              if _V.v203 == 1 then
                -- Block arg: v207 = v70 (captured)
                _V.v207 = _V.v70
                _next_block = 803
              else
                if _V.v203 == 2 then
                  -- Block arg: v207 = v71 (captured)
                  _V.v207 = _V.v71
                  _next_block = 803
                else
                  if _V.v203 == 3 then
                    -- Block arg: v207 = v81 (captured)
                    _V.v207 = _V.v81
                    _next_block = 803
                  else
                    if _V.v203 == 4 then
                      -- Block arg: v207 = v72 (captured)
                      _V.v207 = _V.v72
                      _next_block = 803
                    else
                      if _V.v203 == 5 then
                        -- Block arg: v207 = v73 (captured)
                        _V.v207 = _V.v73
                        _next_block = 803
                      else
                        if _V.v203 == 6 then
                          -- Block arg: v207 = v74 (captured)
                          _V.v207 = _V.v74
                          _next_block = 803
                        else
                          if _V.v203 == 7 then
                            -- Block arg: v207 = v75 (captured)
                            _V.v207 = _V.v75
                            _next_block = 803
                          else
                            if _V.v203 == 8 then
                              -- Block arg: v207 = v76 (captured)
                              _V.v207 = _V.v76
                              _next_block = 803
                            else
                              if _V.v203 == 9 then
                                -- Block arg: v207 = v77 (captured)
                                _V.v207 = _V.v77
                                _next_block = 803
                              else
                                if _V.v203 == 10 then
                                  -- Block arg: v207 = v78 (captured)
                                  _V.v207 = _V.v78
                                  _next_block = 803
                                else
                                  if _V.v203 == 11 then
                                    -- Block arg: v207 = v79 (captured)
                                    _V.v207 = _V.v79
                                    _next_block = 803
                                  else
                                    if _V.v203 == 12 then
                                      -- Block arg: v207 = v82 (captured)
                                      _V.v207 = _V.v82
                                      _next_block = 803
                                    else
                                      if _V.v203 == 13 then
                                        -- Block arg: v207 = v80 (captured)
                                        _V.v207 = _V.v80
                                        _next_block = 803
                                      else
                                        if _V.v203 == 14 then
                                          -- Block arg: v207 = v81 (captured)
                                          _V.v207 = _V.v81
                                          _next_block = 803
                                        else
                                          if _V.v203 == 15 then
                                            -- Block arg: v207 = v82 (captured)
                                            _V.v207 = _V.v82
                                            _next_block = 803
                                          else
                                            -- Block arg: v207 = v80 (captured)
                                            _V.v207 = _V.v80
                                            _next_block = 803
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          else
            if _next_block == 803 then
              _V.v205 = caml_int32_format(_V.v207, _V.v204)
              _V.v206 = _V.v178(_V.v203, _V.v205)
              return _V.v206
            else
              break
            end
          end
        end
      end)
      _V.v181 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (2 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 630
        while true do
          if _next_block == 630 then
            if _V.v203 == 0 then
              -- Block arg: v207 = v67 (captured)
              _V.v207 = _V.v67
              _next_block = 804
            else
              if _V.v203 == 1 then
                -- Block arg: v207 = v57 (captured)
                _V.v207 = _V.v57
                _next_block = 804
              else
                if _V.v203 == 2 then
                  -- Block arg: v207 = v58 (captured)
                  _V.v207 = _V.v58
                  _next_block = 804
                else
                  if _V.v203 == 3 then
                    -- Block arg: v207 = v68 (captured)
                    _V.v207 = _V.v68
                    _next_block = 804
                  else
                    if _V.v203 == 4 then
                      -- Block arg: v207 = v59 (captured)
                      _V.v207 = _V.v59
                      _next_block = 804
                    else
                      if _V.v203 == 5 then
                        -- Block arg: v207 = v60 (captured)
                        _V.v207 = _V.v60
                        _next_block = 804
                      else
                        if _V.v203 == 6 then
                          -- Block arg: v207 = v61 (captured)
                          _V.v207 = _V.v61
                          _next_block = 804
                        else
                          if _V.v203 == 7 then
                            -- Block arg: v207 = v62 (captured)
                            _V.v207 = _V.v62
                            _next_block = 804
                          else
                            if _V.v203 == 8 then
                              -- Block arg: v207 = v63 (captured)
                              _V.v207 = _V.v63
                              _next_block = 804
                            else
                              if _V.v203 == 9 then
                                -- Block arg: v207 = v64 (captured)
                                _V.v207 = _V.v64
                                _next_block = 804
                              else
                                if _V.v203 == 10 then
                                  -- Block arg: v207 = v65 (captured)
                                  _V.v207 = _V.v65
                                  _next_block = 804
                                else
                                  if _V.v203 == 11 then
                                    -- Block arg: v207 = v66 (captured)
                                    _V.v207 = _V.v66
                                    _next_block = 804
                                  else
                                    if _V.v203 == 12 then
                                      -- Block arg: v207 = v69 (captured)
                                      _V.v207 = _V.v69
                                      _next_block = 804
                                    else
                                      if _V.v203 == 13 then
                                        -- Block arg: v207 = v67 (captured)
                                        _V.v207 = _V.v67
                                        _next_block = 804
                                      else
                                        if _V.v203 == 14 then
                                          -- Block arg: v207 = v68 (captured)
                                          _V.v207 = _V.v68
                                          _next_block = 804
                                        else
                                          if _V.v203 == 15 then
                                            -- Block arg: v207 = v69 (captured)
                                            _V.v207 = _V.v69
                                            _next_block = 804
                                          else
                                            -- Block arg: v207 = v67 (captured)
                                            _V.v207 = _V.v67
                                            _next_block = 804
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          else
            if _next_block == 804 then
              _V.v205 = caml_nativeint_format(_V.v207, _V.v204)
              _V.v206 = _V.v178(_V.v203, _V.v205)
              return _V.v206
            else
              break
            end
          end
        end
      end)
      _V.v182 = caml_make_closure(2, function(v203, v204)
        -- Hoisted variables (2 total, using inherited _V table)
        _V.v205 = nil
        _V.v206 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 629
        while true do
          if _next_block == 629 then
            if _V.v203 == 0 then
              -- Block arg: v207 = v93 (captured)
              _V.v207 = _V.v93
              _next_block = 805
            else
              if _V.v203 == 1 then
                -- Block arg: v207 = v83 (captured)
                _V.v207 = _V.v83
                _next_block = 805
              else
                if _V.v203 == 2 then
                  -- Block arg: v207 = v84 (captured)
                  _V.v207 = _V.v84
                  _next_block = 805
                else
                  if _V.v203 == 3 then
                    -- Block arg: v207 = v94 (captured)
                    _V.v207 = _V.v94
                    _next_block = 805
                  else
                    if _V.v203 == 4 then
                      -- Block arg: v207 = v85 (captured)
                      _V.v207 = _V.v85
                      _next_block = 805
                    else
                      if _V.v203 == 5 then
                        -- Block arg: v207 = v86 (captured)
                        _V.v207 = _V.v86
                        _next_block = 805
                      else
                        if _V.v203 == 6 then
                          -- Block arg: v207 = v87 (captured)
                          _V.v207 = _V.v87
                          _next_block = 805
                        else
                          if _V.v203 == 7 then
                            -- Block arg: v207 = v88 (captured)
                            _V.v207 = _V.v88
                            _next_block = 805
                          else
                            if _V.v203 == 8 then
                              -- Block arg: v207 = v89 (captured)
                              _V.v207 = _V.v89
                              _next_block = 805
                            else
                              if _V.v203 == 9 then
                                -- Block arg: v207 = v90 (captured)
                                _V.v207 = _V.v90
                                _next_block = 805
                              else
                                if _V.v203 == 10 then
                                  -- Block arg: v207 = v91 (captured)
                                  _V.v207 = _V.v91
                                  _next_block = 805
                                else
                                  if _V.v203 == 11 then
                                    -- Block arg: v207 = v92 (captured)
                                    _V.v207 = _V.v92
                                    _next_block = 805
                                  else
                                    if _V.v203 == 12 then
                                      -- Block arg: v207 = v95 (captured)
                                      _V.v207 = _V.v95
                                      _next_block = 805
                                    else
                                      if _V.v203 == 13 then
                                        -- Block arg: v207 = v93 (captured)
                                        _V.v207 = _V.v93
                                        _next_block = 805
                                      else
                                        if _V.v203 == 14 then
                                          -- Block arg: v207 = v94 (captured)
                                          _V.v207 = _V.v94
                                          _next_block = 805
                                        else
                                          if _V.v203 == 15 then
                                            -- Block arg: v207 = v95 (captured)
                                            _V.v207 = _V.v95
                                            _next_block = 805
                                          else
                                            -- Block arg: v207 = v93 (captured)
                                            _V.v207 = _V.v93
                                            _next_block = 805
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          else
            if _next_block == 805 then
              _V.v205 = caml_int64_format(_V.v207, _V.v204)
              _V.v206 = _V.v178(_V.v203, _V.v205)
              return _V.v206
            else
              break
            end
          end
        end
      end)
      _V.v183 = caml_make_closure(3, function(v203, v204, v205)
        -- Hoisted variables (45 total, using inherited _V table)
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        local _next_block = 81
        while true do
          if _next_block == 81 then
            _V.v206 = _V.v211 + -32
            -- Block arg: v251 = v206 (captured)
            _V.v251 = _V.v206
            _next_block = 807
          else
            if _next_block == 99 then
              _V.v207 = caml_create_bytes(_V.v236)
              _V.v208 = 0
              _V.v209 = _V.v236 + -1
              _V.v210 = _V.v209 < 0
              if _V.v210 then
                -- Block arg: v252 = v207 (captured)
                _V.v252 = _V.v207
                _next_block = 808
              else
                -- Block arg: v249 = v208 (captured)
                _V.v249 = _V.v208
                _next_block = 100
              end
            else
              if _next_block == 100 then
                _V.v211 = caml_bytes_unsafe_get(_V.v235, _V.v249)
                _V.v212 = _V.v211 + -97
                _V.v213 = 25 < _V.v212
                if _V.v213 then
                  -- Block arg: v251 = v211 (captured)
                  _V.v251 = _V.v211
                  _next_block = 807
                else
                  _next_block = 81
                end
              else
                if _next_block == 610 then
                  _V.v214 = 0
                  -- Block arg: v253 = v214 (captured)
                  _V.v253 = _V.v214
                  _next_block = 810
                else
                  if _next_block == 611 then
                    _V.v215 = caml_string_get(_V.v228, _V.v250)
                    _V.v216 = _V.v215 + -46
                    _V.v217 = 23 < _V.v216
                    if _V.v217 then
                      _next_block = 613
                    else
                      _next_block = 612
                    end
                  else
                    if _next_block == 612 then
                      _V.v218 = _V.v216 + -1
                      _V.v219 = 21 < _V.v218
                      if _V.v219 then
                        _next_block = 615
                      else
                        _next_block = 614
                      end
                    else
                      if _next_block == 613 then
                        _V.v220 = 55 == _V.v216
                        if _V.v220 then
                          _next_block = 615
                        else
                          _next_block = 614
                        end
                      else
                        if _next_block == 614 then
                          _V.v221 = _V.v250 + 1
                          -- Block arg: v250 = v221 (captured)
                          _V.v250 = _V.v221
                          _next_block = 798
                        else
                          if _next_block == 615 then
                            _V.v222 = 1
                            -- Block arg: v253 = v222 (captured)
                            _V.v253 = _V.v222
                            _next_block = 810
                          else
                            if _next_block == 617 then
                              _V.v223 = _V.v137(_V.v228, _V.v55)
                              -- Block arg: v254 = v223 (captured)
                              _V.v254 = _V.v223
                              _next_block = 816
                            else
                              if _next_block == 623 then
                                _V.v224 = caml_make_closure(1, function(v255)
                                  -- Hoisted variables (5 total, using inherited _V table)
                                  _V.v256 = nil
                                  _V.v257 = nil
                                  _V.v258 = nil
                                  _V.v259 = nil
                                  _V.v260 = nil
                                  _V.v255 = v255
                                  local _next_block = 618
                                  while true do
                                    if _next_block == 618 then
                                      _V.v256 = _V.v203[2]
                                      if _V.v256 == 0 then
                                        _next_block = 619
                                      else
                                        if _V.v256 == 1 then
                                          _next_block = 620
                                        else
                                          if _V.v256 == 2 then
                                            _next_block = 621
                                          else
                                            _next_block = 619
                                          end
                                        end
                                      end
                                    else
                                      if _next_block == 619 then
                                        _V.v257 = 45
                                        -- Block arg: v261 = v257 (captured)
                                        _V.v261 = _V.v257
                                        _next_block = 622
                                      else
                                        if _next_block == 620 then
                                          _V.v258 = 43
                                          -- Block arg: v261 = v258 (captured)
                                          _V.v261 = _V.v258
                                          _next_block = 622
                                        else
                                          if _next_block == 621 then
                                            _V.v259 = 32
                                            -- Block arg: v261 = v259 (captured)
                                            _V.v261 = _V.v259
                                            _next_block = 622
                                          else
                                            if _next_block == 622 then
                                              _V.v260 = caml_hexstring_of_float(_V.v205, _V.v204, _V.v261)
                                              return _V.v260
                                            else
                                              break
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end)
                                _V.v225 = caml_make_closure(1, function(v255)
                                  -- Hoisted variables (4 total, using inherited _V table)
                                  _V.v256 = nil
                                  _V.v257 = nil
                                  _V.v258 = nil
                                  _V.v259 = nil
                                  _V.v255 = v255
                                  local _next_block = 603
                                  while true do
                                    if _next_block == 603 then
                                      _V.v256 = caml_classify_float(_V.v205)
                                      _V.v257 = 3 == _V.v256
                                      if _V.v257 then
                                        _next_block = 607
                                      else
                                        _next_block = 604
                                      end
                                    else
                                      if _next_block == 604 then
                                        _V.v258 = 4 <= _V.v256
                                        if _V.v258 then
                                          _next_block = 605
                                        else
                                          _next_block = 606
                                        end
                                      else
                                        if _next_block == 605 then
                                          return _V.v52
                                        else
                                          if _next_block == 606 then
                                            return _V.v255
                                          else
                                            if _next_block == 607 then
                                              _V.v259 = caml_lt_float(_V.v205, 0)
                                              if _V.v259 then
                                                _next_block = 608
                                              else
                                                _next_block = 609
                                              end
                                            else
                                              if _next_block == 608 then
                                                return _V.v53
                                              else
                                                if _next_block == 609 then
                                                  return _V.v54
                                                else
                                                  break
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end)
                                _V.v226 = _V.v203[3]
                                if _V.v226 == 0 then
                                  _next_block = 628
                                else
                                  if _V.v226 == 1 then
                                    _next_block = 628
                                  else
                                    if _V.v226 == 2 then
                                      _next_block = 628
                                    else
                                      if _V.v226 == 3 then
                                        _next_block = 628
                                      else
                                        if _V.v226 == 4 then
                                          _next_block = 628
                                        else
                                          if _V.v226 == 5 then
                                            _next_block = 624
                                          else
                                            if _V.v226 == 6 then
                                              _next_block = 625
                                            else
                                              if _V.v226 == 7 then
                                                _next_block = 626
                                              else
                                                if _V.v226 == 8 then
                                                  _next_block = 627
                                                else
                                                  _next_block = 628
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              else
                                if _next_block == 624 then
                                  _V.v227 = _V.v177(_V.v203, _V.v204)
                                  _V.v228 = caml_format_float(_V.v227, _V.v205)
                                  _V.v229 = caml_ml_string_length(_V.v228)
                                  _V.v230 = 0
                                  -- Block arg: v250 = v230 (captured)
                                  _V.v250 = _V.v230
                                  _next_block = 798
                                else
                                  if _next_block == 625 then
                                    _V.v231 = 0
                                    _V.v232 = _V.v224(_V.v231)
                                    return _V.v232
                                  else
                                    if _next_block == 626 then
                                      _V.v233 = 0
                                      _V.v234 = _V.v224(_V.v233)
                                      _V.v235 = caml_bytes_of_string(_V.v234)
                                      _V.v236 = caml_ml_bytes_length(_V.v235)
                                      _V.v237 = 0 == _V.v236
                                      if _V.v237 then
                                        -- Block arg: v252 = v235 (captured)
                                        _V.v252 = _V.v235
                                        _next_block = 808
                                      else
                                        _next_block = 99
                                      end
                                    else
                                      if _next_block == 627 then
                                        _V.v238 = 0
                                        _V.v239 = _V.v224(_V.v238)
                                        _V.v240 = _V.v225(_V.v239)
                                        return _V.v240
                                      else
                                        if _next_block == 628 then
                                          _V.v241 = _V.v177(_V.v203, _V.v204)
                                          _V.v242 = caml_format_float(_V.v241, _V.v205)
                                          return _V.v242
                                        else
                                          if _next_block == 798 then
                                            _V.v243 = _V.v250 == _V.v229
                                            if _V.v243 then
                                              _next_block = 610
                                            else
                                              _next_block = 611
                                            end
                                          else
                                            if _next_block == 807 then
                                              _V.v244 = caml_bytes_unsafe_set(_V.v207, _V.v249, _V.v251)
                                              _V.v245 = _V.v249 + 1
                                              _V.v246 = _V.v209 ~= _V.v249
                                              if _V.v246 then
                                                -- Block arg: v249 = v245 (captured)
                                                _V.v249 = _V.v245
                                                _next_block = 100
                                              else
                                                -- Block arg: v252 = v207 (captured)
                                                _V.v252 = _V.v207
                                                _next_block = 808
                                              end
                                            else
                                              if _next_block == 808 then
                                                _V.v247 = caml_string_of_bytes(_V.v252)
                                                return _V.v247
                                              else
                                                if _next_block == 810 then
                                                  if _V.v253 then
                                                    -- Block arg: v254 = v228 (captured)
                                                    _V.v254 = _V.v228
                                                    _next_block = 816
                                                  else
                                                    _next_block = 617
                                                  end
                                                else
                                                  if _next_block == 816 then
                                                    _V.v248 = _V.v225(_V.v254)
                                                    return _V.v248
                                                  else
                                                    break
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v184 = caml_make_closure(4, function(counter, v203, v204, v205)
        -- Block arg: v206 = v203 (local)
        _V.v206 = v203
        -- Block arg: v207 = v204 (local)
        _V.v207 = v204
        -- Block arg: v208 = v205 (local)
        _V.v208 = v205
        -- Hoisted variables (144 total, using inherited _V table)
        _V.counter1 = nil
        _V.counter2 = nil
        _V.counter3 = nil
        _V.counter4 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v250 = nil
        _V.v251 = nil
        _V.v252 = nil
        _V.v253 = nil
        _V.v254 = nil
        _V.v255 = nil
        _V.v256 = nil
        _V.v257 = nil
        _V.v258 = nil
        _V.v259 = nil
        _V.v260 = nil
        _V.v261 = nil
        _V.v262 = nil
        _V.v263 = nil
        _V.v264 = nil
        _V.v265 = nil
        _V.v266 = nil
        _V.v267 = nil
        _V.v268 = nil
        _V.v269 = nil
        _V.v270 = nil
        _V.v271 = nil
        _V.v272 = nil
        _V.v273 = nil
        _V.v274 = nil
        _V.v275 = nil
        _V.v276 = nil
        _V.v277 = nil
        _V.v278 = nil
        _V.v279 = nil
        _V.v280 = nil
        _V.v281 = nil
        _V.v282 = nil
        _V.v283 = nil
        _V.v284 = nil
        _V.v285 = nil
        _V.v286 = nil
        _V.v287 = nil
        _V.v288 = nil
        _V.v289 = nil
        _V.v290 = nil
        _V.v291 = nil
        _V.v292 = nil
        _V.v293 = nil
        _V.v294 = nil
        _V.v295 = nil
        _V.v296 = nil
        _V.v297 = nil
        _V.v298 = nil
        _V.v299 = nil
        _V.v300 = nil
        _V.v301 = nil
        _V.v302 = nil
        _V.v303 = nil
        _V.v304 = nil
        _V.v305 = nil
        _V.v306 = nil
        _V.v307 = nil
        _V.v308 = nil
        _V.v309 = nil
        _V.v310 = nil
        _V.v311 = nil
        _V.v312 = nil
        _V.v313 = nil
        _V.v314 = nil
        _V.v315 = nil
        _V.v316 = nil
        _V.v317 = nil
        _V.v318 = nil
        _V.v319 = nil
        _V.v320 = nil
        _V.v321 = nil
        _V.v322 = nil
        _V.v323 = nil
        _V.v324 = nil
        _V.v325 = nil
        _V.v326 = nil
        _V.v327 = nil
        _V.v328 = nil
        _V.v329 = nil
        _V.v330 = nil
        _V.v331 = nil
        _V.v332 = nil
        _V.v333 = nil
        _V.v334 = nil
        _V.v335 = nil
        _V.v336 = nil
        _V.v337 = nil
        _V.v338 = nil
        _V.v339 = nil
        _V.v340 = nil
        _V.v341 = nil
        _V.v342 = nil
        _V.v343 = nil
        _V.v344 = nil
        _V.v345 = nil
        _V.counter = counter
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        local _next_block = 462
        while true do
          if _next_block == 462 then
            _V.v209 = _V.v208[1] or 0
            if _V.v209 == 0 then
              _next_block = 464
            else
              if _V.v209 == 1 then
                _next_block = 465
              else
                if _V.v209 == 2 then
                  _next_block = 466
                else
                  if _V.v209 == 3 then
                    _next_block = 467
                  else
                    if _V.v209 == 4 then
                      _next_block = 468
                    else
                      if _V.v209 == 5 then
                        _next_block = 469
                      else
                        if _V.v209 == 6 then
                          _next_block = 470
                        else
                          if _V.v209 == 7 then
                            _next_block = 471
                          else
                            if _V.v209 == 8 then
                              _next_block = 472
                            else
                              if _V.v209 == 9 then
                                _next_block = 473
                              else
                                if _V.v209 == 10 then
                                  _next_block = 474
                                else
                                  if _V.v209 == 11 then
                                    _next_block = 475
                                  else
                                    if _V.v209 == 12 then
                                      _next_block = 476
                                    else
                                      if _V.v209 == 13 then
                                        _next_block = 477
                                      else
                                        if _V.v209 == 14 then
                                          _next_block = 478
                                        else
                                          if _V.v209 == 15 then
                                            _next_block = 479
                                          else
                                            if _V.v209 == 16 then
                                              _next_block = 480
                                            else
                                              if _V.v209 == 17 then
                                                _next_block = 481
                                              else
                                                if _V.v209 == 18 then
                                                  _next_block = 482
                                                else
                                                  if _V.v209 == 19 then
                                                    _next_block = 485
                                                  else
                                                    if _V.v209 == 20 then
                                                      _next_block = 486
                                                    else
                                                      if _V.v209 == 21 then
                                                        _next_block = 487
                                                      else
                                                        if _V.v209 == 22 then
                                                          _next_block = 488
                                                        else
                                                          if _V.v209 == 23 then
                                                            _next_block = 489
                                                          else
                                                            if _V.v209 == 24 then
                                                              _next_block = 490
                                                            else
                                                              _next_block = 464
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          else
            if _next_block == 463 then
              _V.v210 = caml_call_gen(_V.v206, {_V.v207})
              return _V.v210
            else
              if _next_block == 464 then
                _V.v211 = _V.v208[2]
                _V.v212 = caml_make_closure(1, function(v346)
                  -- Hoisted variables (2 total, using inherited _V table)
                  _V.v347 = nil
                  _V.v348 = nil
                  _V.v346 = v346
                  local _next_block = 461
                  while true do
                    if _next_block == 461 then
                      _V.v347 = {5, _V.v207, _V.v346}
                      _V.v348 = _V.v185(_V.v206, _V.v347, _V.v211)
                      return _V.v348
                    else
                      break
                    end
                  end
                end)
                return _V.v212
              else
                if _next_block == 465 then
                  _V.v213 = _V.v208[2]
                  _V.v214 = caml_make_closure(1, function(v346)
                    -- Hoisted variables (30 total, using inherited _V table)
                    _V.v347 = nil
                    _V.v348 = nil
                    _V.v349 = nil
                    _V.v350 = nil
                    _V.v351 = nil
                    _V.v352 = nil
                    _V.v353 = nil
                    _V.v354 = nil
                    _V.v355 = nil
                    _V.v356 = nil
                    _V.v357 = nil
                    _V.v358 = nil
                    _V.v359 = nil
                    _V.v360 = nil
                    _V.v361 = nil
                    _V.v362 = nil
                    _V.v363 = nil
                    _V.v364 = nil
                    _V.v365 = nil
                    _V.v366 = nil
                    _V.v367 = nil
                    _V.v368 = nil
                    _V.v369 = nil
                    _V.v370 = nil
                    _V.v371 = nil
                    _V.v372 = nil
                    _V.v373 = nil
                    _V.v374 = nil
                    _V.v375 = nil
                    _V.v376 = nil
                    _V.v346 = v346
                    local _next_block = 82
                    while true do
                      if _next_block == 82 then
                        _V.v347 = 92 == _V.v346
                        if _V.v347 then
                          -- Block arg: v377 = v2 (captured)
                          _V.v377 = _V.v2
                          _next_block = 809
                        else
                          _next_block = 83
                        end
                      else
                        if _next_block == 83 then
                          _V.v348 = 127 <= _V.v346
                          if _V.v348 then
                            _next_block = 94
                          else
                            _next_block = 95
                          end
                        else
                          if _next_block == 85 then
                            _V.v349 = 32 <= _V.v346
                            if _V.v349 then
                              _next_block = 86
                            else
                              _next_block = 88
                            end
                          else
                            if _next_block == 86 then
                              _V.v350 = 39 <= _V.v346
                              if _V.v350 then
                                -- Block arg: v377 = v3 (captured)
                                _V.v377 = _V.v3
                                _next_block = 809
                              else
                                _next_block = 95
                              end
                            else
                              if _next_block == 88 then
                                _V.v351 = 14 <= _V.v346
                                if _V.v351 then
                                  _next_block = 94
                                else
                                  _next_block = 89
                                end
                              else
                                if _next_block == 89 then
                                  if _V.v346 == 0 then
                                    _next_block = 94
                                  else
                                    if _V.v346 == 1 then
                                      _next_block = 94
                                    else
                                      if _V.v346 == 2 then
                                        _next_block = 94
                                      else
                                        if _V.v346 == 3 then
                                          _next_block = 94
                                        else
                                          if _V.v346 == 4 then
                                            _next_block = 94
                                          else
                                            if _V.v346 == 5 then
                                              _next_block = 94
                                            else
                                              if _V.v346 == 6 then
                                                _next_block = 94
                                              else
                                                if _V.v346 == 7 then
                                                  _next_block = 94
                                                else
                                                  if _V.v346 == 8 then
                                                    -- Block arg: v377 = v4 (captured)
                                                    _V.v377 = _V.v4
                                                    _next_block = 809
                                                  else
                                                    if _V.v346 == 9 then
                                                      -- Block arg: v377 = v5 (captured)
                                                      _V.v377 = _V.v5
                                                      _next_block = 809
                                                    else
                                                      if _V.v346 == 10 then
                                                        -- Block arg: v377 = v6 (captured)
                                                        _V.v377 = _V.v6
                                                        _next_block = 809
                                                      else
                                                        if _V.v346 == 11 then
                                                          _next_block = 94
                                                        else
                                                          if _V.v346 == 12 then
                                                            _next_block = 94
                                                          else
                                                            if _V.v346 == 13 then
                                                              -- Block arg: v377 = v7 (captured)
                                                              _V.v377 = _V.v7
                                                              _next_block = 809
                                                            else
                                                              _next_block = 94
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                else
                                  if _next_block == 94 then
                                    _V.v352 = caml_create_bytes(4)
                                    _V.v353 = caml_bytes_unsafe_set(_V.v352, 0, 92)
                                    _V.v354 = caml_direct_int_div(_V.v346, 100)
                                    _V.v355 = 48 + _V.v354
                                    _V.v356 = caml_bytes_unsafe_set(_V.v352, 1, _V.v355)
                                    _V.v357 = caml_direct_int_div(_V.v346, 10)
                                    _V.v358 = caml_direct_int_mod(_V.v357, 10)
                                    _V.v359 = 48 + _V.v358
                                    _V.v360 = caml_bytes_unsafe_set(_V.v352, 2, _V.v359)
                                    _V.v361 = caml_direct_int_mod(_V.v346, 10)
                                    _V.v362 = 48 + _V.v361
                                    _V.v363 = caml_bytes_unsafe_set(_V.v352, 3, _V.v362)
                                    _V.v364 = caml_string_of_bytes(_V.v352)
                                    -- Block arg: v377 = v364 (captured)
                                    _V.v377 = _V.v364
                                    _next_block = 809
                                  else
                                    if _next_block == 95 then
                                      _V.v365 = caml_create_bytes(1)
                                      _V.v366 = caml_bytes_unsafe_set(_V.v365, 0, _V.v346)
                                      _V.v367 = caml_string_of_bytes(_V.v365)
                                      -- Block arg: v377 = v367 (captured)
                                      _V.v377 = _V.v367
                                      _next_block = 809
                                    else
                                      if _next_block == 460 then
                                        _V.v368 = 40 <= _V.v346
                                        if _V.v368 then
                                          _next_block = 82
                                        else
                                          _next_block = 85
                                        end
                                      else
                                        if _next_block == 809 then
                                          _V.v369 = caml_ml_string_length(_V.v377)
                                          _V.v370 = 39
                                          _V.v371 = _V.v369 + 2
                                          _V.v372 = _V.v154(_V.v371, _V.v370)
                                          _V.v373 = caml_blit_string(_V.v377, 0, _V.v372, 1, _V.v369)
                                          _V.v374 = caml_string_of_bytes(_V.v372)
                                          _V.v375 = {4, _V.v207, _V.v374}
                                          _V.v376 = _V.v185(_V.v206, _V.v375, _V.v213)
                                          return _V.v376
                                        else
                                          break
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end)
                  return _V.v214
                else
                  if _next_block == 466 then
                    _V.v215 = _V.v208[3]
                    _V.v216 = _V.v208[2]
                    _V.v217 = caml_make_closure(1, function(v346)
                      _V.v346 = v346
                      local _next_block = 459
                      while true do
                        if _next_block == 459 then
                          return _V.v346
                        else
                          break
                        end
                      end
                    end)
                    _V.v218 = _V.v189(_V.v206, _V.v207, _V.v215, _V.v216, _V.v217)
                    return _V.v218
                  else
                    if _next_block == 467 then
                      _V.v219 = _V.v208[3]
                      _V.v220 = _V.v208[2]
                      _V.v221 = _V.v189(_V.v206, _V.v207, _V.v219, _V.v220, _V.v176)
                      return _V.v221
                    else
                      if _next_block == 468 then
                        _V.v222 = _V.v208[5]
                        _V.v223 = _V.v208[4]
                        _V.v224 = _V.v208[3]
                        _V.v225 = _V.v208[2]
                        _V.v226 = _V.v190(_V.v206, _V.v207, _V.v222, _V.v224, _V.v223, _V.v179, _V.v225)
                        return _V.v226
                      else
                        if _next_block == 469 then
                          _V.v227 = _V.v208[5]
                          _V.v228 = _V.v208[4]
                          _V.v229 = _V.v208[3]
                          _V.v230 = _V.v208[2]
                          _V.v231 = _V.v190(_V.v206, _V.v207, _V.v227, _V.v229, _V.v228, _V.v180, _V.v230)
                          return _V.v231
                        else
                          if _next_block == 470 then
                            _V.v232 = _V.v208[5]
                            _V.v233 = _V.v208[4]
                            _V.v234 = _V.v208[3]
                            _V.v235 = _V.v208[2]
                            _V.v236 = _V.v190(_V.v206, _V.v207, _V.v232, _V.v234, _V.v233, _V.v181, _V.v235)
                            return _V.v236
                          else
                            if _next_block == 471 then
                              _V.v237 = _V.v208[5]
                              _V.v238 = _V.v208[4]
                              _V.v239 = _V.v208[3]
                              _V.v240 = _V.v208[2]
                              _V.v241 = _V.v190(_V.v206, _V.v207, _V.v237, _V.v239, _V.v238, _V.v182, _V.v240)
                              return _V.v241
                            else
                              if _next_block == 472 then
                                _V.v242 = _V.v208[5]
                                _V.v243 = _V.v208[4]
                                _V.v244 = _V.v208[3]
                                _V.v245 = _V.v208[2]
                                _V.v246 = type(_V.v244) == "number" and _V.v244 % 1 == 0
                                if _V.v246 then
                                  _next_block = 573
                                else
                                  _next_block = 572
                                end
                              else
                                if _next_block == 473 then
                                  _V.v247 = _V.v208[3]
                                  _V.v248 = _V.v208[2]
                                  _V.v249 = _V.v189(_V.v206, _V.v207, _V.v247, _V.v248, _V.v138)
                                  return _V.v249
                                else
                                  if _next_block == 474 then
                                    _V.v250 = _V.v208[2]
                                    _V.v251 = {7, _V.v207}
                                    -- Block arg: v206 = v206 (captured)
                                    _V.v206 = _V.v206
                                    -- Block arg: v207 = v251 (captured)
                                    _V.v207 = _V.v251
                                    -- Block arg: v208 = v250 (captured)
                                    _V.v208 = _V.v250
                                    _next_block = 800
                                  else
                                    if _next_block == 475 then
                                      _V.v252 = _V.v208[3]
                                      _V.v253 = _V.v208[2]
                                      _V.v254 = {2, _V.v207, _V.v253}
                                      -- Block arg: v206 = v206 (captured)
                                      _V.v206 = _V.v206
                                      -- Block arg: v207 = v254 (captured)
                                      _V.v207 = _V.v254
                                      -- Block arg: v208 = v252 (captured)
                                      _V.v208 = _V.v252
                                      _next_block = 800
                                    else
                                      if _next_block == 476 then
                                        _V.v255 = _V.v208[3]
                                        _V.v256 = _V.v208[2]
                                        _V.v257 = {3, _V.v207, _V.v256}
                                        -- Block arg: v206 = v206 (captured)
                                        _V.v206 = _V.v206
                                        -- Block arg: v207 = v257 (captured)
                                        _V.v207 = _V.v257
                                        -- Block arg: v208 = v255 (captured)
                                        _V.v208 = _V.v255
                                        _next_block = 800
                                      else
                                        if _next_block == 477 then
                                          _V.v258 = _V.v208[4]
                                          _V.v259 = _V.v208[3]
                                          _V.v260 = 16
                                          _V.v261 = _V.v158(_V.v260)
                                          _V.v262 = _V.v163(_V.v261, _V.v259)
                                          _V.v263 = _V.v162(_V.v261)
                                          _V.v264 = caml_make_closure(1, function(v346)
                                            -- Hoisted variables (2 total, using inherited _V table)
                                            _V.v347 = nil
                                            _V.v348 = nil
                                            _V.v346 = v346
                                            local _next_block = 458
                                            while true do
                                              if _next_block == 458 then
                                                _V.v347 = {4, _V.v207, _V.v263}
                                                _V.v348 = _V.v185(_V.v206, _V.v347, _V.v258)
                                                return _V.v348
                                              else
                                                break
                                              end
                                            end
                                          end)
                                          return _V.v264
                                        else
                                          if _next_block == 478 then
                                            _V.v265 = _V.v208[4]
                                            _V.v266 = _V.v208[3]
                                            _V.v267 = caml_make_closure(1, function(v346)
                                              -- Hoisted variables (9 total, using inherited _V table)
                                              _V.v347 = nil
                                              _V.v348 = nil
                                              _V.v349 = nil
                                              _V.v350 = nil
                                              _V.v351 = nil
                                              _V.v352 = nil
                                              _V.v353 = nil
                                              _V.v354 = nil
                                              _V.v355 = nil
                                              _V.v346 = v346
                                              local _next_block = 309
                                              while true do
                                                if _next_block == 309 then
                                                  _V.v347 = _V.v353[2]
                                                  _V.v348 = _V.v133(_V.v347, _V.v265)
                                                  _V.v349 = _V.v185(_V.v206, _V.v207, _V.v348)
                                                  return _V.v349
                                                else
                                                  if _next_block == 310 then
                                                    error(_V.v168)
                                                  else
                                                    if _next_block == 457 then
                                                      _V.v350 = _V.v346[2]
                                                      _V.v351 = _V.v164(_V.v266)
                                                      _V.v352 = _V.v131(_V.v351)
                                                      _V.v353 = _V.v171(_V.v350, _V.v352)
                                                      _V.v354 = _V.v353[3]
                                                      _V.v355 = type(_V.v354) == "number" and _V.v354 % 1 == 0
                                                      if _V.v355 then
                                                        _next_block = 309
                                                      else
                                                        _next_block = 310
                                                      end
                                                    else
                                                      break
                                                    end
                                                  end
                                                end
                                              end
                                            end)
                                            return _V.v267
                                          else
                                            if _next_block == 479 then
                                              _V.v268 = _V.v208[2]
                                              _V.v269 = caml_make_closure(2, function(v346, v347)
                                                -- Hoisted variables (3 total, using inherited _V table)
                                                _V.v348 = nil
                                                _V.v349 = nil
                                                _V.v350 = nil
                                                _V.v346 = v346
                                                _V.v347 = v347
                                                local _next_block = 456
                                                while true do
                                                  if _next_block == 456 then
                                                    _V.v348 = caml_make_closure(1, function(v351)
                                                      -- Hoisted variables (1 total, using inherited _V table)
                                                      _V.v352 = nil
                                                      _V.v351 = v351
                                                      local _next_block = 455
                                                      while true do
                                                        if _next_block == 455 then
                                                          _V.v352 = caml_call_gen(_V.v346, {_V.v351, _V.v347})
                                                          return _V.v352
                                                        else
                                                          break
                                                        end
                                                      end
                                                    end)
                                                    _V.v349 = {6, _V.v207, _V.v348}
                                                    _V.v350 = _V.v185(_V.v206, _V.v349, _V.v268)
                                                    return _V.v350
                                                  else
                                                    break
                                                  end
                                                end
                                              end)
                                              return _V.v269
                                            else
                                              if _next_block == 480 then
                                                _V.v270 = _V.v208[2]
                                                _V.v271 = caml_make_closure(1, function(v346)
                                                  -- Hoisted variables (2 total, using inherited _V table)
                                                  _V.v347 = nil
                                                  _V.v348 = nil
                                                  _V.v346 = v346
                                                  local _next_block = 454
                                                  while true do
                                                    if _next_block == 454 then
                                                      _V.v347 = {6, _V.v207, _V.v346}
                                                      _V.v348 = _V.v185(_V.v206, _V.v347, _V.v270)
                                                      return _V.v348
                                                    else
                                                      break
                                                    end
                                                  end
                                                end)
                                                return _V.v271
                                              else
                                                if _next_block == 481 then
                                                  _V.v272 = _V.v208[3]
                                                  _V.v273 = _V.v208[2]
                                                  _V.v274 = {0, _V.v207, _V.v273}
                                                  -- Block arg: v206 = v206 (captured)
                                                  _V.v206 = _V.v206
                                                  -- Block arg: v207 = v274 (captured)
                                                  _V.v207 = _V.v274
                                                  -- Block arg: v208 = v272 (captured)
                                                  _V.v208 = _V.v272
                                                  _next_block = 800
                                                else
                                                  if _next_block == 482 then
                                                    _V.v275 = _V.v208[2]
                                                    _V.v276 = _V.v275[1] or 0
                                                    _V.v277 = 0 == _V.v276
                                                    if _V.v277 then
                                                      _next_block = 483
                                                    else
                                                      _next_block = 484
                                                    end
                                                  else
                                                    if _next_block == 483 then
                                                      _V.v278 = _V.v208[3]
                                                      _V.v279 = _V.v275[2]
                                                      _V.v280 = _V.v279[2]
                                                      _V.v281 = caml_make_closure(1, function(v346)
                                                        -- Hoisted variables (3 total, using inherited _V table)
                                                        _V.v347 = nil
                                                        _V.v348 = nil
                                                        _V.v349 = nil
                                                        _V.v346 = v346
                                                        local _next_block = 453
                                                        while true do
                                                          if _next_block == 453 then
                                                            _V.v347 = {0, _V.v346}
                                                            _V.v348 = {1, _V.v207, _V.v347}
                                                            _V.v349 = _V.v185(_V.v206, _V.v348, _V.v278)
                                                            return _V.v349
                                                          else
                                                            break
                                                          end
                                                        end
                                                      end)
                                                      _V.v282 = 0
                                                      -- Block arg: v206 = v281 (captured)
                                                      _V.v206 = _V.v281
                                                      -- Block arg: v207 = v282 (captured)
                                                      _V.v207 = _V.v282
                                                      -- Block arg: v208 = v280 (captured)
                                                      _V.v208 = _V.v280
                                                      _next_block = 800
                                                    else
                                                      if _next_block == 484 then
                                                        _V.v283 = _V.v208[3]
                                                        _V.v284 = _V.v275[2]
                                                        _V.v285 = _V.v284[2]
                                                        _V.v286 = caml_make_closure(1, function(v346)
                                                          -- Hoisted variables (3 total, using inherited _V table)
                                                          _V.v347 = nil
                                                          _V.v348 = nil
                                                          _V.v349 = nil
                                                          _V.v346 = v346
                                                          local _next_block = 452
                                                          while true do
                                                            if _next_block == 452 then
                                                              _V.v347 = {1, _V.v346}
                                                              _V.v348 = {1, _V.v207, _V.v347}
                                                              _V.v349 = _V.v185(_V.v206, _V.v348, _V.v283)
                                                              return _V.v349
                                                            else
                                                              break
                                                            end
                                                          end
                                                        end)
                                                        _V.v287 = 0
                                                        -- Block arg: v206 = v286 (captured)
                                                        _V.v206 = _V.v286
                                                        -- Block arg: v207 = v287 (captured)
                                                        _V.v207 = _V.v287
                                                        -- Block arg: v208 = v285 (captured)
                                                        _V.v208 = _V.v285
                                                        _next_block = 800
                                                      else
                                                        if _next_block == 485 then
                                                          _V.v288 = {0, _V.Assert_failure, _V.v44}
                                                          error(_V.v288)
                                                        else
                                                          if _next_block == 486 then
                                                            _V.v289 = _V.v208[4]
                                                            _V.v290 = {8, _V.v207, _V.v45}
                                                            _V.v291 = caml_make_closure(1, function(v346)
                                                              -- Hoisted variables (1 total, using inherited _V table)
                                                              _V.v347 = nil
                                                              _V.v346 = v346
                                                              local _next_block = 451
                                                              while true do
                                                                if _next_block == 451 then
                                                                  _V.v347 = _V.v185(_V.v206, _V.v290, _V.v289)
                                                                  return _V.v347
                                                                else
                                                                  break
                                                                end
                                                              end
                                                            end)
                                                            return _V.v291
                                                          else
                                                            if _next_block == 487 then
                                                              _V.v292 = _V.v208[3]
                                                              _V.v293 = caml_make_closure(1, function(v346)
                                                                -- Hoisted variables (3 total, using inherited _V table)
                                                                _V.v347 = nil
                                                                _V.v348 = nil
                                                                _V.v349 = nil
                                                                _V.v346 = v346
                                                                local _next_block = 450
                                                                while true do
                                                                  if _next_block == 450 then
                                                                    _V.v347 = caml_format_int("%u", _V.v346)
                                                                    _V.v348 = {4, _V.v207, _V.v347}
                                                                    _V.v349 = _V.v185(_V.v206, _V.v348, _V.v292)
                                                                    return _V.v349
                                                                  else
                                                                    break
                                                                  end
                                                                end
                                                              end)
                                                              return _V.v293
                                                            else
                                                              if _next_block == 488 then
                                                                _V.v294 = _V.v208[2]
                                                                _V.v295 = caml_make_closure(1, function(v346)
                                                                  -- Hoisted variables (2 total, using inherited _V table)
                                                                  _V.v347 = nil
                                                                  _V.v348 = nil
                                                                  _V.v346 = v346
                                                                  local _next_block = 449
                                                                  while true do
                                                                    if _next_block == 449 then
                                                                      _V.v347 = {5, _V.v207, _V.v346}
                                                                      _V.v348 = _V.v185(_V.v206, _V.v347, _V.v294)
                                                                      return _V.v348
                                                                    else
                                                                      break
                                                                    end
                                                                  end
                                                                end)
                                                                return _V.v295
                                                              else
                                                                if _next_block == 489 then
                                                                  _V.v296 = _V.v208[3]
                                                                  _V.v297 = _V.v208[2]
                                                                  _V.v298 = type(_V.v297) == "number" and _V.v297 % 1 == 0
                                                                  if _V.v298 then
                                                                    _next_block = 491
                                                                  else
                                                                    _next_block = 492
                                                                  end
                                                                else
                                                                  if _next_block == 490 then
                                                                    _V.v299 = _V.v208[4]
                                                                    _V.v300 = _V.v208[3]
                                                                    _V.v301 = _V.v208[2]
                                                                    _V.v302 = 0
                                                                    _V.v303 = caml_call_gen(_V.v300, {_V.v302})
                                                                    _V.v304 = _V.counter < 50
                                                                    if _V.v304 then
                                                                      _next_block = 820
                                                                    else
                                                                      _next_block = 821
                                                                    end
                                                                  else
                                                                    if _next_block == 491 then
                                                                      _V.v305 = 2 == _V.v297
                                                                      if _V.v305 then
                                                                        _next_block = 494
                                                                      else
                                                                        _next_block = 493
                                                                      end
                                                                    else
                                                                      if _next_block == 492 then
                                                                        _V.v306 = _V.v297[1] or 0
                                                                        _V.v307 = 9 == _V.v306
                                                                        if _V.v307 then
                                                                          _next_block = 496
                                                                        else
                                                                          _next_block = 495
                                                                        end
                                                                      else
                                                                        if _next_block == 493 then
                                                                          _V.v308 = _V.counter < 50
                                                                          if _V.v308 then
                                                                            _next_block = 823
                                                                          else
                                                                            _next_block = 824
                                                                          end
                                                                        else
                                                                          if _next_block == 494 then
                                                                            _V.v309 = {0, _V.Assert_failure, _V.v46}
                                                                            error(_V.v309)
                                                                          else
                                                                            if _next_block == 495 then
                                                                              _V.v310 = _V.counter < 50
                                                                              if _V.v310 then
                                                                                _next_block = 825
                                                                              else
                                                                                _next_block = 826
                                                                              end
                                                                            else
                                                                              if _next_block == 496 then
                                                                                _V.v311 = _V.v297[3]
                                                                                _V.v312 = _V.counter < 50
                                                                                if _V.v312 then
                                                                                  _next_block = 830
                                                                                else
                                                                                  _next_block = 831
                                                                                end
                                                                              else
                                                                                if _next_block == 572 then
                                                                                  _V.v313 = _V.v244[1] or 0
                                                                                  _V.v314 = 0 == _V.v313
                                                                                  if _V.v314 then
                                                                                    _next_block = 578
                                                                                  else
                                                                                    _next_block = 583
                                                                                  end
                                                                                else
                                                                                  if _next_block == 573 then
                                                                                    _V.v315 = type(_V.v243) == "number" and _V.v243 % 1 == 0
                                                                                    if _V.v315 then
                                                                                      _next_block = 574
                                                                                    else
                                                                                      _next_block = 577
                                                                                    end
                                                                                  else
                                                                                    if _next_block == 574 then
                                                                                      if _V.v243 then
                                                                                        _next_block = 575
                                                                                      else
                                                                                        _next_block = 576
                                                                                      end
                                                                                    else
                                                                                      if _next_block == 575 then
                                                                                        _V.v316 = caml_make_closure(2, function(v346, v347)
                                                                                          -- Hoisted variables (3 total, using inherited _V table)
                                                                                          _V.v348 = nil
                                                                                          _V.v349 = nil
                                                                                          _V.v350 = nil
                                                                                          _V.v346 = v346
                                                                                          _V.v347 = v347
                                                                                          local _next_block = 571
                                                                                          while true do
                                                                                            if _next_block == 571 then
                                                                                              _V.v348 = _V.v183(_V.v245, _V.v346, _V.v347)
                                                                                              _V.v349 = {4, _V.v207, _V.v348}
                                                                                              _V.v350 = _V.v185(_V.v206, _V.v349, _V.v242)
                                                                                              return _V.v350
                                                                                            else
                                                                                              break
                                                                                            end
                                                                                          end
                                                                                        end)
                                                                                        return _V.v316
                                                                                      else
                                                                                        if _next_block == 576 then
                                                                                          _V.v317 = caml_make_closure(1, function(v346)
                                                                                            -- Hoisted variables (4 total, using inherited _V table)
                                                                                            _V.v347 = nil
                                                                                            _V.v348 = nil
                                                                                            _V.v349 = nil
                                                                                            _V.v350 = nil
                                                                                            _V.v346 = v346
                                                                                            local _next_block = 570
                                                                                            while true do
                                                                                              if _next_block == 570 then
                                                                                                _V.v347 = _V.v157(_V.v245)
                                                                                                _V.v348 = _V.v183(_V.v245, _V.v347, _V.v346)
                                                                                                _V.v349 = {4, _V.v207, _V.v348}
                                                                                                _V.v350 = _V.v185(_V.v206, _V.v349, _V.v242)
                                                                                                return _V.v350
                                                                                              else
                                                                                                break
                                                                                              end
                                                                                            end
                                                                                          end)
                                                                                          return _V.v317
                                                                                        else
                                                                                          if _next_block == 577 then
                                                                                            _V.v318 = _V.v243[2]
                                                                                            _V.v319 = caml_make_closure(1, function(v346)
                                                                                              -- Hoisted variables (3 total, using inherited _V table)
                                                                                              _V.v347 = nil
                                                                                              _V.v348 = nil
                                                                                              _V.v349 = nil
                                                                                              _V.v346 = v346
                                                                                              local _next_block = 569
                                                                                              while true do
                                                                                                if _next_block == 569 then
                                                                                                  _V.v347 = _V.v183(_V.v245, _V.v318, _V.v346)
                                                                                                  _V.v348 = {4, _V.v207, _V.v347}
                                                                                                  _V.v349 = _V.v185(_V.v206, _V.v348, _V.v242)
                                                                                                  return _V.v349
                                                                                                else
                                                                                                  break
                                                                                                end
                                                                                              end
                                                                                            end)
                                                                                            return _V.v319
                                                                                          else
                                                                                            if _next_block == 578 then
                                                                                              _V.v320 = _V.v244[3]
                                                                                              _V.v321 = _V.v244[2]
                                                                                              _V.v322 = type(_V.v243) == "number" and _V.v243 % 1 == 0
                                                                                              if _V.v322 then
                                                                                                _next_block = 579
                                                                                              else
                                                                                                _next_block = 582
                                                                                              end
                                                                                            else
                                                                                              if _next_block == 579 then
                                                                                                if _V.v243 then
                                                                                                  _next_block = 580
                                                                                                else
                                                                                                  _next_block = 581
                                                                                                end
                                                                                              else
                                                                                                if _next_block == 580 then
                                                                                                  _V.v323 = caml_make_closure(2, function(v346, v347)
                                                                                                    -- Hoisted variables (4 total, using inherited _V table)
                                                                                                    _V.v348 = nil
                                                                                                    _V.v349 = nil
                                                                                                    _V.v350 = nil
                                                                                                    _V.v351 = nil
                                                                                                    _V.v346 = v346
                                                                                                    _V.v347 = v347
                                                                                                    local _next_block = 568
                                                                                                    while true do
                                                                                                      if _next_block == 568 then
                                                                                                        _V.v348 = _V.v183(_V.v245, _V.v346, _V.v347)
                                                                                                        _V.v349 = _V.v174(_V.v321, _V.v320, _V.v348)
                                                                                                        _V.v350 = {4, _V.v207, _V.v349}
                                                                                                        _V.v351 = _V.v185(_V.v206, _V.v350, _V.v242)
                                                                                                        return _V.v351
                                                                                                      else
                                                                                                        break
                                                                                                      end
                                                                                                    end
                                                                                                  end)
                                                                                                  return _V.v323
                                                                                                else
                                                                                                  if _next_block == 581 then
                                                                                                    _V.v324 = caml_make_closure(1, function(v346)
                                                                                                      -- Hoisted variables (5 total, using inherited _V table)
                                                                                                      _V.v347 = nil
                                                                                                      _V.v348 = nil
                                                                                                      _V.v349 = nil
                                                                                                      _V.v350 = nil
                                                                                                      _V.v351 = nil
                                                                                                      _V.v346 = v346
                                                                                                      local _next_block = 567
                                                                                                      while true do
                                                                                                        if _next_block == 567 then
                                                                                                          _V.v347 = _V.v157(_V.v245)
                                                                                                          _V.v348 = _V.v183(_V.v245, _V.v347, _V.v346)
                                                                                                          _V.v349 = _V.v174(_V.v321, _V.v320, _V.v348)
                                                                                                          _V.v350 = {4, _V.v207, _V.v349}
                                                                                                          _V.v351 = _V.v185(_V.v206, _V.v350, _V.v242)
                                                                                                          return _V.v351
                                                                                                        else
                                                                                                          break
                                                                                                        end
                                                                                                      end
                                                                                                    end)
                                                                                                    return _V.v324
                                                                                                  else
                                                                                                    if _next_block == 582 then
                                                                                                      _V.v325 = _V.v243[2]
                                                                                                      _V.v326 = caml_make_closure(1, function(v346)
                                                                                                        -- Hoisted variables (4 total, using inherited _V table)
                                                                                                        _V.v347 = nil
                                                                                                        _V.v348 = nil
                                                                                                        _V.v349 = nil
                                                                                                        _V.v350 = nil
                                                                                                        _V.v346 = v346
                                                                                                        local _next_block = 566
                                                                                                        while true do
                                                                                                          if _next_block == 566 then
                                                                                                            _V.v347 = _V.v183(_V.v245, _V.v325, _V.v346)
                                                                                                            _V.v348 = _V.v174(_V.v321, _V.v320, _V.v347)
                                                                                                            _V.v349 = {4, _V.v207, _V.v348}
                                                                                                            _V.v350 = _V.v185(_V.v206, _V.v349, _V.v242)
                                                                                                            return _V.v350
                                                                                                          else
                                                                                                            break
                                                                                                          end
                                                                                                        end
                                                                                                      end)
                                                                                                      return _V.v326
                                                                                                    else
                                                                                                      if _next_block == 583 then
                                                                                                        _V.v327 = _V.v244[2]
                                                                                                        _V.v328 = type(_V.v243) == "number" and _V.v243 % 1 == 0
                                                                                                        if _V.v328 then
                                                                                                          _next_block = 584
                                                                                                        else
                                                                                                          _next_block = 587
                                                                                                        end
                                                                                                      else
                                                                                                        if _next_block == 584 then
                                                                                                          if _V.v243 then
                                                                                                            _next_block = 585
                                                                                                          else
                                                                                                            _next_block = 586
                                                                                                          end
                                                                                                        else
                                                                                                          if _next_block == 585 then
                                                                                                            _V.v329 = caml_make_closure(3, function(v346, v347, v348)
                                                                                                              -- Hoisted variables (4 total, using inherited _V table)
                                                                                                              _V.v349 = nil
                                                                                                              _V.v350 = nil
                                                                                                              _V.v351 = nil
                                                                                                              _V.v352 = nil
                                                                                                              _V.v346 = v346
                                                                                                              _V.v347 = v347
                                                                                                              _V.v348 = v348
                                                                                                              local _next_block = 565
                                                                                                              while true do
                                                                                                                if _next_block == 565 then
                                                                                                                  _V.v349 = _V.v183(_V.v245, _V.v347, _V.v348)
                                                                                                                  _V.v350 = _V.v174(_V.v327, _V.v346, _V.v349)
                                                                                                                  _V.v351 = {4, _V.v207, _V.v350}
                                                                                                                  _V.v352 = _V.v185(_V.v206, _V.v351, _V.v242)
                                                                                                                  return _V.v352
                                                                                                                else
                                                                                                                  break
                                                                                                                end
                                                                                                              end
                                                                                                            end)
                                                                                                            return _V.v329
                                                                                                          else
                                                                                                            if _next_block == 586 then
                                                                                                              _V.v330 = caml_make_closure(2, function(v346, v347)
                                                                                                                -- Hoisted variables (5 total, using inherited _V table)
                                                                                                                _V.v348 = nil
                                                                                                                _V.v349 = nil
                                                                                                                _V.v350 = nil
                                                                                                                _V.v351 = nil
                                                                                                                _V.v352 = nil
                                                                                                                _V.v346 = v346
                                                                                                                _V.v347 = v347
                                                                                                                local _next_block = 564
                                                                                                                while true do
                                                                                                                  if _next_block == 564 then
                                                                                                                    _V.v348 = _V.v157(_V.v245)
                                                                                                                    _V.v349 = _V.v183(_V.v245, _V.v348, _V.v347)
                                                                                                                    _V.v350 = _V.v174(_V.v327, _V.v346, _V.v349)
                                                                                                                    _V.v351 = {4, _V.v207, _V.v350}
                                                                                                                    _V.v352 = _V.v185(_V.v206, _V.v351, _V.v242)
                                                                                                                    return _V.v352
                                                                                                                  else
                                                                                                                    break
                                                                                                                  end
                                                                                                                end
                                                                                                              end)
                                                                                                              return _V.v330
                                                                                                            else
                                                                                                              if _next_block == 587 then
                                                                                                                _V.v331 = _V.v243[2]
                                                                                                                _V.v332 = caml_make_closure(2, function(v346, v347)
                                                                                                                  -- Hoisted variables (4 total, using inherited _V table)
                                                                                                                  _V.v348 = nil
                                                                                                                  _V.v349 = nil
                                                                                                                  _V.v350 = nil
                                                                                                                  _V.v351 = nil
                                                                                                                  _V.v346 = v346
                                                                                                                  _V.v347 = v347
                                                                                                                  local _next_block = 563
                                                                                                                  while true do
                                                                                                                    if _next_block == 563 then
                                                                                                                      _V.v348 = _V.v183(_V.v245, _V.v331, _V.v347)
                                                                                                                      _V.v349 = _V.v174(_V.v327, _V.v346, _V.v348)
                                                                                                                      _V.v350 = {4, _V.v207, _V.v349}
                                                                                                                      _V.v351 = _V.v185(_V.v206, _V.v350, _V.v242)
                                                                                                                      return _V.v351
                                                                                                                    else
                                                                                                                      break
                                                                                                                    end
                                                                                                                  end
                                                                                                                end)
                                                                                                                return _V.v332
                                                                                                              else
                                                                                                                if _next_block == 800 then
                                                                                                                  _V.v333 = type(_V.v208) == "number" and _V.v208 % 1 == 0
                                                                                                                  if _V.v333 then
                                                                                                                    _next_block = 463
                                                                                                                  else
                                                                                                                    _next_block = 462
                                                                                                                  end
                                                                                                                else
                                                                                                                  if _next_block == 820 then
                                                                                                                    _V.counter1 = _V.counter + 1
                                                                                                                    _V.v334 = _V.v191(_V.counter1, _V.v206, _V.v207, _V.v299, _V.v301, _V.v303)
                                                                                                                    return _V.v334
                                                                                                                  else
                                                                                                                    if _next_block == 821 then
                                                                                                                      _V.v335 = caml_js_array(0, _V.v206, _V.v207, _V.v299, _V.v301, _V.v303)
                                                                                                                      _V.v336 = caml_trampoline_return(_V.v191, _V.v335)
                                                                                                                      return _V.v336
                                                                                                                    else
                                                                                                                      if _next_block == 823 then
                                                                                                                        _V.counter2 = _V.counter + 1
                                                                                                                        _V.v337 = _V.v188(_V.counter2, _V.v206, _V.v207, _V.v296)
                                                                                                                        return _V.v337
                                                                                                                      else
                                                                                                                        if _next_block == 824 then
                                                                                                                          _V.v338 = caml_js_array(0, _V.v206, _V.v207, _V.v296)
                                                                                                                          _V.v339 = caml_trampoline_return(_V.v188, _V.v338)
                                                                                                                          return _V.v339
                                                                                                                        else
                                                                                                                          if _next_block == 825 then
                                                                                                                            _V.counter3 = _V.counter + 1
                                                                                                                            _V.v340 = _V.v188(_V.counter3, _V.v206, _V.v207, _V.v296)
                                                                                                                            return _V.v340
                                                                                                                          else
                                                                                                                            if _next_block == 826 then
                                                                                                                              _V.v341 = caml_js_array(0, _V.v206, _V.v207, _V.v296)
                                                                                                                              _V.v342 = caml_trampoline_return(_V.v188, _V.v341)
                                                                                                                              return _V.v342
                                                                                                                            else
                                                                                                                              if _next_block == 830 then
                                                                                                                                _V.counter4 = _V.counter + 1
                                                                                                                                _V.v343 = _V.v186(_V.counter4, _V.v206, _V.v207, _V.v311, _V.v296)
                                                                                                                                return _V.v343
                                                                                                                              else
                                                                                                                                if _next_block == 831 then
                                                                                                                                  _V.v344 = caml_js_array(0, _V.v206, _V.v207, _V.v311, _V.v296)
                                                                                                                                  _V.v345 = caml_trampoline_return(_V.v186, _V.v344)
                                                                                                                                  return _V.v345
                                                                                                                                else
                                                                                                                                  break
                                                                                                                                end
                                                                                                                              end
                                                                                                                            end
                                                                                                                          end
                                                                                                                        end
                                                                                                                      end
                                                                                                                    end
                                                                                                                  end
                                                                                                                end
                                                                                                              end
                                                                                                            end
                                                                                                          end
                                                                                                        end
                                                                                                      end
                                                                                                    end
                                                                                                  end
                                                                                                end
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v185 = caml_make_closure(3, function(v203, v204, v205)
        -- Hoisted variables (3 total, using inherited _V table)
        _V.counter = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        local _next_block = 832
        while true do
          if _next_block == 832 then
            
            _V.counter = 0
            _V.v206 = _V.v184(_V.counter, _V.v203, _V.v204, _V.v205)
            
            _V.v207 = caml_trampoline(_V.v206)
            return _V.v207
          else
            break
          end
        end
      end)
      _V.v186 = caml_make_closure(5, function(counter, v203, v204, v205, v206)
        -- Hoisted variables (39 total, using inherited _V table)
        _V.counter1 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.counter = counter
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        _V.v206 = v206
        local _next_block = 510
        while true do
          if _next_block == 510 then
            _V.v207 = type(_V.v205) == "number" and _V.v205 % 1 == 0
            if _V.v207 then
              _next_block = 512
            else
              _next_block = 511
            end
          else
            if _next_block == 511 then
              _V.v208 = _V.v205[1] or 0
              if _V.v208 == 0 then
                _next_block = 513
              else
                if _V.v208 == 1 then
                  _next_block = 514
                else
                  if _V.v208 == 2 then
                    _next_block = 515
                  else
                    if _V.v208 == 3 then
                      _next_block = 516
                    else
                      if _V.v208 == 4 then
                        _next_block = 517
                      else
                        if _V.v208 == 5 then
                          _next_block = 518
                        else
                          if _V.v208 == 6 then
                            _next_block = 519
                          else
                            if _V.v208 == 7 then
                              _next_block = 520
                            else
                              if _V.v208 == 8 then
                                _next_block = 521
                              else
                                if _V.v208 == 9 then
                                  _next_block = 522
                                else
                                  if _V.v208 == 10 then
                                    _next_block = 523
                                  else
                                    if _V.v208 == 11 then
                                      _next_block = 524
                                    else
                                      if _V.v208 == 12 then
                                        _next_block = 525
                                      else
                                        if _V.v208 == 13 then
                                          _next_block = 526
                                        else
                                          if _V.v208 == 14 then
                                            _next_block = 527
                                          else
                                            _next_block = 513
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            else
              if _next_block == 512 then
                _V.v209 = _V.counter < 50
                if _V.v209 then
                  _next_block = 827
                else
                  _next_block = 828
                end
              else
                if _next_block == 513 then
                  _V.v210 = _V.v205[2]
                  _V.v211 = caml_make_closure(1, function(v245)
                    -- Hoisted variables (1 total, using inherited _V table)
                    _V.v246 = nil
                    _V.v245 = v245
                    local _next_block = 509
                    while true do
                      if _next_block == 509 then
                        _V.v246 = _V.v187(_V.v203, _V.v204, _V.v210, _V.v206)
                        return _V.v246
                      else
                        break
                      end
                    end
                  end)
                  return _V.v211
                else
                  if _next_block == 514 then
                    _V.v212 = _V.v205[2]
                    _V.v213 = caml_make_closure(1, function(v245)
                      -- Hoisted variables (1 total, using inherited _V table)
                      _V.v246 = nil
                      _V.v245 = v245
                      local _next_block = 508
                      while true do
                        if _next_block == 508 then
                          _V.v246 = _V.v187(_V.v203, _V.v204, _V.v212, _V.v206)
                          return _V.v246
                        else
                          break
                        end
                      end
                    end)
                    return _V.v213
                  else
                    if _next_block == 515 then
                      _V.v214 = _V.v205[2]
                      _V.v215 = caml_make_closure(1, function(v245)
                        -- Hoisted variables (1 total, using inherited _V table)
                        _V.v246 = nil
                        _V.v245 = v245
                        local _next_block = 507
                        while true do
                          if _next_block == 507 then
                            _V.v246 = _V.v187(_V.v203, _V.v204, _V.v214, _V.v206)
                            return _V.v246
                          else
                            break
                          end
                        end
                      end)
                      return _V.v215
                    else
                      if _next_block == 516 then
                        _V.v216 = _V.v205[2]
                        _V.v217 = caml_make_closure(1, function(v245)
                          -- Hoisted variables (1 total, using inherited _V table)
                          _V.v246 = nil
                          _V.v245 = v245
                          local _next_block = 506
                          while true do
                            if _next_block == 506 then
                              _V.v246 = _V.v187(_V.v203, _V.v204, _V.v216, _V.v206)
                              return _V.v246
                            else
                              break
                            end
                          end
                        end)
                        return _V.v217
                      else
                        if _next_block == 517 then
                          _V.v218 = _V.v205[2]
                          _V.v219 = caml_make_closure(1, function(v245)
                            -- Hoisted variables (1 total, using inherited _V table)
                            _V.v246 = nil
                            _V.v245 = v245
                            local _next_block = 505
                            while true do
                              if _next_block == 505 then
                                _V.v246 = _V.v187(_V.v203, _V.v204, _V.v218, _V.v206)
                                return _V.v246
                              else
                                break
                              end
                            end
                          end)
                          return _V.v219
                        else
                          if _next_block == 518 then
                            _V.v220 = _V.v205[2]
                            _V.v221 = caml_make_closure(1, function(v245)
                              -- Hoisted variables (1 total, using inherited _V table)
                              _V.v246 = nil
                              _V.v245 = v245
                              local _next_block = 504
                              while true do
                                if _next_block == 504 then
                                  _V.v246 = _V.v187(_V.v203, _V.v204, _V.v220, _V.v206)
                                  return _V.v246
                                else
                                  break
                                end
                              end
                            end)
                            return _V.v221
                          else
                            if _next_block == 519 then
                              _V.v222 = _V.v205[2]
                              _V.v223 = caml_make_closure(1, function(v245)
                                -- Hoisted variables (1 total, using inherited _V table)
                                _V.v246 = nil
                                _V.v245 = v245
                                local _next_block = 503
                                while true do
                                  if _next_block == 503 then
                                    _V.v246 = _V.v187(_V.v203, _V.v204, _V.v222, _V.v206)
                                    return _V.v246
                                  else
                                    break
                                  end
                                end
                              end)
                              return _V.v223
                            else
                              if _next_block == 520 then
                                _V.v224 = _V.v205[2]
                                _V.v225 = caml_make_closure(1, function(v245)
                                  -- Hoisted variables (1 total, using inherited _V table)
                                  _V.v246 = nil
                                  _V.v245 = v245
                                  local _next_block = 502
                                  while true do
                                    if _next_block == 502 then
                                      _V.v246 = _V.v187(_V.v203, _V.v204, _V.v224, _V.v206)
                                      return _V.v246
                                    else
                                      break
                                    end
                                  end
                                end)
                                return _V.v225
                              else
                                if _next_block == 521 then
                                  _V.v226 = _V.v205[3]
                                  _V.v227 = caml_make_closure(1, function(v245)
                                    -- Hoisted variables (1 total, using inherited _V table)
                                    _V.v246 = nil
                                    _V.v245 = v245
                                    local _next_block = 501
                                    while true do
                                      if _next_block == 501 then
                                        _V.v246 = _V.v187(_V.v203, _V.v204, _V.v226, _V.v206)
                                        return _V.v246
                                      else
                                        break
                                      end
                                    end
                                  end)
                                  return _V.v227
                                else
                                  if _next_block == 522 then
                                    _V.v228 = _V.v205[4]
                                    _V.v229 = _V.v205[3]
                                    _V.v230 = _V.v205[2]
                                    _V.v231 = _V.v164(_V.v230)
                                    _V.v232 = _V.v166(_V.v231, _V.v229)
                                    _V.v233 = caml_make_closure(1, function(v245)
                                      -- Hoisted variables (2 total, using inherited _V table)
                                      _V.v246 = nil
                                      _V.v247 = nil
                                      _V.v245 = v245
                                      local _next_block = 500
                                      while true do
                                        if _next_block == 500 then
                                          _V.v246 = _V.v132(_V.v232, _V.v228)
                                          _V.v247 = _V.v187(_V.v203, _V.v204, _V.v246, _V.v206)
                                          return _V.v247
                                        else
                                          break
                                        end
                                      end
                                    end)
                                    return _V.v233
                                  else
                                    if _next_block == 523 then
                                      _V.v234 = _V.v205[2]
                                      _V.v235 = caml_make_closure(2, function(v245, v246)
                                        -- Hoisted variables (1 total, using inherited _V table)
                                        _V.v247 = nil
                                        _V.v245 = v245
                                        _V.v246 = v246
                                        local _next_block = 499
                                        while true do
                                          if _next_block == 499 then
                                            _V.v247 = _V.v187(_V.v203, _V.v204, _V.v234, _V.v206)
                                            return _V.v247
                                          else
                                            break
                                          end
                                        end
                                      end)
                                      return _V.v235
                                    else
                                      if _next_block == 524 then
                                        _V.v236 = _V.v205[2]
                                        _V.v237 = caml_make_closure(1, function(v245)
                                          -- Hoisted variables (1 total, using inherited _V table)
                                          _V.v246 = nil
                                          _V.v245 = v245
                                          local _next_block = 498
                                          while true do
                                            if _next_block == 498 then
                                              _V.v246 = _V.v187(_V.v203, _V.v204, _V.v236, _V.v206)
                                              return _V.v246
                                            else
                                              break
                                            end
                                          end
                                        end)
                                        return _V.v237
                                      else
                                        if _next_block == 525 then
                                          _V.v238 = _V.v205[2]
                                          _V.v239 = caml_make_closure(1, function(v245)
                                            -- Hoisted variables (1 total, using inherited _V table)
                                            _V.v246 = nil
                                            _V.v245 = v245
                                            local _next_block = 497
                                            while true do
                                              if _next_block == 497 then
                                                _V.v246 = _V.v187(_V.v203, _V.v204, _V.v238, _V.v206)
                                                return _V.v246
                                              else
                                                break
                                              end
                                            end
                                          end)
                                          return _V.v239
                                        else
                                          if _next_block == 526 then
                                            _V.v240 = {0, _V.Assert_failure, _V.v47}
                                            error(_V.v240)
                                          else
                                            if _next_block == 527 then
                                              _V.v241 = {0, _V.Assert_failure, _V.v48}
                                              error(_V.v241)
                                            else
                                              if _next_block == 827 then
                                                _V.counter1 = _V.counter + 1
                                                _V.v242 = _V.v188(_V.counter1, _V.v203, _V.v204, _V.v206)
                                                return _V.v242
                                              else
                                                if _next_block == 828 then
                                                  _V.v243 = caml_js_array(0, _V.v203, _V.v204, _V.v206)
                                                  _V.v244 = caml_trampoline_return(_V.v188, _V.v243)
                                                  return _V.v244
                                                else
                                                  break
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v187 = caml_make_closure(4, function(v203, v204, v205, v206)
        -- Hoisted variables (3 total, using inherited _V table)
        _V.counter = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        _V.v206 = v206
        local _next_block = 829
        while true do
          if _next_block == 829 then
            
            _V.counter = 0
            _V.v207 = _V.v186(_V.counter, _V.v203, _V.v204, _V.v205, _V.v206)
            
            _V.v208 = caml_trampoline(_V.v207)
            return _V.v208
          else
            break
          end
        end
      end)
      _V.v188 = caml_make_closure(4, function(counter, v203, v204, v205)
        -- Hoisted variables (6 total, using inherited _V table)
        _V.counter1 = nil
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.counter = counter
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        local _next_block = 528
        while true do
          if _next_block == 528 then
            _V.v206 = {8, _V.v204, _V.v49}
            _V.v207 = _V.counter < 50
            if _V.v207 then
              _next_block = 833
            else
              _next_block = 834
            end
          else
            if _next_block == 833 then
              _V.counter1 = _V.counter + 1
              _V.v208 = _V.v184(_V.counter1, _V.v203, _V.v206, _V.v205)
              return _V.v208
            else
              if _next_block == 834 then
                _V.v209 = caml_js_array(0, _V.v203, _V.v206, _V.v205)
                _V.v210 = caml_trampoline_return(_V.v184, _V.v209)
                return _V.v210
              else
                break
              end
            end
          end
        end
      end)
      _V.v189 = caml_make_closure(5, function(v203, v204, v205, v206, v207)
        -- Hoisted variables (9 total, using inherited _V table)
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        _V.v206 = v206
        _V.v207 = v207
        local _next_block = 532
        while true do
          if _next_block == 532 then
            _V.v208 = type(_V.v206) == "number" and _V.v206 % 1 == 0
            if _V.v208 then
              _next_block = 534
            else
              _next_block = 533
            end
          else
            if _next_block == 533 then
              _V.v209 = _V.v206[1] or 0
              _V.v210 = 0 == _V.v209
              if _V.v210 then
                _next_block = 535
              else
                _next_block = 536
              end
            else
              if _next_block == 534 then
                _V.v211 = caml_make_closure(1, function(v217)
                  -- Hoisted variables (3 total, using inherited _V table)
                  _V.v218 = nil
                  _V.v219 = nil
                  _V.v220 = nil
                  _V.v217 = v217
                  local _next_block = 531
                  while true do
                    if _next_block == 531 then
                      _V.v218 = caml_call_gen(_V.v207, {_V.v217})
                      _V.v219 = {4, _V.v204, _V.v218}
                      _V.v220 = _V.v185(_V.v203, _V.v219, _V.v205)
                      return _V.v220
                    else
                      break
                    end
                  end
                end)
                return _V.v211
              else
                if _next_block == 535 then
                  _V.v212 = _V.v206[3]
                  _V.v213 = _V.v206[2]
                  _V.v214 = caml_make_closure(1, function(v217)
                    -- Hoisted variables (4 total, using inherited _V table)
                    _V.v218 = nil
                    _V.v219 = nil
                    _V.v220 = nil
                    _V.v221 = nil
                    _V.v217 = v217
                    local _next_block = 530
                    while true do
                      if _next_block == 530 then
                        _V.v218 = caml_call_gen(_V.v207, {_V.v217})
                        _V.v219 = _V.v174(_V.v213, _V.v212, _V.v218)
                        _V.v220 = {4, _V.v204, _V.v219}
                        _V.v221 = _V.v185(_V.v203, _V.v220, _V.v205)
                        return _V.v221
                      else
                        break
                      end
                    end
                  end)
                  return _V.v214
                else
                  if _next_block == 536 then
                    _V.v215 = _V.v206[2]
                    _V.v216 = caml_make_closure(2, function(v217, v218)
                      -- Hoisted variables (4 total, using inherited _V table)
                      _V.v219 = nil
                      _V.v220 = nil
                      _V.v221 = nil
                      _V.v222 = nil
                      _V.v217 = v217
                      _V.v218 = v218
                      local _next_block = 529
                      while true do
                        if _next_block == 529 then
                          _V.v219 = caml_call_gen(_V.v207, {_V.v218})
                          _V.v220 = _V.v174(_V.v215, _V.v217, _V.v219)
                          _V.v221 = {4, _V.v204, _V.v220}
                          _V.v222 = _V.v185(_V.v203, _V.v221, _V.v205)
                          return _V.v222
                        else
                          break
                        end
                      end
                    end)
                    return _V.v216
                  else
                    break
                  end
                end
              end
            end
          end
        end
      end)
      _V.v190 = caml_make_closure(7, function(v203, v204, v205, v206, v207, v208, v209)
        -- Hoisted variables (21 total, using inherited _V table)
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        _V.v206 = v206
        _V.v207 = v207
        _V.v208 = v208
        _V.v209 = v209
        local _next_block = 546
        while true do
          if _next_block == 546 then
            _V.v210 = type(_V.v206) == "number" and _V.v206 % 1 == 0
            if _V.v210 then
              _next_block = 548
            else
              _next_block = 547
            end
          else
            if _next_block == 547 then
              _V.v211 = _V.v206[1] or 0
              _V.v212 = 0 == _V.v211
              if _V.v212 then
                _next_block = 553
              else
                _next_block = 558
              end
            else
              if _next_block == 548 then
                _V.v213 = type(_V.v207) == "number" and _V.v207 % 1 == 0
                if _V.v213 then
                  _next_block = 549
                else
                  _next_block = 552
                end
              else
                if _next_block == 549 then
                  if _V.v207 then
                    _next_block = 550
                  else
                    _next_block = 551
                  end
                else
                  if _next_block == 550 then
                    _V.v214 = caml_make_closure(2, function(v231, v232)
                      -- Hoisted variables (4 total, using inherited _V table)
                      _V.v233 = nil
                      _V.v234 = nil
                      _V.v235 = nil
                      _V.v236 = nil
                      _V.v231 = v231
                      _V.v232 = v232
                      local _next_block = 545
                      while true do
                        if _next_block == 545 then
                          _V.v233 = caml_call_gen(_V.v208, {_V.v209, _V.v232})
                          _V.v234 = _V.v175(_V.v231, _V.v233)
                          _V.v235 = {4, _V.v204, _V.v234}
                          _V.v236 = _V.v185(_V.v203, _V.v235, _V.v205)
                          return _V.v236
                        else
                          break
                        end
                      end
                    end)
                    return _V.v214
                  else
                    if _next_block == 551 then
                      _V.v215 = caml_make_closure(1, function(v231)
                        -- Hoisted variables (3 total, using inherited _V table)
                        _V.v232 = nil
                        _V.v233 = nil
                        _V.v234 = nil
                        _V.v231 = v231
                        local _next_block = 544
                        while true do
                          if _next_block == 544 then
                            _V.v232 = caml_call_gen(_V.v208, {_V.v209, _V.v231})
                            _V.v233 = {4, _V.v204, _V.v232}
                            _V.v234 = _V.v185(_V.v203, _V.v233, _V.v205)
                            return _V.v234
                          else
                            break
                          end
                        end
                      end)
                      return _V.v215
                    else
                      if _next_block == 552 then
                        _V.v216 = _V.v207[2]
                        _V.v217 = caml_make_closure(1, function(v231)
                          -- Hoisted variables (4 total, using inherited _V table)
                          _V.v232 = nil
                          _V.v233 = nil
                          _V.v234 = nil
                          _V.v235 = nil
                          _V.v231 = v231
                          local _next_block = 543
                          while true do
                            if _next_block == 543 then
                              _V.v232 = caml_call_gen(_V.v208, {_V.v209, _V.v231})
                              _V.v233 = _V.v175(_V.v216, _V.v232)
                              _V.v234 = {4, _V.v204, _V.v233}
                              _V.v235 = _V.v185(_V.v203, _V.v234, _V.v205)
                              return _V.v235
                            else
                              break
                            end
                          end
                        end)
                        return _V.v217
                      else
                        if _next_block == 553 then
                          _V.v218 = _V.v206[3]
                          _V.v219 = _V.v206[2]
                          _V.v220 = type(_V.v207) == "number" and _V.v207 % 1 == 0
                          if _V.v220 then
                            _next_block = 554
                          else
                            _next_block = 557
                          end
                        else
                          if _next_block == 554 then
                            if _V.v207 then
                              _next_block = 555
                            else
                              _next_block = 556
                            end
                          else
                            if _next_block == 555 then
                              _V.v221 = caml_make_closure(2, function(v231, v232)
                                -- Hoisted variables (5 total, using inherited _V table)
                                _V.v233 = nil
                                _V.v234 = nil
                                _V.v235 = nil
                                _V.v236 = nil
                                _V.v237 = nil
                                _V.v231 = v231
                                _V.v232 = v232
                                local _next_block = 542
                                while true do
                                  if _next_block == 542 then
                                    _V.v233 = caml_call_gen(_V.v208, {_V.v209, _V.v232})
                                    _V.v234 = _V.v175(_V.v231, _V.v233)
                                    _V.v235 = _V.v174(_V.v219, _V.v218, _V.v234)
                                    _V.v236 = {4, _V.v204, _V.v235}
                                    _V.v237 = _V.v185(_V.v203, _V.v236, _V.v205)
                                    return _V.v237
                                  else
                                    break
                                  end
                                end
                              end)
                              return _V.v221
                            else
                              if _next_block == 556 then
                                _V.v222 = caml_make_closure(1, function(v231)
                                  -- Hoisted variables (4 total, using inherited _V table)
                                  _V.v232 = nil
                                  _V.v233 = nil
                                  _V.v234 = nil
                                  _V.v235 = nil
                                  _V.v231 = v231
                                  local _next_block = 541
                                  while true do
                                    if _next_block == 541 then
                                      _V.v232 = caml_call_gen(_V.v208, {_V.v209, _V.v231})
                                      _V.v233 = _V.v174(_V.v219, _V.v218, _V.v232)
                                      _V.v234 = {4, _V.v204, _V.v233}
                                      _V.v235 = _V.v185(_V.v203, _V.v234, _V.v205)
                                      return _V.v235
                                    else
                                      break
                                    end
                                  end
                                end)
                                return _V.v222
                              else
                                if _next_block == 557 then
                                  _V.v223 = _V.v207[2]
                                  _V.v224 = caml_make_closure(1, function(v231)
                                    -- Hoisted variables (5 total, using inherited _V table)
                                    _V.v232 = nil
                                    _V.v233 = nil
                                    _V.v234 = nil
                                    _V.v235 = nil
                                    _V.v236 = nil
                                    _V.v231 = v231
                                    local _next_block = 540
                                    while true do
                                      if _next_block == 540 then
                                        _V.v232 = caml_call_gen(_V.v208, {_V.v209, _V.v231})
                                        _V.v233 = _V.v175(_V.v223, _V.v232)
                                        _V.v234 = _V.v174(_V.v219, _V.v218, _V.v233)
                                        _V.v235 = {4, _V.v204, _V.v234}
                                        _V.v236 = _V.v185(_V.v203, _V.v235, _V.v205)
                                        return _V.v236
                                      else
                                        break
                                      end
                                    end
                                  end)
                                  return _V.v224
                                else
                                  if _next_block == 558 then
                                    _V.v225 = _V.v206[2]
                                    _V.v226 = type(_V.v207) == "number" and _V.v207 % 1 == 0
                                    if _V.v226 then
                                      _next_block = 559
                                    else
                                      _next_block = 562
                                    end
                                  else
                                    if _next_block == 559 then
                                      if _V.v207 then
                                        _next_block = 560
                                      else
                                        _next_block = 561
                                      end
                                    else
                                      if _next_block == 560 then
                                        _V.v227 = caml_make_closure(3, function(v231, v232, v233)
                                          -- Hoisted variables (5 total, using inherited _V table)
                                          _V.v234 = nil
                                          _V.v235 = nil
                                          _V.v236 = nil
                                          _V.v237 = nil
                                          _V.v238 = nil
                                          _V.v231 = v231
                                          _V.v232 = v232
                                          _V.v233 = v233
                                          local _next_block = 539
                                          while true do
                                            if _next_block == 539 then
                                              _V.v234 = caml_call_gen(_V.v208, {_V.v209, _V.v233})
                                              _V.v235 = _V.v175(_V.v232, _V.v234)
                                              _V.v236 = _V.v174(_V.v225, _V.v231, _V.v235)
                                              _V.v237 = {4, _V.v204, _V.v236}
                                              _V.v238 = _V.v185(_V.v203, _V.v237, _V.v205)
                                              return _V.v238
                                            else
                                              break
                                            end
                                          end
                                        end)
                                        return _V.v227
                                      else
                                        if _next_block == 561 then
                                          _V.v228 = caml_make_closure(2, function(v231, v232)
                                            -- Hoisted variables (4 total, using inherited _V table)
                                            _V.v233 = nil
                                            _V.v234 = nil
                                            _V.v235 = nil
                                            _V.v236 = nil
                                            _V.v231 = v231
                                            _V.v232 = v232
                                            local _next_block = 538
                                            while true do
                                              if _next_block == 538 then
                                                _V.v233 = caml_call_gen(_V.v208, {_V.v209, _V.v232})
                                                _V.v234 = _V.v174(_V.v225, _V.v231, _V.v233)
                                                _V.v235 = {4, _V.v204, _V.v234}
                                                _V.v236 = _V.v185(_V.v203, _V.v235, _V.v205)
                                                return _V.v236
                                              else
                                                break
                                              end
                                            end
                                          end)
                                          return _V.v228
                                        else
                                          if _next_block == 562 then
                                            _V.v229 = _V.v207[2]
                                            _V.v230 = caml_make_closure(2, function(v231, v232)
                                              -- Hoisted variables (5 total, using inherited _V table)
                                              _V.v233 = nil
                                              _V.v234 = nil
                                              _V.v235 = nil
                                              _V.v236 = nil
                                              _V.v237 = nil
                                              _V.v231 = v231
                                              _V.v232 = v232
                                              local _next_block = 537
                                              while true do
                                                if _next_block == 537 then
                                                  _V.v233 = caml_call_gen(_V.v208, {_V.v209, _V.v232})
                                                  _V.v234 = _V.v175(_V.v229, _V.v233)
                                                  _V.v235 = _V.v174(_V.v225, _V.v231, _V.v234)
                                                  _V.v236 = {4, _V.v204, _V.v235}
                                                  _V.v237 = _V.v185(_V.v203, _V.v236, _V.v205)
                                                  return _V.v237
                                                else
                                                  break
                                                end
                                              end
                                            end)
                                            return _V.v230
                                          else
                                            break
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v191 = caml_make_closure(6, function(counter, v203, v204, v205, v206, v207)
        -- Hoisted variables (8 total, using inherited _V table)
        _V.counter1 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.counter = counter
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        _V.v206 = v206
        _V.v207 = v207
        local _next_block = 589
        while true do
          if _next_block == 589 then
            if _V.v206 then
              _next_block = 590
            else
              _next_block = 591
            end
          else
            if _next_block == 590 then
              _V.v208 = _V.v206[2]
              _V.v209 = caml_make_closure(1, function(v215)
                -- Hoisted variables (2 total, using inherited _V table)
                _V.v216 = nil
                _V.v217 = nil
                _V.v215 = v215
                local _next_block = 588
                while true do
                  if _next_block == 588 then
                    _V.v216 = caml_call_gen(_V.v207, {_V.v215})
                    _V.v217 = _V.v192(_V.v203, _V.v204, _V.v205, _V.v208, _V.v216)
                    return _V.v217
                  else
                    break
                  end
                end
              end)
              return _V.v209
            else
              if _next_block == 591 then
                _V.v210 = {4, _V.v204, _V.v207}
                _V.v211 = _V.counter < 50
                if _V.v211 then
                  _next_block = 835
                else
                  _next_block = 836
                end
              else
                if _next_block == 835 then
                  _V.counter1 = _V.counter + 1
                  _V.v212 = _V.v184(_V.counter1, _V.v203, _V.v210, _V.v205)
                  return _V.v212
                else
                  if _next_block == 836 then
                    _V.v213 = caml_js_array(0, _V.v203, _V.v210, _V.v205)
                    _V.v214 = caml_trampoline_return(_V.v184, _V.v213)
                    return _V.v214
                  else
                    break
                  end
                end
              end
            end
          end
        end
      end)
      _V.v192 = caml_make_closure(5, function(v203, v204, v205, v206, v207)
        -- Hoisted variables (3 total, using inherited _V table)
        _V.counter = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v203 = v203
        _V.v204 = v204
        _V.v205 = v205
        _V.v206 = v206
        _V.v207 = v207
        local _next_block = 819
        while true do
          if _next_block == 819 then
            
            _V.counter = 0
            _V.v208 = _V.v191(_V.counter, _V.v203, _V.v204, _V.v205, _V.v206, _V.v207)
            
            _V.v209 = caml_trampoline(_V.v208)
            return _V.v209
          else
            break
          end
        end
      end)
      _V.v193 = caml_make_closure(2, function(v203, v204)
        -- Block arg: v205 = v204 (local)
        _V.v205 = v204
        -- Hoisted variables (45 total, using inherited _V table)
        _V.v206 = nil
        _V.v207 = nil
        _V.v208 = nil
        _V.v209 = nil
        _V.v210 = nil
        _V.v211 = nil
        _V.v212 = nil
        _V.v213 = nil
        _V.v214 = nil
        _V.v215 = nil
        _V.v216 = nil
        _V.v217 = nil
        _V.v218 = nil
        _V.v219 = nil
        _V.v220 = nil
        _V.v221 = nil
        _V.v222 = nil
        _V.v223 = nil
        _V.v224 = nil
        _V.v225 = nil
        _V.v226 = nil
        _V.v227 = nil
        _V.v228 = nil
        _V.v229 = nil
        _V.v230 = nil
        _V.v231 = nil
        _V.v232 = nil
        _V.v233 = nil
        _V.v234 = nil
        _V.v235 = nil
        _V.v236 = nil
        _V.v237 = nil
        _V.v238 = nil
        _V.v239 = nil
        _V.v240 = nil
        _V.v241 = nil
        _V.v242 = nil
        _V.v243 = nil
        _V.v244 = nil
        _V.v245 = nil
        _V.v246 = nil
        _V.v247 = nil
        _V.v248 = nil
        _V.v249 = nil
        _V.v203 = v203
        _V.v204 = v204
        local _next_block = 592
        while true do
          if _next_block == 592 then
            _V.v206 = _V.v205[1] or 0
            if _V.v206 == 0 then
              _next_block = 594
            else
              if _V.v206 == 1 then
                _next_block = 595
              else
                if _V.v206 == 2 then
                  _next_block = 601
                else
                  if _V.v206 == 3 then
                    _next_block = 602
                  else
                    if _V.v206 == 4 then
                      _next_block = 601
                    else
                      if _V.v206 == 5 then
                        _next_block = 602
                      else
                        if _V.v206 == 6 then
                          _next_block = 598
                        else
                          if _V.v206 == 7 then
                            _next_block = 599
                          else
                            if _V.v206 == 8 then
                              _next_block = 600
                            else
                              _next_block = 594
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          else
            if _next_block == 593 then
              return _V.dummy
            else
              if _next_block == 594 then
                _V.v207 = _V.v205[3]
                _V.v208 = _V.v205[2]
                _V.v209 = type(_V.v207) == "number" and _V.v207 % 1 == 0
                if _V.v209 then
                  _next_block = 757
                else
                  _next_block = 758
                end
              else
                if _next_block == 595 then
                  _V.v210 = _V.v205[3]
                  _V.v211 = _V.v205[2]
                  _V.v212 = _V.v210[1] or 0
                  _V.v213 = 0 == _V.v212
                  if _V.v213 then
                    _next_block = 596
                  else
                    _next_block = 597
                  end
                else
                  if _next_block == 596 then
                    _V.v214 = _V.v210[2]
                    _V.v215 = _V.v193(_V.v203, _V.v211)
                    _V.v216 = _V.v143(_V.v203, _V.v50)
                    -- Block arg: v205 = v214 (captured)
                    _V.v205 = _V.v214
                    _next_block = 801
                  else
                    if _next_block == 597 then
                      _V.v217 = _V.v210[2]
                      _V.v218 = _V.v193(_V.v203, _V.v211)
                      _V.v219 = _V.v143(_V.v203, _V.v51)
                      -- Block arg: v205 = v217 (captured)
                      _V.v205 = _V.v217
                      _next_block = 801
                    else
                      if _next_block == 598 then
                        _V.v220 = _V.v205[3]
                        _V.v221 = _V.v205[2]
                        _V.v222 = _V.v193(_V.v203, _V.v221)
                        _V.v223 = caml_call_gen(_V.v220, {_V.v203})
                        return _V.v223
                      else
                        if _next_block == 599 then
                          _V.v224 = _V.v205[2]
                          _V.v225 = _V.v193(_V.v203, _V.v224)
                          _V.v226 = caml_ml_flush(_V.v203)
                          return _V.dummy
                        else
                          if _next_block == 600 then
                            _V.v227 = _V.v205[3]
                            _V.v228 = _V.v205[2]
                            _V.v229 = _V.v193(_V.v203, _V.v228)
                            _V.v230 = _V.v134(_V.v227)
                            return _V.v230
                          else
                            if _next_block == 601 then
                              _V.v231 = _V.v205[3]
                              _V.v232 = _V.v205[2]
                              _V.v233 = _V.v193(_V.v203, _V.v232)
                              _V.v234 = _V.v143(_V.v203, _V.v231)
                              return _V.v234
                            else
                              if _next_block == 602 then
                                _V.v235 = _V.v205[3]
                                _V.v236 = _V.v205[2]
                                _V.v237 = _V.v193(_V.v203, _V.v236)
                                _V.v238 = caml_ml_output_char(_V.v203, _V.v235)
                                return _V.dummy
                              else
                                if _next_block == 757 then
                                  if _V.v207 == 0 then
                                    -- Block arg: v250 = v109 (captured)
                                    _V.v250 = _V.v109
                                    _next_block = 817
                                  else
                                    if _V.v207 == 1 then
                                      -- Block arg: v250 = v110 (captured)
                                      _V.v250 = _V.v110
                                      _next_block = 817
                                    else
                                      if _V.v207 == 2 then
                                        -- Block arg: v250 = v111 (captured)
                                        _V.v250 = _V.v111
                                        _next_block = 817
                                      else
                                        if _V.v207 == 3 then
                                          -- Block arg: v250 = v112 (captured)
                                          _V.v250 = _V.v112
                                          _next_block = 817
                                        else
                                          if _V.v207 == 4 then
                                            -- Block arg: v250 = v113 (captured)
                                            _V.v250 = _V.v113
                                            _next_block = 817
                                          else
                                            if _V.v207 == 5 then
                                              -- Block arg: v250 = v114 (captured)
                                              _V.v250 = _V.v114
                                              _next_block = 817
                                            else
                                              if _V.v207 == 6 then
                                                -- Block arg: v250 = v115 (captured)
                                                _V.v250 = _V.v115
                                                _next_block = 817
                                              else
                                                -- Block arg: v250 = v109 (captured)
                                                _V.v250 = _V.v109
                                                _next_block = 817
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                else
                                  if _next_block == 758 then
                                    _V.v239 = _V.v207[1] or 0
                                    _V.v240 = 2 == _V.v239
                                    if _V.v240 then
                                      _next_block = 767
                                    else
                                      _next_block = 766
                                    end
                                  else
                                    if _next_block == 766 then
                                      _V.v241 = _V.v207[2]
                                      -- Block arg: v250 = v241 (captured)
                                      _V.v250 = _V.v241
                                      _next_block = 817
                                    else
                                      if _next_block == 767 then
                                        _V.v242 = _V.v207[2]
                                        _V.v243 = 1
                                        _V.v244 = _V.v154(_V.v243, _V.v242)
                                        _V.v245 = caml_string_of_bytes(_V.v244)
                                        _V.v246 = _V.v137(_V.v116, _V.v245)
                                        -- Block arg: v250 = v246 (captured)
                                        _V.v250 = _V.v246
                                        _next_block = 817
                                      else
                                        if _next_block == 801 then
                                          _V.v247 = type(_V.v205) == "number" and _V.v205 % 1 == 0
                                          if _V.v247 then
                                            _next_block = 593
                                          else
                                            _next_block = 592
                                          end
                                        else
                                          if _next_block == 817 then
                                            _V.v248 = _V.v193(_V.v203, _V.v208)
                                            _V.v249 = _V.v143(_V.v203, _V.v250)
                                            return _V.v249
                                          else
                                            break
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end)
      _V.v194 = 42
      _V.v195 = _V.v118[2]
      _V.v196 = 0
      _V.v197 = caml_make_closure(1, function(v203)
        -- Hoisted variables (2 total, using inherited _V table)
        _V.v204 = nil
        _V.v205 = nil
        _V.v203 = v203
        local _next_block = 796
        while true do
          if _next_block == 796 then
            _V.v204 = _V.v193(_V.v140, _V.v203)
            _V.v205 = 0
            return _V.v205
          else
            break
          end
        end
      end)
      _V.v198 = _V.v185(_V.v197, _V.v196, _V.v195)
      _V.v199 = caml_call_gen(_V.v198, {_V.v194})
      _V.v200 = 0
      _V.v201 = caml_atomic_load(_V.v144)
      _V.v202 = caml_call_gen(_V.v201, {_V.v200})
      return nil
    else
      break
    end
  end
end
__caml_init__()
