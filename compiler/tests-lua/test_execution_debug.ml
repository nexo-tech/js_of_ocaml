(* Test to compare Lua and JS backend outputs for the same program *)

open! Js_of_ocaml_compiler.Stdlib

(* Helper: check if string contains substring *)
let contains_substring str sub =
  try
    let _ = Str.search_forward (Str.regexp_string sub) str 0 in
    true
  with Not_found -> false

let%expect_test "compare hello.ml compilation between JS and Lua backends" =
  (* This test helps us understand what the JS backend generates vs Lua *)

  (* Check if JS output exists *)
  let js_file = "../../examples/hello_lua/hello.bc.js" in
  if Sys.file_exists js_file
  then begin
    (* Read first 50 lines of JS output to see structure *)
    let ic = open_in_text js_file in
    Printf.printf "=== JS Backend Output (first 50 lines) ===\n";
    (try
       for _ = 1 to 50 do
         let line = input_line ic in
         Printf.printf "%s\n" line
       done
     with End_of_file -> ());
    close_in ic
  end
  else Printf.printf "JS output not found, run: dune build examples/hello_lua/hello.bc.js\n";

  [%expect
    {|
    === JS Backend Output (first 50 lines) ===
    // Generated by js_of_ocaml
    //# buildInfo:effects=disabled, kind=exe, use-js-string=true, version=6.2.0+ffb23ad5-dirty
    (function(a){typeof
    globalThis!=="object"&&(this?b():(a.defineProperty(a.prototype,"_T_",{configurable:true,get:b}),_T_));function
    b(){var
    b=this||self;b.globalThis=b;delete
    a.prototype._T_}}(Object));(function(d){"use strict";var
    ak="EINVAL",ck=0xfc00,cA="Unix.Unix_error",aU=254,cb="%li",bh="EISDIR",am=".",cz=0x80000000,c=248,aO="_bigarr02",cK=12520,I=0xff,ca="Assert_failure",cy="Undefined_recursive_module",E=0xffff,bl="mkdir",aP='"',bk="ESPIPE",b$=120,cw=103,cx="Sys_error",aT=127,cJ="Match_failure",b_="^",L=0x8000,cv=100,al="EBADF",ax="bad file descriptor",cI="write",cH="%ni",bq=0x7ff00000,b9=0x0400,cj="illegal seek",cG=" doesn't exist",cu="ENOTEMPTY",ci="0x",aS="ENOTDIR",ch="([^/]+)",b7="Stack_overflow",b8="Invalid_argument",X=1000,bi="compare: functional value",bj="rmdir",aV=0x7c00,b6="End_of_file",cg="%d",ab="-",b5="read",bg="index out of bounds",an="+",ct=250,aw="ENOENT",bf="Failure",b4=-97,cr="Pervasives.do_at_exit",cs=0x7f800000,az="node:fs",be="win32",ay=128,aR="lseek",O="/",cq="%u",b3="Out_of_memory",cp="%Li",co="Sys_blocked_io",bd=256,cf="illegal operation on a directory",b2=-48,bc=1255,V=" ",a="camlinternalFormat.ml",cF=512,ce=4096,x=0xffffff,bp="nan",b1="truncate",P=0x100,cn=0x000000,cd="readdir",cm=0.0009765625,cE="Not_found",b0="/static/",C="0",bZ="infinity",cl="file already exists",bo="EEXIST",bY="fd ",bn="open",cD="Division_by_zero",cC="Testing string operations...\n",aQ="no such file or directory",bm="e",bX="not a directory",cB="jsError",bW="%i",cc=", ",f="",aa=1024,aA="invalid argument";function
    fo(a){return a[1]}function
    a5(a,b,c){var
    d=String.fromCharCode;if(b===0&&c<=ce&&c===a.length)return d.apply(null,a);var
    e=f;for(;0<c;b+=aa,c-=aa)e+=d.apply(null,a.subarray(b,b+Math.min(c,aa)));return e}function
    aW(a){var
    c=new
    Uint8Array(a.l),e=a.c,d=e.length,b=0;for(;b<d;b++)c[b]=e.charCodeAt(b);for(d=a.l;b<d;b++)c[b]=0;a.c=c;a.t=4;return c}function
    Z(a,b,c,d,e){if(e===0)return 0;if(d===0&&(e>=c.l||c.t===2&&e>=c.c.length)){c.c=a.t===4?a5(a.c,b,e):b===0&&a.c.length===e?a.c:a.c.slice(b,b+e);c.t=c.c.length===c.l?0:2}else if(c.t===2&&d===c.c.length){c.c+=a.t===4?a5(a.c,b,e):b===0&&a.c.length===e?a.c:a.c.slice(b,b+e);c.t=c.c.length===c.l?0:2}else{if(c.t!==4)aW(c);var
    g=a.c,h=c.c;if(a.t===4)if(d<=b)for(var
    f=0;f<e;f++)h[d+f]=g[b+f];else
    for(var
    f=e-1;f>=0;f--)h[d+f]=g[b+f];else{var
    i=Math.min(e,g.length-b);for(var
    f=0;f<i;f++)h[d+f]=g.charCodeAt(b+f);for(;f<e;f++)h[d+f]=0}}return 0}var
    di=new
    TextDecoder();function
    bI(a){if(a.t!==4)aW(a);return a.c}function
    _(a,b){return b.repeat(a)}function
    aX(a){if(a.t===2)a.c+=_(a.l-a.c.length,"\0");else
    a.c=a5(a.c,0,a.c.length);a.t=0}function
    bL(a){if(a.length<24){for(var
    b=0;b<a.length;b++)if(a.charCodeAt(b)>aT)return false;return true}else
    return!/[^\x00-\x7f]/.test(a)}class
    ac{constructor(a,b,c){this.t=a;this.c=b;this.l=c}toString(){switch(this.t){case
    9:case
    8:return this.c;case
    4:case
    2:aX(this);case
    0:if(bL(this.c))this.t=9;else
    this.t=8;return this.c}}toUtf16(){if(this.t===9)return this.c;var
    a=bI(this);return di.decode(a)}slice(){var
    a=this.t===4?this.c.slice():this.c;return new
    ac(this.t,a,this.l)}}function
    cW(a){return new
    ac(0,a,a.length)}function
    ap(a){return a}function
    ad(a){return cW(ap(a))}function
    bu(a,b,c,d,e){Z(ad(a),b,c,d,e);return 0}var
    dh={};function
    gd(a){if(dh[a])return dh[a];var
    b=d.process;if(b&&b.env&&b.env[a]!==undefined)return b.env[a];if(d.jsoo_env&&typeof
    d.jsoo_env[a]==="string")return d.jsoo_env[a]}var
  |}]

let%expect_test "check if hello.bc.lua contains execution code" =
  (* Check generated Lua for execution patterns *)
  let lua_file = "../../examples/hello_lua/hello.bc.lua" in
  if Sys.file_exists lua_file
  then begin
    let content = In_channel.with_open_bin lua_file In_channel.input_all in
    (* Look for execution patterns *)
    let has_print_call = contains_substring content "print" in
    let has_function_calls =
      contains_substring content "(" && contains_substring content ")"
    in
    let has_returns = contains_substring content "return" in
    let has_local_vars = contains_substring content "local v" in
    Printf.printf "Has print calls: %b\n" has_print_call;
    Printf.printf "Has function calls: %b\n" has_function_calls;
    Printf.printf "Has returns: %b\n" has_returns;
    Printf.printf "Has local vars: %b\n" has_local_vars;
    (* Show chunk of code around initialization *)
    let lines = String.split_on_char ~sep:'\n' content in
    Printf.printf "\n=== Init chunk sample (lines 20-40) ===\n";
    List.iteri
      ~f:(fun i line ->
        if i >= 19 && i < 40 then Printf.printf "%d: %s\n" (i + 1) line)
      lines
  end
  else Printf.printf "Lua output not found\n";

  [%expect
    {|
    Has print calls: true
    Has function calls: true
    Has returns: true
    Has local vars: true

    === Init chunk sample (lines 20-40) ===
    21: function __caml_init_chunk_0()
    22:   -- Module initialization code (chunk 1/3)
    23:   local v297 = "Hello from Lua_of_ocaml!"
    24:   local v298 = "Factorial of %d is: %d\012"
    25:   local v299 = function(v19)
    26:     local v22 = function(v20, v21)
    27:       if v21 <= 1 then
    28:         return v20
    29:       else
    30:         local v23 = v20 * v21
    31:         local v24 = v21 - 1
    32:         return v22(v23, v24)
    33:       end
    34:     end
    35:     return v22(1, v19)
    36:   end
    37:   local v300 = "Testing string operations...\012"
    38:   local v301 = "Length of '%s': %d\012"
    39:   local v302 = "lua_of_ocaml"
    40:   local v303 = "Uppercase: %s\012"
  |}]

let%expect_test "analyze JS vs Lua structure differences" =
  let js_file = "../../examples/hello_lua/hello.bc.js" in
  let lua_file = "../../examples/hello_lua/hello.bc.lua" in
  let js_exists = Sys.file_exists js_file in
  let lua_exists = Sys.file_exists lua_file in
  Printf.printf "JS file exists: %b\n" js_exists;
  Printf.printf "Lua file exists: %b\n" lua_exists;
  if js_exists && lua_exists
  then begin
    let js_content = In_channel.with_open_bin js_file In_channel.input_all in
    let lua_content = In_channel.with_open_bin lua_file In_channel.input_all in
    (* Analyze JS output *)
    let js_lines = List.length (String.split_on_char ~sep:'\n' js_content) in
    let js_size = String.length js_content in
    let js_has_hello = contains_substring js_content "Hello from" in
    let js_has_factorial = contains_substring js_content "Factorial" in
    (* Analyze Lua output *)
    let lua_lines = List.length (String.split_on_char ~sep:'\n' lua_content) in
    let lua_size = String.length lua_content in
    let lua_has_hello = contains_substring lua_content "Hello from" in
    let lua_has_factorial = contains_substring lua_content "Factorial" in
    Printf.printf "\n=== JS Backend ===\n";
    Printf.printf "Lines: %d\n" js_lines;
    Printf.printf "Size: %d bytes\n" js_size;
    Printf.printf "Contains 'Hello from': %b\n" js_has_hello;
    Printf.printf "Contains 'Factorial': %b\n" js_has_factorial;
    Printf.printf "\n=== Lua Backend ===\n";
    Printf.printf "Lines: %d\n" lua_lines;
    Printf.printf "Size: %d bytes\n" lua_size;
    Printf.printf "Contains 'Hello from': %b\n" lua_has_hello;
    Printf.printf "Contains 'Factorial': %b\n" lua_has_factorial;
    Printf.printf "\n=== Analysis ===\n";
    Printf.printf
      "Both backends include the string constants, confirming they process the same \
       source.\n";
    Printf.printf
      "JS backend is minified (%d bytes), Lua is readable (%d bytes).\n"
      js_size
      lua_size
  end;

  [%expect
    {|
    JS file exists: true
    Lua file exists: true

    === JS Backend ===
    Lines: 1
    Size: 251564 bytes
    Contains 'Hello from': true
    Contains 'Factorial': true

    === Lua Backend ===
    Lines: 369
    Size: 16772 bytes
    Contains 'Hello from': true
    Contains 'Factorial': true

    === Analysis ===
    Both backends include the string constants, confirming they process the same source.
    JS backend is minified (251564 bytes), Lua is readable (16772 bytes).
  |}]
